{"version":3,"sources":["math/geom.ts","math/polyhedra/index.ts","math/polyhedra/FaceLike.ts","math/polyhedra/Edge.ts","math/polyhedra/Vertex.ts","math/polyhedra/Polyhedron.ts","math/polyhedra/Face.ts","math/polyhedra/SolidBuilder.ts","math/polyhedra/Cap.ts","images/sad-scutoid.png","components/ErrorPage.tsx","components/ViewerPage/context/PolyhedronCtx.tsx","components/ViewerPage/context/OperationCtx.tsx","components/ViewerPage/context/TransitionCtx.tsx","transition.ts","components/ViewerPage/context/useApplyOperation.tsx","math/operations/operationUtils.ts","math/operations/operationPairs.ts","math/operations/Operation.ts","math/operations/resizeOps.ts","math/operations/truncateOps.ts","math/operations/prismUtils.ts","math/operations/prismOps.ts","math/operations/cutPasteOps/cutPasteUtils.ts","math/operations/cutPasteOps/augment.ts","math/operations/cutPasteOps/diminish.ts","math/operations/cutPasteOps/gyrate.ts","math/operations/index.ts","components/svg.tsx","components/ViewerPage/common/OperationIcon.tsx","components/ViewerPage/common/OpGrid.tsx","components/ViewerPage/common/ResizeButtons.tsx","components/ViewerPage/common/Options/TwistOptions.tsx","components/ViewerPage/common/Options/OptionIcon.tsx","components/ViewerPage/common/Options/AugmentOptions.tsx","components/ViewerPage/common/Options/Options.tsx","x3domWrapper.ts","components/ViewerPage/common/SolidScene/X3dScene.tsx","components/ViewerPage/common/SolidScene/X3dPolyhedron.tsx","components/ViewerPage/common/SolidScene/useSolidContext.tsx","components/ViewerPage/common/SolidScene/index.tsx","components/ViewerPage/common/SolidScene/SolidScene.tsx","components/ViewerPage/common/SolidScene/useHitOptions.tsx","components/ViewerPage/common/IconLink.tsx","components/ViewerPage/common/BackLink.tsx","components/ViewerPage/common/NavMenu.tsx","components/ViewerPage/common/DataDownloader.tsx","components/ViewerPage/common/InfoPanel/renderFuncs.tsx","components/ViewerPage/common/InfoPanel/DataList.tsx","components/ViewerPage/common/InfoPanel/InfoPanel.tsx","components/ViewerPage/common/ConfigForm.tsx","data/list.ts","components/ViewerPage/common/ListPanel/SearchBar.tsx","components/ViewerPage/common/ListPanel/ListPanel.tsx","components/ViewerPage/common/Panels.tsx","components/ViewerPage/common/Title.tsx","components/ViewerPage/common/ImageDownloader.tsx","components/ViewerPage/common/Prompt.tsx","components/ViewerPage/common/useHiddenHeading.tsx","components/ViewerPage/DesktopViewer/OperationsPanel.tsx","components/ViewerPage/DesktopViewer/Sidebar.tsx","components/ViewerPage/DesktopViewer/Overlay.tsx","components/ViewerPage/DesktopViewer/DesktopViewer.tsx","components/ViewerPage/MobileViewer/OperationsPanel.tsx","components/ViewerPage/MobileViewer/MobileViewer.tsx","components/ViewerPage/Viewer.tsx","components/ViewerPage/ViewerPage.tsx"],"names":["PRECISION","vec","p","Vec3D","getMidpoint","v1","v2","add","scale","isInverse","getInverted","equalsWithTolerance","angleBetween","o","a","b","sub","getPlane","points","length","Error","Plane","Triangle3D","isPlanar","plane","every","getDistanceToPoint","getCentroid","vectors","reduce","getNormal","vertices","v0","cross","getNormalized","getNormalRay","Ray3D","withOrigin","t","v","getOrientation","v3","Matrix4x4","x","y","z","getOrthonormalTransform","u1","u2","uOrientation","multiply","getTransposed","FaceLike","edges","polyhedron","this","map","edge","twin","face","filter","centroid","normal","sideLength","Math","tan","PI","numSides","sin","apothem","distanceTo","Edge","find","e","equals","index","midpoint","twinFace","edgeToFaceGraph","getCycles","array","val","i","splitAt","front","back","arrayMin","a1","a2","h1","t1","h2","t2","Vertex","value","_solidData","other","some","vertex","parseInt","findKey","e0","count","prev","adjacentEdgesIter","adjacentEdges","config","adjacentFaces","f","concat","reverse","countBy","Polyhedron","solidData","name","faces","_edges","once","edgesToFaces","set","vIndex","fIndex","Face","getSolidData","numVertices","numEdges","numFaces","maxBy","minBy","n","sortBy","Object","keys","numFacesBySides","configuration","join","getFace","sum","area","surfaceArea","edgeLength","distanceToCenter","volume","point","changes","Builder","build","withChanges","s","withVertices","withFaces","withoutFaces","addPolyhedron","mapVertices","mapFaces","cbrt","facesBySides","faceAdjacencyCounts","adj","adjacentFaceCounts","polygons","isEqual","faceAdjacencyList","flatMap","getCyclic","flatMapUniq","normalizeVertex","Array","isArray","toArray","normalizeFace","iteratee","removed","pullAt","addVertices","addFaces","createMapper","mapper","Base","arg","cap","isValid","Cap","innerVertices","type","topPoint","faceConfiguration","_innerVertices","allVertices","boundary","inSet","result","next","push","nextTwin","getBoundary","hitPoint","hitFace","caps","getAll","pyramids","Pyramid","fastigium","Fastigium","cupolaRotunda","Cupola","Rotunda","normalRay","faceCount","adjacentVertices","module","exports","Image","css","useStyle","square","scales","size","src","image","alt","Title","textAlign","fontFamily","fonts","andaleMono","fontSize","font","media","mobile","BackLink","link","to","ErrorPage","usePageTitle","width","height","display","gridGap","spacing","alignContent","justifyContent","justifyItems","defaultProps","createHookedContext","setPolyhedron","props","get","defaultState","operation","undefined","options","setOperation","solid","defaultOptions","unsetOperation","setOption","getFaceColors","mapping","colors","faceColors","isTransitioning","InterpModel","reset","TransitionContext","React","createContext","noop","InnerProvider","children","transitionId","useRef","PolyhedronCtx","useActions","Config","useState","animationSpeed","enableAnimation","anim","useEffect","current","cancel","transitionFn","useCallback","animationData","start","endVertices","startColors","endColors","updateCallback","startValue","endValue","duration","ease","onFinish","id","interp","interpolate","requestAnimationFrame","step","timestamp","delta","progress","min","currentValue","d3","cancelAnimationFrame","transition","Provider","useTransition","useContext","useApplyOperation","OperationCtx","TransitionCtx","callback","apply","hasOptions","canApplyTo","getValidSpecs","getOppTwist","twist","oppositeFace","snubChirality","geom","largestFace","capstoneChirality","cap1","cap2","isCupolaRotunda","rightFaceAcross","getAllSpecs","specs","isChiral","isClassical","withData","isCapstone","getGeometry","canonicalName","isSnub","data","reflect","removeExtraneousVertices","vertsInFaces","toRemove","numToRemove","notToRemove","takeRight","newToOld","mapObject","oldToNew","invert","newVertices","dropRight","deduplicateVertices","unique","forEach","match","isEmpty","newFaces","uniq","vIndices","getTransformedVertices","vLists","vList","oppositeSide","side","normalizeOrientation","_u2","ZERO","getProjectedPoint","alignPolyhedron","pose1","pose2","orientation","matrix","rotate","origin","u","applyTo","defaultGetter","OpPair","inputs","graph","entry","opts","isMatch","findEntry","JSON","stringify","getEntries","getEntry","middle","inter","getMiddle","getPose","toLeft","toRight","left","right","startPose","endSide","endSpecs","endGeom","alignedEnd","middleSolid","PolyhedronSpecs","alignedInter","startFn","endFn","makeOperation","op","getResult","getOpposite","allOptionCombos","allOptions","makeOpPair","opInput","combineOps","opArgs","getOp","methodDefaults","getHitOption","isPreferredSpec","faceSelectionStates","pairs","found","f1","f2","getCoplanarFaces","numUniqueSides","arrayDefaults","first","second","item","Operation","hitOption","mapValues","fnDefault","fn","validSpecs","info","opResult","newName","end","normedResult","withName","normalizeOpResult","hitPnt","getSolidArgs","optionName","getSnubFaces","facet","isTetrahedral","f0","faceWithNumSides","getSnubTetrahedronFaces","isSnubFace","getFaceType","getBevelledFaces","rest","getBevelledTetrahedronFaces","getCantellatedFaces","odd","getCantellatedTetrahedronFaces","isCantellatedFace","getResizedVertices","distance","angle","resizedLength","getRotatedAroundAxis","getSchafli","isFace","family","coxeterNum","3","4","5","cos","tanDihedralOver2","q","h","getInradius","apothemVec","calcSnubAngle","expandedFaces","face0","faceCentroid","face1","createObject","items","iter","snubAngles","Classical","query","faceType","isCantellatedEdgeFace","getCantellatedEdgeFace","getCantellatedFace","cantellatedDists","calcTruncatedDist","_facet","bevelledDists","getSnubAngle","crossAxis","getRegularPose","getCantellatedPose","getSnubPose","twistOpts","semiExpand","where","isTruncated","pos","_expand","isRegular","_snub","isVertex","_twist","isCantellated","getCantellatedMidradius","doDualTransform","resultSpecs","getMidradius","getCircumradius","_dual","getVertex","edgeShape","snub","cantellate","isExpandedFace","nSides","expansionType","dual","expand","contract","isBevelled","getSharpenPoint","p1","p2","ray","theta1","theta2","dist","getPointAtDistance","getSharpenPointEdge","getAvgInradius","isRectified","makeTruncateTrio","args","makePair","leftOp","rightOp","middleArg","$","values","pose","transformer","truncate","cotruncate","rectify","crossPoint","regs","smallestFace","getSharpenFaces","getAmboPose","ambos","resultSpec","ref","refInradius","refFace","refMidradius","refFaceRadius","radius","augTruncate","Composite","source","isAugmented","isDiminished","isTetrahedron","capVertIndices","sourceVerts","includes","isBaseFace","scaleFace","mainAxis","isTri","isBi","isMeta","truncatedFaces","cupolaFaces","otherFace","hitOptArgs","sharpen","getOppositeFacets","isPrismatic","base","face2","getOppositePrismFaces","getOppositeCaps","uniqBy","sqrt","antiprismHeight","sec","getPrismaticHeight","elongation","getTwistMult","faceCenter","getNumSides","isPyramid","getScaledPrismVertices","vertexSets","doShorten","doTurn","capTypeMap","rotunda","cupola","pyramid","makePrismOp","rightElongation","leftElongation","Capstone","turnPrismatic","Prismatic","isPrism","isDigonal","_elongate","canGyroelongPyramid","canGyroelongCupola","pyramidOps","isMono","gyroelongPyramid","turnPyramid","cupolaOps","gyroelongCupola","turnCupola","bipyramidOps","gyroelongBipyramid","turnBipyramid","makeBicupolaPrismOp","isGyro","gyroelongBicupola","turnBicupola","elongate","gyroelongate","shorten","turn","inc","dec","getCupolaGyrate","getCapAlignment","orthoCaps","otherNormal","getSingle","augmentData","2","augmentTypes","Y","U","R","hasAugmentAlignment","isComposite","augmented","isIcosahedral","getAugmentAlignment","canAugmentWith","augmentee","offset","underside","dihedralAngle","canAugmentWithType","using","augmentType","getUsingType","canAugment","augmentees","compact","getPossibleAugmentees","setEquals","array1","array2","xor","isAligned","gyrate","baseType","getBaseType","adjFace","alignedFace","isOrtho","doAugment","getAugmentee","undersideRadius","isFastigium","baseRadius","transformMatrix","transform","rotatedVertices","newAugmentee","augmenteeInitial","repeat","endResult","defaultAugmentees","6","8","10","getUsingOpt","getUsingData","getAugmenteeNumSides","prefix","baseStr","getUsingOpts","isPentagonal","hasRotunda","hasGyrateOpts","isGyroelongated","allGyrateOpts","augment","isAntiprism","diminished","isPara","isElementary","gyrated","align","Elementary","gyrateOpts","usingOpts","faceOpts","pickBy","diminish","mockPolyhedron","range","removeCap","isShortened","capType","allCapFaces","TAU","operations","theta","applyGyrate","isGyrated","joinPoints","PolyShape","PolyLine","polygonPoints","r","cx","cy","Polygon","color","styles","inputStyles","StyleSheet","create","key","makeStyles","operationIcon","invariant","fill","stroke","strokeWidth","strokeLinejoin","subtracted","strokeDasharray","added","changed","TruncateIcon","styled","innerSides","innerScale","innerAngle","center","className","DualIcon","BaseExpandIcon","render","Renderer","hollow","ap","r1","ap1","ExpandIcon","innerStyle","ElongateIcon","AugmentIcon","memo","viewBox","drawIcon","opLayout","opList","flat","OpButton","disabled","currentOp","applyOperation","isCurrent","flexColumn","hover","border","verdana","backgroundColor","opacity","marginRight","style","gridArea","onClick","templateString","line","OpGrid","notMobile","gridColumnGap","gridRowGap","gridTemplateAreas","flexRow","scroll","ResetButton","alignSelf","padding","buttons","handler","normalizeToVolume","ResizeButtons","gridTemplateColumns","columnGap","TwistOption","handleClick","pointerEvents","background","path","mdiRotateLeft","mdiRotateRight","TwistOptions","InnerIcon","inner","outer","take","p3","p4","p5","p6","bottomY","q1","q2","getOptionName","optValue","OptionButton","selected","htmlProps","AugmentOptions","optionCss","Options","opName","x3dom","X3dScene","label","x3d","setTimeout","reload","canvas","querySelector","setAttribute","is","position","Viewarea","prototype","onDoubleClick","joinListOfLists","list","outerSep","innerSep","elem","Coordinates","data-testid","Edges","coordindex","defaultConfig","showFaces","showEdges","showInnerFaces","X3dPolyhedron","onHover","onMouseOut","shape","listeners","mousedown","mouseup","mousemove","mouseout","addEventListener","shapeNode","removeEventListener","colorStr","transparency","toString","colorpervertex","toRgb","hex","tinycolor","g","SolidScene","transitionColors","useMemo","operationColors","selectState","mix","useSolidContext","setHitOption","newHitOptions","newValue","unsetHitOption","applyWithHitOption","useHitOptions","pick","LinkText","text","hidden","marginTop","mobileLandscape","paddingLeft","IconLink","iconName","title","replace","iconOnly","colorFill","textDecoration","flexDirection","activeCss","mdiChevronLeft","escape","links","icon","mdiFormatListBulleted","mdiInformationOutline","mdiCog","mdiMathCompass","mdiCubeOutline","NavMenu","capitalize","formatDecimal","number","Number","isInteger","vToObj","fToObj","fileFormats","ext","serializer","vObj","fObj","DownloadLink","filename","blob","Blob","url","window","URL","createObjectURL","download","href","mdiDownload","DataDownloader","heading","times","marginBottom","format","groupedVertexConfig","Sub","verticalAlign","Sup","split","properties","check","_","isDeltahedron","isHoneycomb","infoRows","vConfig","vertexConfiguration","configKeys","typeCount","getShortVertexConfig","faceCounts","polygonNames","round","normalizedVolume","normalizedSurfaceArea","sphericity","symmetry","symbol","symName","order","filteredProps","property","prop","alts","alternateNames","Datum","nameCss","valueCss","DataList","rowProps","Heading","lineHeight","conwaySymbol","InfoPanel","borderSpacing","borderCollapse","typeCss","downloaderCss","getSpecs","group","ConfigInput","input","setValue","inputProps","checked","getInputProps","onChange","el","getInputValue","target","option","LabelledInput","ConfigForm","configInputs","johnsonSubgroups","getEndIndex","groups","polyhedra","getPolyhedraNames","slice","SearchIcon","focused","paddingTop","mdiMagnify","SearchInput","borderRadius","outline","borderColor","placeholder","aria-label","isFocused","setFocus","onFocus","onBlur","getFilteredPolyhedra","toLowerCase","filterSubgroups","subgroups","filterText","PolyhedronLink","overflow","textOverflow","whiteSpace","fontWeight","SubList","SubgroupHeader","margin","Subgroup","marginVert","GroupHeader","Group","ListPanel","setFilterText","filteredGroups","filterGroups","paddingVert","Panels","panel","OperationsPanel","operationsPanel","tabletPortrait","Prompt","message","getMessage","useHiddenHeading","focusFn","focus","tabIndex","buttonCss","menuH","Sidebar","header","focusOnHeader","gridTemplateRows","borderLeft","navCss","paddingHoriz","borderBottom","contentCss","Overlay","absoluteFull","absolute","homeLink","prompt","top","Scene","full","StyledSidebar","minWidth","maxWidth","resizeButtons","opGrid","mobilePortrait","Header","alignItems","Content","transparent","zIndex","navH","sceneCss","borderTop","InnerViewer","navigate","useNavigate","solidSync","setSolidSync","ViewerComponent","useMediaInfo","device","DesktopViewer","MobileViewer","Providers","wrapProviders","Viewer","useParams","ViewerPage","params","pathname","useLocation","solidParam","choose","allSolidNames","isConwayNotation","fromConwayNotation","isAlternateName","getCanonicalName","isValidSolid","resolveSolidName","element"],"mappings":"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","file":"static/js/8.b7b22dac.chunk.js","sourcesContent":["import { Vec3D, Ray3D, Triangle3D, Plane, Matrix4x4 } from \"toxiclibsjs/geom\"\r\nimport { Point } from \"types\"\r\n\r\n// Re-export useful things so its easier to switch\r\nexport { Ray3D, Vec3D, Plane }\r\n\r\nexport const PRECISION_DIGITS = 3\r\nexport const PRECISION = 10 ** -PRECISION_DIGITS\r\n\r\n// convert an array of vertices into a vector\r\nexport const vec = (p: Point) => new Vec3D(...p)\r\n\r\nexport const getMidpoint = (v1: Vec3D, v2: Vec3D) => v1.add(v2).scale(0.5)\r\n\r\nexport function isInverse(v1: Vec3D, v2: Vec3D) {\r\n  return v1.getInverted().equalsWithTolerance(v2, PRECISION)\r\n}\r\n\r\nexport function angleBetween(o: Vec3D, a: Vec3D, b: Vec3D) {\r\n  // colinear points return NaN, so return 0 instead\r\n  return a.sub(o).angleBetween(b.sub(o), true) || 0\r\n}\r\n\r\n// Get the plane containing the given points\r\nexport function getPlane(points: Vec3D[]) {\r\n  if (points.length < 3) {\r\n    throw new Error(\"Need at least three points for a plane\")\r\n  }\r\n  return new Plane(new Triangle3D(points[0], points[1], points[2]))\r\n}\r\n\r\n// Return whether the set of points lie on a plane\r\nexport function isPlanar(points: Vec3D[]) {\r\n  const plane = getPlane(points)\r\n  return points.every((vec) => plane.getDistanceToPoint(vec) < PRECISION)\r\n}\r\n\r\nexport function getCentroid(vectors: Vec3D[]) {\r\n  return vectors.reduce((v1, v2) => v1.add(v2)).scale(1 / vectors.length)\r\n}\r\n\r\n// Get the normal of a polygon given its ordered vertices\r\nexport function getNormal(vertices: Vec3D[]) {\r\n  const [v0, v1, v2] = vertices\r\n  return v0.sub(v1).cross(v1.sub(v2)).getNormalized()\r\n}\r\n\r\nexport function getNormalRay(vertices: Vec3D[]) {\r\n  return new Ray3D(getCentroid(vertices), getNormal(vertices))\r\n}\r\n\r\nexport type Transform = (v: Vec3D) => Vec3D\r\n\r\nexport function withOrigin(o: Vec3D, t: Transform): Transform {\r\n  return (v) => t(v.sub(o)).add(o)\r\n}\r\n\r\n/**\r\n * Return the rotation matrix based on the orthonormal bases v1, v2, and (v1 x v2)\r\n */\r\nexport function getOrientation(v1: Vec3D, v2: Vec3D) {\r\n  // https://math.stackexchange.com/questions/624348/finding-rotation-axis-and-angle-to-align-two-oriented-vectors\r\n  const v3 = v1.cross(v2)\r\n  // prettier-ignore\r\n  return new Matrix4x4(\r\n    v1.x, v2.x, v3.x, 0,\r\n    v1.y, v2.y, v3.y, 0,\r\n    v1.z, v2.z, v3.z, 0,\r\n    0,    0,    0,    1,\r\n  )\r\n}\r\n\r\n/**\r\n * Return the rotation matrix that transforms the basis (u1, u2, u1 x u2) to (v1, v2, v1 x v2)\r\n */\r\nexport function getOrthonormalTransform(\r\n  u1: Vec3D,\r\n  u2: Vec3D,\r\n  v1: Vec3D,\r\n  v2: Vec3D,\r\n) {\r\n  // https://math.stackexchange.com/questions/624348/finding-rotation-axis-and-angle-to-align-two-oriented-vectors\r\n  const uOrientation = getOrientation(u1, u2)\r\n  const vOrientation = getOrientation(v1, v2)\r\n  return vOrientation.multiply(uOrientation.getTransposed())\r\n}\r\n","export type { VertexArg } from \"./SolidBuilder\"\r\nexport type { VertexList } from \"./Vertex\"\r\nexport { default as Polyhedron } from \"./Polyhedron\"\r\nexport { default as Vertex } from \"./Vertex\"\r\nexport { default as FaceLike } from \"./FaceLike\"\r\nexport { default as Face } from \"./Face\"\r\nexport { default as Edge } from \"./Edge\"\r\nexport { default as Cap } from \"./Cap\"\r\n\r\nexport * from \"./solidTypes\"\r\n\r\nexport { normalizeVertex } from \"./SolidBuilder\"\r\n","import { Vec3D } from \"math/geom\"\r\n\r\nimport {\r\n  PRECISION,\r\n  Plane,\r\n  isPlanar,\r\n  getCentroid,\r\n  getNormal,\r\n  getNormalRay,\r\n} from \"math/geom\"\r\nimport type Polyhedron from \"./Polyhedron\"\r\nimport type Edge from \"./Edge\"\r\nimport type Vertex from \"./Vertex\"\r\nimport type { VertexList } from \"./Vertex\"\r\n\r\n/**\r\n * An abstract polyhedral Face. An entity of a polyhedron that can be treated as a Face:\r\n * something containing vertices, edges and lying on a plane.\r\n * Examples include the boundary of a cupola and a concrete Face.\r\n */\r\nexport default class FaceLike implements VertexList {\r\n  polyhedron: Polyhedron\r\n  vertices: Vertex[]\r\n  edges: Edge[]\r\n  vectors: Vec3D[]\r\n\r\n  constructor(vertices: Vertex[], edges: Edge[]) {\r\n    this.polyhedron = vertices[0].polyhedron\r\n    this.vertices = vertices\r\n    this.edges = edges\r\n    this.vectors = this.vertices.map((v) => v.vec)\r\n  }\r\n\r\n  get numSides() {\r\n    return this.vertices.length\r\n  }\r\n\r\n  adjacentFaces() {\r\n    return this.edges.map((edge) => edge.twin().face)\r\n  }\r\n\r\n  numUniqueSides() {\r\n    return this.edges.filter((edge) => edge.length() > PRECISION).length\r\n  }\r\n\r\n  sideLength() {\r\n    return this.edges[0].length()\r\n  }\r\n\r\n  isPlanar() {\r\n    return isPlanar(this.vectors)\r\n  }\r\n\r\n  plane() {\r\n    return new Plane(this.centroid(), this.normal())\r\n  }\r\n\r\n  apothem() {\r\n    return this.sideLength() / (2 * Math.tan(Math.PI / this.numSides))\r\n  }\r\n\r\n  radius() {\r\n    return this.sideLength() / (2 * Math.sin(Math.PI / this.numSides))\r\n  }\r\n\r\n  /** Get the area of a *regular* polygon */\r\n  area() {\r\n    return (this.numSides * this.sideLength() * this.apothem()) / 2\r\n  }\r\n\r\n  /** Return the centroid of the face given by the face index */\r\n  centroid() {\r\n    return getCentroid(this.vectors)\r\n  }\r\n\r\n  distanceToCenter() {\r\n    const origin = this.polyhedron.centroid()\r\n    return origin.distanceTo(this.centroid())\r\n  }\r\n\r\n  /** Return the normal of the face given by the face index */\r\n  normal() {\r\n    return getNormal(this.vectors)\r\n  }\r\n\r\n  normalRay() {\r\n    return getNormalRay(this.vectors)\r\n  }\r\n\r\n  isValid() {\r\n    return this.edges.every((edge) => edge.length() > PRECISION)\r\n  }\r\n}\r\n","import { angleBetween, getMidpoint } from \"math/geom\"\r\nimport type Polyhedron from \"./Polyhedron\"\r\nimport type Vertex from \"./Vertex\"\r\nimport type { VertexList } from \"./Vertex\"\r\n\r\nexport default class Edge implements VertexList {\r\n  polyhedron: Polyhedron\r\n  v1: Vertex\r\n  v2: Vertex\r\n\r\n  constructor(v1: Vertex, v2: Vertex) {\r\n    this.polyhedron = v1.polyhedron\r\n    this.v1 = v1\r\n    this.v2 = v2\r\n  }\r\n\r\n  get value(): [number, number] {\r\n    return [this.v1.index, this.v2.index]\r\n  }\r\n\r\n  get vertices() {\r\n    return [this.v1, this.v2]\r\n  }\r\n\r\n  get face() {\r\n    return this.polyhedron.edgeToFaceGraph()[this.v1.index][this.v2.index]\r\n  }\r\n\r\n  prev() {\r\n    return this.face.edges.find((e) => e.v2.equals(this.v1))!\r\n  }\r\n\r\n  next() {\r\n    return this.face.edges.find((e) => e.v1.equals(this.v2))!\r\n  }\r\n\r\n  length() {\r\n    return this.v1.vec.distanceTo(this.v2.vec)\r\n  }\r\n\r\n  midpoint() {\r\n    return getMidpoint(this.v1.vec, this.v2.vec)\r\n  }\r\n\r\n  twin() {\r\n    return new Edge(this.v2, this.v1)\r\n  }\r\n\r\n  twinFace() {\r\n    return this.twin().face\r\n  }\r\n\r\n  // Get the \"undirected\" version of this edge, represented by\r\n  // the version where its vertices are ordered by their index\r\n  undirected() {\r\n    return this.v2.index > this.v1.index ? this : this.twin()\r\n  }\r\n\r\n  // Get the faces adjacent to this edge, with the directed face first\r\n  adjacentFaces() {\r\n    return [this.face, this.twin().face]\r\n  }\r\n\r\n  // Distance of this midpoint to polyhedron center\r\n  distanceToCenter() {\r\n    return this.midpoint().distanceTo(this.polyhedron.centroid())\r\n  }\r\n\r\n  dihedralAngle() {\r\n    return angleBetween(\r\n      this.midpoint(),\r\n      this.face.centroid(),\r\n      this.twinFace().centroid(),\r\n    )\r\n  }\r\n\r\n  equals(edge: Edge) {\r\n    return this.v1.equals(edge.v1) && this.v2.equals(edge.v2)\r\n  }\r\n}\r\n","import { findKey, countBy } from \"lodash-es\"\r\nimport { Point } from \"types\"\r\nimport { vec, Vec3D } from \"math/geom\"\r\nimport { VIndex } from \"./solidTypes\"\r\nimport type Polyhedron from \"./Polyhedron\"\r\nimport Edge from \"./Edge\"\r\nimport { splitAt } from \"utils\"\r\n\r\nfunction getCycles<T>(array: T[]) {\r\n  return array.map((val, i) => {\r\n    const [front, back] = splitAt(array, i)\r\n    return [...back, ...front]\r\n  })\r\n}\r\n\r\nfunction arrayMin<T>(a1: T[], a2: T[]): T[] {\r\n  if (a1.length === 0) return a1\r\n  if (a2.length === 0) return a2\r\n  const [h1, ...t1] = a1\r\n  const [h2, ...t2] = a2\r\n  if (h1 < h2) return a1\r\n  if (h2 < h1) return a2\r\n  return [h1, ...arrayMin(t1, t2)]\r\n}\r\n\r\nexport default class Vertex {\r\n  polyhedron: Polyhedron\r\n  index: VIndex\r\n  value: Point\r\n  vec: Vec3D\r\n\r\n  constructor(polyhedron: Polyhedron, index: VIndex) {\r\n    this.polyhedron = polyhedron\r\n    this.index = index\r\n    this.value = polyhedron._solidData.vertices[index]\r\n    this.vec = vec(this.value)\r\n  }\r\n\r\n  equals(other: Vertex) {\r\n    return this.index === other.index\r\n  }\r\n\r\n  inSet(vertices: Vertex[]) {\r\n    return vertices.some((vertex) => this.equals(vertex))\r\n  }\r\n\r\n  private *adjacentEdgesIter() {\r\n    const v2 = parseInt(findKey(this.polyhedron.edgeToFaceGraph()[this.index])!)\r\n    const e0 = new Edge(this, this.polyhedron.vertices[v2])\r\n    let e = e0\r\n    let count = 0\r\n    do {\r\n      count++\r\n      yield e\r\n      e = e.prev().twin()\r\n      if (count > 10) throw new Error(\"we done messed up\")\r\n    } while (!e.equals(e0))\r\n  }\r\n\r\n  adjacentEdges() {\r\n    return [...this.adjacentEdgesIter()]\r\n  }\r\n\r\n  adjacentVertices() {\r\n    return this.adjacentEdges().map((e) => e.v2)\r\n  }\r\n\r\n  adjacentFaces() {\r\n    return this.adjacentEdges().map((e) => e.face)\r\n  }\r\n\r\n  configuration() {\r\n    const config = this.adjacentFaces().map((f) => f.numSides)\r\n    const allConfigs = getCycles(config).concat(\r\n      getCycles([...config].reverse()),\r\n    )\r\n    return allConfigs.reduce(arrayMin)\r\n  }\r\n\r\n  /** Return adjacent faces counted by number of sides */\r\n  adjacentFaceCounts() {\r\n    return countBy(this.adjacentFaces(), \"numSides\")\r\n  }\r\n\r\n  distanceToCenter() {\r\n    return this.vec.distanceTo(this.polyhedron.centroid())\r\n  }\r\n}\r\n\r\nexport interface VertexList {\r\n  readonly vertices: Vertex[]\r\n  // TODO make this a more generic thing?\r\n  readonly polyhedron: Polyhedron\r\n}\r\n","import {\r\n  once,\r\n  set,\r\n  countBy,\r\n  maxBy,\r\n  minBy,\r\n  sortBy,\r\n  sum,\r\n  isEqual,\r\n} from \"lodash-es\"\r\n\r\nimport { getSolidData } from \"data/common\"\r\nimport { polygons } from \"data/polygons\"\r\nimport { Vec3D, getCentroid } from \"math/geom\"\r\n\r\nimport { SolidData } from \"./solidTypes\"\r\nimport Face from \"./Face\"\r\nimport Vertex from \"./Vertex\"\r\nimport Edge from \"./Edge\"\r\nimport Builder from \"./SolidBuilder\"\r\nimport { VertexArg, FaceArg } from \"./SolidBuilder\"\r\n\r\nfunction calculateEdges(faces: Face[]) {\r\n  return faces\r\n    .flatMap((face) => face.edges)\r\n    .filter((e) => e.v1.index < e.v2.index)\r\n}\r\n\r\nexport default class Polyhedron {\r\n  _solidData: SolidData\r\n  name: string\r\n  faces: Face[]\r\n  vertices: Vertex[]\r\n  private _edges?: Edge[]\r\n\r\n  static get(name: string) {\r\n    return new Polyhedron(getSolidData(name))\r\n  }\r\n\r\n  constructor(solidData: SolidData) {\r\n    this._solidData = solidData\r\n    this.vertices = solidData.vertices.map(\r\n      (vertex, vIndex) => new Vertex(this, vIndex),\r\n    )\r\n    this.faces = solidData.faces.map((face, fIndex) => new Face(this, fIndex))\r\n    this.name = solidData.name ?? \"\"\r\n  }\r\n\r\n  get edges() {\r\n    if (!this._edges) {\r\n      this._edges = calculateEdges(this.faces)\r\n    }\r\n    return this._edges\r\n  }\r\n\r\n  get solidData() {\r\n    if (!this._solidData.edges) {\r\n      this._solidData.edges = this.edges.map((e) => e.value)\r\n    }\r\n    return this._solidData\r\n  }\r\n\r\n  toString() {\r\n    return `Polyhedron { V=${this.numVertices()}, E=${this.numEdges()}, F=${this.numFaces()} }`\r\n  }\r\n\r\n  toJSON() {\r\n    return this.solidData\r\n  }\r\n\r\n  // Memoized mapping of edges to faces, used for quickly finding adjacency\r\n  edgeToFaceGraph = once(() => {\r\n    const edgesToFaces: NestedRecord<number, number, Face> = {}\r\n    for (const face of this.faces) {\r\n      for (const { v1, v2 } of face.edges) {\r\n        set(edgesToFaces, [v1.index, v2.index], face)\r\n      }\r\n    }\r\n    return edgesToFaces\r\n  })\r\n\r\n  // Simple properties\r\n  // =================\r\n\r\n  numVertices() {\r\n    return this.vertices.length\r\n  }\r\n\r\n  numFaces() {\r\n    return this.faces.length\r\n  }\r\n\r\n  numEdges() {\r\n    return this.edges.length\r\n  }\r\n\r\n  numFacesBySides() {\r\n    return countBy(this.faces, \"numSides\")\r\n  }\r\n\r\n  // Search functions\r\n  // ================\r\n\r\n  getVertex() {\r\n    return this.vertices[0]\r\n  }\r\n\r\n  getFace() {\r\n    return this.faces[0]\r\n  }\r\n\r\n  getEdge() {\r\n    return this.edges[0]\r\n  }\r\n\r\n  largestFace() {\r\n    return maxBy(this.faces, \"numSides\")!\r\n  }\r\n\r\n  smallestFace() {\r\n    return minBy(this.faces, \"numSides\")!\r\n  }\r\n\r\n  faceWithNumSides(n: number) {\r\n    const face = this.faces.find((f) => f.numSides === n)\r\n    if (!face) throw new Error(`No face of ${n} sides exists`)\r\n    return face\r\n  }\r\n\r\n  // The list of the type of faces this polyhedron has, ordered\r\n  faceTypes() {\r\n    return sortBy(Object.keys(this.numFacesBySides()))\r\n  }\r\n\r\n  vertexConfiguration() {\r\n    return countBy(\r\n      this.vertices.map((v) => v.configuration()),\r\n      (config) => config.join(\".\"),\r\n    )\r\n  }\r\n\r\n  // Geometric properties\r\n  // ====================\r\n\r\n  // Get the edge length of this polyhedron, assuming equal edges\r\n  edgeLength() {\r\n    return this.getFace().sideLength()\r\n  }\r\n\r\n  centroid() {\r\n    return getCentroid(this.vertices.map((v) => v.vec))\r\n  }\r\n\r\n  surfaceArea() {\r\n    return sum(this.faces.map((face) => face.area()))\r\n  }\r\n\r\n  normalizedSurfaceArea() {\r\n    return this.surfaceArea() / this.edgeLength() ** 2\r\n  }\r\n\r\n  volume() {\r\n    return sum(\r\n      this.faces.map((face) => (face.area() * face.distanceToCenter()) / 3),\r\n    )\r\n  }\r\n\r\n  normalizedVolume() {\r\n    return this.volume() / this.edgeLength() ** 3\r\n  }\r\n\r\n  sphericity() {\r\n    const v = this.volume()\r\n    const a = this.surfaceArea()\r\n    return (Math.PI ** (1 / 3) * (6 * v) ** (2 / 3)) / a\r\n  }\r\n\r\n  /** Get the face that is closest to the given point. */\r\n  hitFace(point: Vec3D) {\r\n    return minBy(this.faces, (face) => face.plane().getDistanceToPoint(point))!\r\n  }\r\n\r\n  // Mutations\r\n  // =========\r\n\r\n  withChanges(changes: (b: Builder) => Builder) {\r\n    return changes(new Builder(this)).build()\r\n  }\r\n\r\n  withName(name: string) {\r\n    return new Polyhedron({ ...this.solidData, name })\r\n  }\r\n\r\n  // TODO support all the solid builder functions\r\n  // return a new polyhedron with the given vertices\r\n  withVertices(vertices: VertexArg[]) {\r\n    return this.withChanges((s) => s.withVertices(vertices))\r\n  }\r\n\r\n  withFaces(faces: FaceArg[]) {\r\n    return this.withChanges((s) => s.withFaces(faces))\r\n  }\r\n\r\n  withoutFaces(faces: Face[]) {\r\n    return this.withChanges((s) => s.withoutFaces(faces))\r\n  }\r\n\r\n  addPolyhedron(other: Polyhedron) {\r\n    return this.withChanges((s) => s.addPolyhedron(other))\r\n  }\r\n\r\n  /**\r\n   * Returns the reflection of this polyhedron on an axis\r\n   */\r\n  reflect() {\r\n    return this.withChanges((s) =>\r\n      s\r\n        .mapVertices((v) => new Vec3D(-v.vec.x, v.vec.y, v.vec.z))\r\n        .mapFaces((f) => [...f.vertices.map((v) => v.index)].reverse()),\r\n    )\r\n  }\r\n\r\n  /** Center the polyhedron on its centroid. */\r\n  center() {\r\n    const centroid = this.centroid()\r\n    return this.withVertices(this.vertices.map((v) => v.vec.sub(centroid)))\r\n  }\r\n\r\n  normalizeToVolume(volume: number) {\r\n    const scale = Math.cbrt(volume / this.volume())\r\n    return this.withVertices(this.vertices.map((v) => v.vec.scale(scale)))\r\n  }\r\n\r\n  isDeltahedron() {\r\n    const facesBySides = Object.keys(this.numFacesBySides())\r\n    return facesBySides.length === 1 && +facesBySides[0] === 3\r\n  }\r\n\r\n  faceAdjacencyList() {\r\n    const faceAdjacencyCounts = this.faces.map((face) => ({\r\n      n: face.numSides,\r\n      adj: face.adjacentFaceCounts(),\r\n    }))\r\n    return sortBy(\r\n      faceAdjacencyCounts,\r\n      [\"n\", \"adj.length\"].concat(polygons.map((n) => `adj[${n}]`)),\r\n    )\r\n  }\r\n\r\n  isSame(other: Polyhedron) {\r\n    return isEqual(this.faceAdjacencyList(), other.faceAdjacencyList())\r\n  }\r\n}\r\n","import { countBy } from \"lodash-es\"\r\n\r\nimport { getCyclic, flatMapUniq } from \"utils\"\r\nimport { VIndex, FIndex } from \"./solidTypes\"\r\nimport type Polyhedron from \"./Polyhedron\"\r\nimport FaceLike from \"./FaceLike\"\r\nimport Edge from \"./Edge\"\r\n\r\nexport default class Face extends FaceLike {\r\n  index: FIndex\r\n  value: VIndex[]\r\n\r\n  constructor(polyhedron: Polyhedron, index: FIndex) {\r\n    const value = polyhedron._solidData.faces[index]\r\n    const vertices = value.map((vIndex) => polyhedron.vertices[vIndex])\r\n    const edges = vertices.map(\r\n      (v, i) => new Edge(v, getCyclic(vertices, i + 1)),\r\n    )\r\n\r\n    super(vertices, edges)\r\n    this.index = index\r\n    this.value = value\r\n  }\r\n\r\n  // Return true if this face is the same as the given face (within a polyhedron)\r\n  equals(other: Face) {\r\n    return this.index === other.index\r\n    // return this.polyhedron === other.polyhedron && this.index === other.index;\r\n  }\r\n\r\n  inSet(faces: Face[]) {\r\n    return faces.some((face) => this.equals(face))\r\n  }\r\n\r\n  /** Return the set of faces that share a vertex to this face (including itself) */\r\n  vertexAdjacentFaces() {\r\n    return flatMapUniq(\r\n      this.vertices,\r\n      (vertex) => vertex.adjacentFaces(),\r\n      \"index\",\r\n    )\r\n  }\r\n\r\n  /** Return adjacent faces counted by number of sides */\r\n  adjacentFaceCounts() {\r\n    return countBy(this.adjacentFaces(), \"numSides\")\r\n  }\r\n}\r\n","import { pullAt } from \"lodash-es\"\r\n\r\nimport { Point } from \"types\"\r\nimport { Vec3D } from \"math/geom\"\r\nimport { VIndex, SolidData } from \"./solidTypes\"\r\nimport Vertex from \"./Vertex\"\r\nimport Face from \"./Face\"\r\nimport Polyhedron from \"./Polyhedron\"\r\n\r\nexport type VertexArg = Point | Vec3D | Vertex\r\n\r\nexport type FaceArg = (VIndex | Vertex)[] | Face\r\n\r\nexport function normalizeVertex(v: VertexArg) {\r\n  // If it's a raw point\r\n  if (Array.isArray(v)) return v\r\n  // if it's a vector\r\n  if (v instanceof Vec3D) return v.toArray()\r\n  // If it's a vertex object\r\n  if (v instanceof Vertex) return v.value\r\n  throw new Error(\"Invalid vertex\")\r\n}\r\n\r\nfunction normalizeFace(face: FaceArg) {\r\n  if (Array.isArray(face)) {\r\n    return face.map((v) => {\r\n      if (typeof v === \"number\") return v\r\n      return v.index\r\n    })\r\n  }\r\n  return face.value\r\n}\r\n\r\nexport default class Builder {\r\n  polyhedron: Polyhedron\r\n  solidData: SolidData\r\n\r\n  constructor(polyhedron: Polyhedron) {\r\n    this.polyhedron = polyhedron\r\n    this.solidData = { ...polyhedron.solidData }\r\n  }\r\n\r\n  build() {\r\n    return new Polyhedron(this.solidData)\r\n  }\r\n\r\n  // return a new polyhedron with the given vertices\r\n  withVertices(vertices: VertexArg[]) {\r\n    this.solidData.vertices = vertices.map(normalizeVertex)\r\n    return this\r\n  }\r\n\r\n  // return a new polyhedron with the given faces\r\n  withFaces(faces: FaceArg[]) {\r\n    this.solidData.faces = faces.map(normalizeFace)\r\n    // reset edges, since faces might have changed\r\n    delete this.solidData.edges\r\n    return this\r\n  }\r\n\r\n  addVertices(vertices: Vertex[] | VertexArg[]) {\r\n    return this.withVertices(\r\n      (this.solidData.vertices as VertexArg[]).concat(vertices),\r\n    )\r\n  }\r\n\r\n  addFaces(faces: FaceArg[]) {\r\n    return this.withFaces((this.solidData.faces as FaceArg[]).concat(faces))\r\n  }\r\n\r\n  mapVertices(iteratee: (v: Vertex) => VertexArg) {\r\n    return this.withVertices(this.polyhedron.vertices.map(iteratee))\r\n  }\r\n\r\n  /** Map the faces of the *original* solid to new ones */\r\n  mapFaces(iteratee: (f: Face) => FaceArg) {\r\n    return this.withFaces(this.polyhedron.faces.map(iteratee))\r\n  }\r\n\r\n  withoutFaces(faces: Face[]) {\r\n    const removed = [...this.solidData.faces]\r\n    pullAt(\r\n      removed,\r\n      faces.map((f) => f.index),\r\n    )\r\n    return this.withFaces(removed)\r\n  }\r\n\r\n  addPolyhedron(other: Polyhedron) {\r\n    return this.addVertices(other.vertices).addFaces(\r\n      other.faces.map((face) =>\r\n        face.vertices.map((v) => v.index + this.polyhedron.numVertices()),\r\n      ),\r\n    )\r\n  }\r\n}\r\n","import { minBy, once, countBy, isEqual } from \"lodash-es\"\r\n\r\nimport { flatMapUniq } from \"utils\"\r\nimport { Vec3D } from \"math/geom\"\r\nimport type Polyhedron from \"./Polyhedron\"\r\nimport type Face from \"./Face\"\r\nimport type Vertex from \"./Vertex\"\r\nimport type { VertexList } from \"./Vertex\"\r\nimport type Edge from \"./Edge\"\r\nimport FaceLike from \"./FaceLike\"\r\n\r\ntype CapType = \"pyramid\" | \"cupola\" | \"rotunda\" | \"fastigium\"\r\ntype FaceConfiguration = { [key: string]: number }\r\n\r\n// Find the boundary of a connected set of faces\r\nfunction getBoundary(faces: Face[]) {\r\n  const e0 = faces\r\n    .flatMap((f) => f.edges)\r\n    .find((e) => !e.twin().face.inSet(faces))!\r\n\r\n  const result: Edge[] = []\r\n  let e = e0\r\n  let count = 0\r\n  do {\r\n    if (count++ > 20) throw new Error(\"we done goofed\")\r\n    if (!e.twin().face.inSet(faces)) {\r\n      result.push(e)\r\n      const nextTwin = e.next().twin()\r\n      if (nextTwin.face.inSet(faces)) {\r\n        e = nextTwin.next()\r\n      } else {\r\n        e = e.next()\r\n      }\r\n    } else {\r\n      e = e.twin().next()\r\n    }\r\n  } while (!e.equals(e0))\r\n  return new FaceLike(\r\n    result.map((e) => e.v1),\r\n    result,\r\n  )\r\n}\r\n\r\ninterface Constructor<T> {\r\n  new (polyhedron: Polyhedron, arg: T): Cap\r\n}\r\nfunction createMapper<T>(mapper: (p: Polyhedron) => T[], Base: Constructor<T>) {\r\n  return (polyhedron: Polyhedron) => {\r\n    // const mapper = polyhedron[property]\r\n    const values: T[] = mapper(polyhedron)\r\n    return values\r\n      .map((arg) => new Base(polyhedron, arg))\r\n      .filter((cap) => cap.isValid())\r\n  }\r\n}\r\n\r\nexport default abstract class Cap implements VertexList {\r\n  polyhedron: Polyhedron\r\n  type: string\r\n  private _innerVertices: Vertex[]\r\n  private topPoint: Vec3D\r\n  private faceConfiguration: FaceConfiguration\r\n\r\n  static find(polyhedron: Polyhedron, hitPoint: Vec3D) {\r\n    const hitFace = polyhedron.hitFace(hitPoint)\r\n    const caps = Cap.getAll(polyhedron).filter((cap) =>\r\n      hitFace.inSet(cap.faces()),\r\n    )\r\n    if (caps.length === 0) {\r\n      return null\r\n    }\r\n    return minBy(caps, (cap) => cap.topPoint.distanceTo(hitPoint))\r\n  }\r\n\r\n  static getAll(polyhedron: Polyhedron): Cap[] {\r\n    const pyramids = Pyramid.getAll(polyhedron)\r\n    if (pyramids.length > 0) return pyramids\r\n\r\n    const fastigium = Fastigium.getAll(polyhedron)\r\n    if (fastigium.length > 0) return fastigium\r\n\r\n    const cupolaRotunda = Cupola.getAll(polyhedron).concat(\r\n      Rotunda.getAll(polyhedron),\r\n    )\r\n    if (cupolaRotunda.length > 0) return cupolaRotunda\r\n    return []\r\n  }\r\n\r\n  constructor(\r\n    polyhedron: Polyhedron,\r\n    innerVertices: Vertex[],\r\n    type: CapType,\r\n    topPoint: Vec3D,\r\n    faceConfiguration: FaceConfiguration,\r\n  ) {\r\n    this.polyhedron = polyhedron\r\n    this._innerVertices = innerVertices\r\n    this.type = type\r\n    this.topPoint = topPoint\r\n    this.faceConfiguration = faceConfiguration\r\n  }\r\n\r\n  innerVertices() {\r\n    return this._innerVertices\r\n  }\r\n\r\n  get vertices() {\r\n    return this.allVertices()\r\n  }\r\n\r\n  allVertices = once(() => {\r\n    return this.innerVertices().concat(this.boundary().vertices)\r\n  })\r\n\r\n  faces = once(() => {\r\n    return flatMapUniq(this.innerVertices(), (v) => v.adjacentFaces(), \"index\")\r\n  })\r\n\r\n  boundary = once(() => {\r\n    return getBoundary(this.faces())\r\n  })\r\n\r\n  normal() {\r\n    return this.boundary().normal()\r\n  }\r\n\r\n  normalRay() {\r\n    return this.boundary().normalRay()\r\n  }\r\n\r\n  isValid() {\r\n    const matchFaces = this.innerVertices().every((vertex) => {\r\n      const faceCount = countBy(vertex.adjacentFaces(), \"numSides\")\r\n      return isEqual(faceCount, this.faceConfiguration)\r\n    })\r\n    return (\r\n      matchFaces &&\r\n      this.faces().every((face) => face.isValid()) &&\r\n      this.boundary().isPlanar()\r\n    )\r\n  }\r\n}\r\n\r\nclass Pyramid extends Cap {\r\n  constructor(polyhedron: Polyhedron, vertex: Vertex) {\r\n    super(polyhedron, [vertex], \"pyramid\", vertex.vec, {\r\n      \"3\": vertex.adjacentEdges().length,\r\n    })\r\n  }\r\n  static getAll = createMapper((p) => p.vertices, Pyramid)\r\n}\r\n\r\nclass Fastigium extends Cap {\r\n  constructor(polyhedron: Polyhedron, edge: Edge) {\r\n    const config = { \"3\": 1, \"4\": 2 }\r\n    super(polyhedron, edge.vertices, \"fastigium\", edge.midpoint(), config)\r\n  }\r\n  static getAll = createMapper((p) => p.edges, Fastigium)\r\n}\r\n\r\nclass Cupola extends Cap {\r\n  constructor(polyhedron: Polyhedron, face: Face) {\r\n    super(\r\n      polyhedron,\r\n      face.vertices,\r\n      \"cupola\",\r\n      face.centroid(),\r\n      countBy([3, 4, 4, face.numSides]),\r\n    )\r\n  }\r\n  static getAll = createMapper((p) => p.faces, Cupola)\r\n}\r\n\r\nclass Rotunda extends Cap {\r\n  constructor(polyhedron: Polyhedron, face: Face) {\r\n    super(\r\n      polyhedron,\r\n      flatMapUniq(face.vertices, (v) => v.adjacentVertices(), \"index\"),\r\n      \"rotunda\",\r\n      face.centroid(),\r\n      { \"5\": 2, \"3\": 2 },\r\n    )\r\n  }\r\n  static getAll = createMapper((p) => p.faces, Rotunda)\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/sad-scutoid.7909547f.png\";","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport { useStyle, fonts, scales, media } from \"styles\"\r\nimport { square, link } from \"styles/common\"\r\nimport image from \"images/sad-scutoid.png\"\r\nimport { usePageTitle } from \"components/common\"\r\n\r\nfunction Image() {\r\n  const css = useStyle(square(scales.size[5]))\r\n  return <img {...css()} src={image} alt=\"\" />\r\n}\r\n\r\nfunction Title() {\r\n  const css = useStyle({\r\n    textAlign: \"center\",\r\n    fontFamily: fonts.andaleMono,\r\n    fontSize: scales.font[3],\r\n    [media.mobile]: {\r\n      fontSize: scales.font[4],\r\n    },\r\n  })\r\n  return <h1 {...css()}>Uh oh! We don't know about that polyhedron!</h1>\r\n}\r\n\r\nfunction BackLink() {\r\n  const css = useStyle({\r\n    fontFamily: fonts.andaleMono,\r\n    fontSize: scales.font[4],\r\n    ...link,\r\n  })\r\n  return (\r\n    <Link {...css()} to=\"/\">\r\n      Go back\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default function ErrorPage() {\r\n  usePageTitle(\"Error - Polyhedra Viewer\")\r\n  const css = useStyle({\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n\r\n    display: \"grid\",\r\n    gridGap: scales.spacing[2],\r\n    alignContent: \"center\",\r\n    justifyContent: \"center\",\r\n    justifyItems: \"center\",\r\n  })\r\n\r\n  return (\r\n    <section {...css()}>\r\n      <Image />\r\n      <Title />\r\n      <BackLink />\r\n    </section>\r\n  )\r\n}\r\n","import { Polyhedron } from \"math/polyhedra\"\r\nimport { createHookedContext } from \"components/common\"\r\n\r\nconst defaultProps = { name: \"tetrahedron\" }\r\nexport default createHookedContext<Polyhedron, \"setPolyhedron\">(\r\n  {\r\n    setPolyhedron: (polyhedron) => () => polyhedron,\r\n  },\r\n  (props = defaultProps) => Polyhedron.get(props.name),\r\n)\r\n","import { Operation } from \"math/operations\"\r\nimport { createHookedContext } from \"components/common\"\r\n\r\nconst defaultState = {\r\n  operation: undefined,\r\n  options: undefined,\r\n}\r\n\r\ntype Options = Record<string, any>\r\ninterface State {\r\n  operation?: Operation<Options>\r\n  options?: Options\r\n}\r\n\r\ntype Actions = \"setOperation\" | \"unsetOperation\" | \"setOption\"\r\n\r\nexport default createHookedContext<State, Actions>(\r\n  {\r\n    setOperation: (operation, solid) => () => {\r\n      return { operation, options: operation.defaultOptions(solid) }\r\n    },\r\n    unsetOperation: () => () => {\r\n      return defaultState\r\n    },\r\n    setOption: (name, value) => ({ operation, options }) => {\r\n      return { operation, options: { ...options, [name]: value } }\r\n    },\r\n  },\r\n  defaultState,\r\n)\r\n","import { noop } from \"lodash-es\"\r\n\r\nimport React, { useRef, useEffect, useContext, useCallback } from \"react\"\r\nimport { ChildrenProp } from \"types\"\r\n\r\nimport { createHookedContext } from \"components/common\"\r\nimport Config from \"components/ConfigCtx\"\r\nimport PolyhedronCtx from \"./PolyhedronCtx\"\r\nimport transition from \"transition\"\r\nimport { Polyhedron, SolidData } from \"math/polyhedra\"\r\nimport { AnimationData } from \"math/operations\"\r\n\r\n// Get the colors for each face given our current configuration\r\nfunction getFaceColors(mapping: number[], colors: any) {\r\n  return mapping.map((f) => colors[f])\r\n}\r\n\r\nconst defaultState = {\r\n  solidData: undefined,\r\n  faceColors: undefined,\r\n  isTransitioning: false,\r\n}\r\ninterface State {\r\n  solidData?: SolidData\r\n  faceColors?: any[]\r\n  isTransitioning: boolean\r\n}\r\nconst InterpModel = createHookedContext<State, \"set\" | \"reset\">(\r\n  {\r\n    reset: () => () => defaultState,\r\n    set: (solidData, faceColors) => () => ({\r\n      solidData,\r\n      faceColors,\r\n      isTransitioning: !!solidData,\r\n    }),\r\n  },\r\n  defaultState,\r\n)\r\n\r\nconst TransitionContext = React.createContext(noop)\r\n\r\nfunction InnerProvider({ children }: ChildrenProp) {\r\n  const transitionId = useRef<ReturnType<typeof transition> | null>(null)\r\n  const { setPolyhedron } = PolyhedronCtx.useActions()\r\n  const config = Config.useState()\r\n  const { colors, animationSpeed, enableAnimation } = config\r\n  const anim = InterpModel.useActions()\r\n\r\n  // Cancel the animation if the component we're a part of gets rerendered.\r\n  useEffect(() => {\r\n    return () => {\r\n      if (transitionId.current) {\r\n        transitionId.current.cancel()\r\n      }\r\n    }\r\n  }, [transitionId])\r\n  const transitionFn = useCallback(\r\n    (result: Polyhedron, animationData: AnimationData) => {\r\n      if (!enableAnimation || !animationData) {\r\n        setPolyhedron(result)\r\n        anim.reset()\r\n        return\r\n      }\r\n\r\n      const { start, endVertices, startColors, endColors } = animationData\r\n      anim.set(start.solidData, getFaceColors(startColors, colors))\r\n\r\n      transitionId.current = transition(\r\n        {\r\n          duration: 1000 / animationSpeed,\r\n          ease: \"easeQuadInOut\",\r\n          startValue: {\r\n            vertices: start.solidData.vertices,\r\n            faceColors: getFaceColors(startColors, colors),\r\n          },\r\n          endValue: {\r\n            vertices: endVertices,\r\n            faceColors: getFaceColors(endColors, colors),\r\n          },\r\n          onFinish: () => {\r\n            setPolyhedron(result)\r\n            anim.reset()\r\n          },\r\n        },\r\n        ({ vertices, faceColors }) => {\r\n          anim.set({ ...start.solidData, vertices }, faceColors)\r\n        },\r\n      )\r\n    },\r\n    [anim, animationSpeed, colors, enableAnimation, setPolyhedron],\r\n  )\r\n\r\n  return (\r\n    <TransitionContext.Provider value={transitionFn}>\r\n      {children}\r\n    </TransitionContext.Provider>\r\n  )\r\n}\r\n\r\nfunction Provider({ children }: ChildrenProp) {\r\n  return (\r\n    <InterpModel.Provider>\r\n      <InnerProvider>{children}</InnerProvider>\r\n    </InterpModel.Provider>\r\n  )\r\n}\r\n\r\nfunction useTransition() {\r\n  return useContext(TransitionContext)\r\n}\r\n\r\nexport default {\r\n  Provider,\r\n  useState: InterpModel.useState,\r\n  useTransition,\r\n}\r\n","import * as d3 from \"d3-ease\"\r\nimport { interpolate } from \"d3-interpolate\"\r\n\r\nexport interface TransitionOptions<T> {\r\n  startValue: T\r\n  endValue: T\r\n  duration: number\r\n  ease: keyof typeof d3\r\n  onFinish(): void\r\n}\r\n\r\nexport type Callback<T> = (val: T) => void\r\n\r\n/**\r\n * An animation function based on d3's interpolate.\r\n * @returns an cancel() function\r\n */\r\nexport default function transition<T extends object>(\r\n  options: TransitionOptions<T>,\r\n  updateCallback: Callback<T>,\r\n) {\r\n  const {\r\n    startValue,\r\n    endValue,\r\n    // Duration, in milliseconds\r\n    duration,\r\n    ease,\r\n    onFinish,\r\n  } = options\r\n  let start = 0\r\n  const id: { current?: number } = {}\r\n  // Adapted from:\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\r\n  const interp = interpolate(startValue, endValue)\r\n  const step = (timestamp: number) => {\r\n    if (!start) {\r\n      start = timestamp\r\n    }\r\n    const delta = timestamp - start\r\n    const progress = Math.min(delta / duration, 1)\r\n    const currentValue = interp(d3[ease](progress))\r\n    updateCallback(currentValue)\r\n    if (delta < duration) {\r\n      id.current = requestAnimationFrame(step)\r\n    } else {\r\n      onFinish?.()\r\n    }\r\n  }\r\n  id.current = requestAnimationFrame(step)\r\n  return {\r\n    cancel() {\r\n      cancelAnimationFrame(id.current!)\r\n    },\r\n  }\r\n}\r\n","import { useCallback } from \"react\"\r\nimport { Operation } from \"math/operations\"\r\nimport { Polyhedron } from \"math/polyhedra\"\r\nimport PolyhedronCtx from \"./PolyhedronCtx\"\r\nimport OperationCtx from \"./OperationCtx\"\r\nimport TransitionCtx from \"./TransitionCtx\"\r\n\r\ntype ResultCallback = (polyhedron: Polyhedron) => void\r\n\r\n// TODO figure out stricter typing here\r\ntype Options = any\r\nexport default function useApplyOperation() {\r\n  const { setOperation, unsetOperation } = OperationCtx.useActions()\r\n  const polyhedron = PolyhedronCtx.useState()\r\n  const transition = TransitionCtx.useTransition()\r\n\r\n  const applyOperation = useCallback(\r\n    (\r\n      operation: Operation<Options>,\r\n      options: Options = {},\r\n      callback?: ResultCallback,\r\n    ) => {\r\n      if (!operation) throw new Error(\"no operation defined\")\r\n\r\n      const { result, animationData } = operation.apply(polyhedron, options)\r\n      // If the current operation has options and the result has options,\r\n      // keep the options set\r\n      if (\r\n        operation.hasOptions(polyhedron) &&\r\n        operation.canApplyTo(result) &&\r\n        operation.hasOptions(result)\r\n      ) {\r\n        setOperation(operation, result)\r\n      } else {\r\n        unsetOperation()\r\n      }\r\n\r\n      transition(result, animationData)\r\n      callback?.(result)\r\n    },\r\n    [polyhedron, transition, setOperation, unsetOperation],\r\n  )\r\n\r\n  return applyOperation\r\n}\r\n","import { takeRight, dropRight, invert, isEmpty, uniq } from \"lodash-es\"\r\nimport {\r\n  Cap,\r\n  Polyhedron,\r\n  Edge,\r\n  Vertex,\r\n  VertexList,\r\n  VertexArg,\r\n} from \"math/polyhedra\"\r\nimport { Vec3D, Transform, PRECISION } from \"math/geom\"\r\nimport { mapObject } from \"utils\"\r\nimport PolyhedronSpecs from \"data/specs/PolyhedronSpecs\"\r\nimport { Facet } from \"data/specs/Classical\"\r\nimport { Twist } from \"types\"\r\nimport { getAllSpecs } from \"data/specs/getSpecs\"\r\n\r\nexport interface FacetOpts {\r\n  facet?: Facet\r\n}\r\n\r\nexport interface TwistOpts {\r\n  twist?: Twist\r\n}\r\n\r\nexport function getOppTwist(twist: Twist) {\r\n  return twist === \"left\" ? \"right\" : \"left\"\r\n}\r\n\r\n/**\r\n * Get the face opposite of the given edge, using the given \"twist\" option\r\n */\r\nexport function oppositeFace(edge: Edge, twist?: Twist) {\r\n  switch (twist) {\r\n    case \"left\":\r\n      return edge.twin().next().twin().prev().twinFace()\r\n    case \"right\":\r\n      return edge.twin().prev().twin().next().twinFace()\r\n    default:\r\n      // If no twist is provided, assume a square\r\n      return edge.twin().next().next().twinFace()\r\n  }\r\n}\r\n\r\n/**\r\n * Get the chirality of the snub polyhedron\r\n */\r\nexport function snubChirality(geom: Polyhedron) {\r\n  // Special case for icosahedron\r\n  if (geom.largestFace().numSides === 3) {\r\n    return \"left\"\r\n  }\r\n  const face = geom.faces.find((f) => f.numSides !== 3)!\r\n  const other = oppositeFace(face.edges[0], \"right\")\r\n  return other.numSides !== 3 ? \"right\" : \"left\"\r\n}\r\n\r\n/**\r\n * Get the chirality of the gyroelongated bicupola/rotunda\r\n */\r\nexport function capstoneChirality(geom: Polyhedron) {\r\n  const [cap1, cap2] = Cap.getAll(geom)\r\n  const boundary = cap1.boundary()\r\n  const isCupolaRotunda = cap1.type !== cap2.type\r\n\r\n  const nonTriangleFaceEdge = boundary.edges.find((e) => e.face.numSides !== 3)!\r\n  const rightFaceAcross = oppositeFace(nonTriangleFaceEdge, \"right\")\r\n  // I'm pretty sure this is the same logic as in augment\r\n  if (isCupolaRotunda) {\r\n    return rightFaceAcross.numSides !== 3 ? \"right\" : \"left\"\r\n  }\r\n  return rightFaceAcross.numSides !== 3 ? \"left\" : \"right\"\r\n}\r\n\r\n/**\r\n * Return all matching specs for the Polyhedron, with the right chiralities.\r\n */\r\nexport function* getValidSpecs(geom: Polyhedron): Generator<PolyhedronSpecs> {\r\n  for (const specs of getAllSpecs(geom.name)) {\r\n    if (!specs.isChiral()) {\r\n      yield specs\r\n    } else if (specs.isClassical()) {\r\n      yield specs.withData({ twist: snubChirality(geom) })\r\n    } else if (specs.isCapstone()) {\r\n      yield specs.withData({ twist: capstoneChirality(geom) })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Return the Polyhedron geometry matching the given specs\r\n */\r\nexport function getGeometry(specs: PolyhedronSpecs) {\r\n  const geom = Polyhedron.get(specs.canonicalName())\r\n  // The reference models are always right-handed,\r\n  // so flip 'em if not\r\n  // TODO don't rely on this and make it more general\r\n  if (specs.isClassical() && specs.isSnub() && specs.data.twist === \"left\") {\r\n    return geom.reflect()\r\n  }\r\n\r\n  if (specs.isCapstone() && specs.isChiral()) {\r\n    if (specs.isCupolaRotunda() && specs.data.twist === \"left\") {\r\n      return geom.reflect()\r\n    } else if (!specs.isCupolaRotunda() && specs.data.twist === \"right\") {\r\n      return geom.reflect()\r\n    }\r\n  }\r\n  return geom\r\n}\r\n\r\n/**\r\n * Remove vertices in the polyhedron that aren't connected to any faces,\r\n * and remap the faces to the smaller indices\r\n */\r\nexport function removeExtraneousVertices(polyhedron: Polyhedron) {\r\n  // Vertex indices to remove\r\n  const vertsInFaces = polyhedron.faces.flatMap((f) => f.vertices)\r\n  const toRemove = polyhedron.vertices.filter((v) => !v.inSet(vertsInFaces))\r\n  const numToRemove = toRemove.length\r\n\r\n  // Map the `numToRemove` last vertices of the polyhedron (that don't overlap)\r\n  // to the first few removed vertices\r\n  const notToRemove = takeRight(polyhedron.vertices, numToRemove).filter(\r\n    (v) => !v.inSet(toRemove),\r\n  )\r\n  const newToOld = mapObject(notToRemove, (v, i) => [\r\n    v.index,\r\n    toRemove[i].index,\r\n  ])\r\n  const oldToNew = invert(newToOld)\r\n\r\n  const newVertices = dropRight(\r\n    polyhedron.vertices.map(\r\n      (v) => polyhedron.vertices[(oldToNew[v.index] as any) ?? v.index],\r\n    ),\r\n    numToRemove,\r\n  )\r\n\r\n  return polyhedron.withChanges((solid) =>\r\n    solid\r\n      .withVertices(newVertices)\r\n      .mapFaces((face) =>\r\n        face.vertices.map((v) => newToOld[v.index] ?? v.index),\r\n      ),\r\n  )\r\n}\r\n\r\n/** Remove vertices (and faces) from the polyhedron when they are all the same */\r\nexport function deduplicateVertices(polyhedron: Polyhedron) {\r\n  // group vertex indices by same\r\n  const unique: Vertex[] = []\r\n  const oldToNew: Record<number, number> = {}\r\n\r\n  polyhedron.vertices.forEach((v, vIndex) => {\r\n    const match = unique.find((point) =>\r\n      v.vec.equalsWithTolerance(point.vec, PRECISION),\r\n    )\r\n    if (match === undefined) {\r\n      unique.push(v)\r\n      oldToNew[vIndex] = vIndex\r\n    } else {\r\n      oldToNew[vIndex] = match.index\r\n    }\r\n  })\r\n\r\n  if (isEmpty(oldToNew)) return polyhedron\r\n\r\n  // replace vertices that are the same\r\n  const newFaces = polyhedron.faces\r\n    .map((face) => uniq(face.vertices.map((v) => oldToNew[v.index])))\r\n    .filter((vIndices) => vIndices.length >= 3)\r\n\r\n  // remove extraneous vertices\r\n  return removeExtraneousVertices(polyhedron.withFaces(newFaces))\r\n}\r\n\r\n/**\r\n * Apply a transformation per vertex list. This function allows transformations like\r\n * \"blow up these faces away from a center point\" or \"expand these faces out radially\".\r\n *\r\n * @param vLists The list of `VertexList`s to apply transformations to\r\n * @param iteratee the function to apply on each `VertexList` to generate a transform.\r\n * The function can either return a transform or a single vector value.\r\n * @param vertices The list of vertices to transform and return.\r\n * This defaults to the vertices of the polyhedron attached to the first `VertexList`.\r\n */\r\nexport function getTransformedVertices<T extends VertexList>(\r\n  vLists: T[],\r\n  iteratee: (key: T) => Transform | Vec3D,\r\n  vertices: Vertex[] = vLists[0].polyhedron.vertices,\r\n) {\r\n  const result: VertexArg[] = [...vertices]\r\n  for (const vList of vLists) {\r\n    for (const v of vList.vertices) {\r\n      const t = iteratee(vList)\r\n      result[v.index] = typeof t === \"function\" ? t(v.vec) : t\r\n    }\r\n  }\r\n  return result\r\n}\r\n","import { isMatch } from \"lodash-es\"\r\nimport PolyhedronSpecs from \"data/specs/PolyhedronSpecs\"\r\nimport { Polyhedron, VertexArg } from \"math/polyhedra\"\r\nimport { Plane, Vec3D, getOrthonormalTransform, withOrigin } from \"math/geom\"\r\nimport { OpArgs, SolidArgs } from \"./Operation\"\r\nimport { getGeometry } from \"./operationUtils\"\r\n\r\nexport type Side = \"left\" | \"right\"\r\n\r\nfunction oppositeSide(side: Side) {\r\n  return side === \"left\" ? \"right\" : \"left\"\r\n}\r\n\r\ninterface GraphOpts<L, R> {\r\n  left: L\r\n  right: R\r\n}\r\n\r\n// TODO ugh this is still ugly\r\ninterface GraphEntry<Specs, L, R> {\r\n  left: Specs\r\n  right: Specs\r\n  options?: GraphOpts<L, R>\r\n}\r\n\r\n// list of polyhedron pairs and their arguments\r\ntype OpPairGraph<Specs, L, R> = GraphEntry<Specs, L, R>[]\r\n\r\ntype Orientation = readonly [Vec3D, Vec3D]\r\n\r\nexport interface Pose {\r\n  scale: number\r\n  origin: Vec3D\r\n  orientation: Orientation\r\n}\r\n\r\ntype MiddleGetter<Specs extends PolyhedronSpecs, L, R> = (\r\n  entry: GraphEntry<Specs, L, R>,\r\n) => Specs | SolidArgs<Specs>\r\n\r\ninterface OpPairInput<Specs extends PolyhedronSpecs, L = {}, R = L> {\r\n  // The graph of what polyhedron spec inputs are allowed and what maps to each other\r\n  graph: OpPairGraph<Specs, L, R>\r\n  // Get the intermediate polyhedron for the given graph entry\r\n  middle: Side | MiddleGetter<Specs, L, R>\r\n  // Get the post of a left, right, or middle state\r\n  getPose(\r\n    pos: Side | \"middle\",\r\n    solid: SolidArgs<Specs>,\r\n    opts: GraphOpts<L, R>,\r\n  ): Pose\r\n  // Move the intermediate figure to the left position\r\n  toLeft?(\r\n    solid: SolidArgs<Specs>,\r\n    opts: GraphOpts<L, R>,\r\n    result: Specs,\r\n  ): VertexArg[]\r\n  // Move the intermediate figure to the right position\r\n  toRight?(\r\n    solid: SolidArgs<Specs>,\r\n    opts: GraphOpts<L, R>,\r\n    result: Specs,\r\n  ): VertexArg[]\r\n}\r\n\r\nfunction normalizeIntermediate<Specs extends PolyhedronSpecs>(\r\n  inter: Specs | SolidArgs<Specs>,\r\n) {\r\n  if (inter instanceof PolyhedronSpecs) {\r\n    return { specs: inter, geom: getGeometry(inter) }\r\n  }\r\n  return inter\r\n}\r\n\r\nfunction normalizeOrientation([u1, u2]: Orientation) {\r\n  const _u2 = new Plane(Vec3D.ZERO, u1).getProjectedPoint(u2)\r\n  return [u1.getNormalized(), _u2.getNormalized()]\r\n}\r\n\r\n// Translate, rotate, and scale the polyhedron with the transformation given by the two poses\r\nfunction alignPolyhedron(solid: Polyhedron, pose1: Pose, pose2: Pose) {\r\n  const [u1, u2] = normalizeOrientation(pose1.orientation)\r\n  const [v1, v2] = normalizeOrientation(pose2.orientation)\r\n  const matrix = getOrthonormalTransform(u1, u2, v1, v2)\r\n  const rotate = withOrigin(pose2.origin, (u) => matrix.applyTo(u))\r\n  const newVertices = solid.vertices.map((v) =>\r\n    rotate(\r\n      v.vec\r\n        .sub(pose1.origin)\r\n        .scale(pose2.scale / pose1.scale)\r\n        .add(pose2.origin),\r\n    ),\r\n  )\r\n  return solid.withVertices(newVertices)\r\n}\r\n\r\nfunction defaultGetter<Specs extends PolyhedronSpecs>({\r\n  geom,\r\n}: SolidArgs<Specs>) {\r\n  return geom.vertices\r\n}\r\n\r\ntype Opts<S extends Side, L, R> = S extends \"left\" ? L : R\r\n\r\nclass OpPair<\r\n  Specs extends PolyhedronSpecs,\r\n  L extends {} = {},\r\n  R extends {} = L\r\n> {\r\n  inputs: OpPairInput<Specs, L, R>\r\n  constructor(inputs: OpPairInput<Specs, L, R>) {\r\n    this.inputs = inputs\r\n  }\r\n\r\n  private getEntries(side: Side, specs: Specs) {\r\n    return this.inputs.graph.filter((entry) => entry[side].equals(specs))\r\n  }\r\n\r\n  findEntry<S extends Side>(side: S, specs: Specs, opts?: Opts<S, L, R>) {\r\n    return this.inputs.graph.find(\r\n      (entry) =>\r\n        entry[side].equals(specs) &&\r\n        isMatch(entry.options?.[side] ?? {}, opts ?? {}),\r\n    )\r\n  }\r\n\r\n  getEntry<S extends Side>(side: S, specs: Specs, opts?: Opts<S, L, R>) {\r\n    const entry = this.findEntry(side, specs, opts)\r\n    if (!entry)\r\n      throw new Error(\r\n        `Could not find ${side} entry with specs: ${specs.name()}, opts: ${JSON.stringify(\r\n          opts,\r\n        )}`,\r\n      )\r\n    return entry\r\n  }\r\n\r\n  hasOptions(side: Side, specs: Specs) {\r\n    return this.getEntries(side, specs).length > 1\r\n  }\r\n\r\n  *allOptions<S extends Side>(side: S, specs: Specs): Generator<Opts<S, L, R>> {\r\n    for (const entry of this.getEntries(side, specs)) {\r\n      yield (entry.options?.[side] ?? {}) as Opts<S, L, R>\r\n    }\r\n  }\r\n\r\n  canApplyTo(side: Side, specs: PolyhedronSpecs) {\r\n    return !!this.findEntry(side, specs as Specs)\r\n  }\r\n\r\n  getOpposite<S extends Side>(side: S, specs: Specs, options?: Opts<S, L, R>) {\r\n    return this.getEntry(side, specs, options)[oppositeSide(side)]\r\n  }\r\n\r\n  apply<S extends Side>(side: S, solid: SolidArgs<Specs>, opts: Opts<S, L, R>) {\r\n    const {\r\n      middle: getMiddle,\r\n      getPose,\r\n      toLeft = defaultGetter,\r\n      toRight = defaultGetter,\r\n    } = this.inputs\r\n    const entry = this.getEntry(side, solid.specs, opts)\r\n    const options =\r\n      entry.options ?? ({ left: {}, right: {} } as GraphOpts<L, R>)\r\n    const startPose = getPose(side, solid, options)\r\n\r\n    const endSide = oppositeSide(side)\r\n    const endSpecs = entry[endSide]\r\n    const endGeom = getGeometry(endSpecs)\r\n    const alignedEnd = alignPolyhedron(\r\n      endGeom,\r\n      getPose(endSide, { specs: endSpecs, geom: endGeom }, options),\r\n      startPose,\r\n    )\r\n\r\n    let middle\r\n    if (typeof getMiddle === \"string\") {\r\n      // If we receive a Side argument, set the middle to whichever end polyhedron\r\n      // matches the side\r\n      middle =\r\n        getMiddle === side ? solid : { specs: endSpecs, geom: alignedEnd }\r\n    } else {\r\n      // Otherwise, we have to fetch the intermediate solid ourselves\r\n      const middleSolid = normalizeIntermediate(getMiddle(entry))\r\n      const alignedInter = alignPolyhedron(\r\n        middleSolid.geom,\r\n        getPose(\"middle\", middleSolid, options),\r\n        startPose,\r\n      )\r\n      middle = { ...middleSolid, geom: alignedInter }\r\n    }\r\n\r\n    const [startFn, endFn] =\r\n      side === \"left\" ? [toLeft, toRight] : [toRight, toLeft]\r\n\r\n    return {\r\n      animationData: {\r\n        start: middle.geom.withVertices(startFn(middle, options, solid.specs)),\r\n        endVertices: endFn(middle, options, endSpecs),\r\n      },\r\n      result: alignedEnd,\r\n    }\r\n  }\r\n}\r\n\r\ntype OpInput<O, S extends PolyhedronSpecs> = Required<\r\n  Pick<\r\n    OpArgs<O, S>,\r\n    \"apply\" | \"canApplyTo\" | \"allOptionCombos\" | \"getResult\" | \"hasOptions\"\r\n  >\r\n>\r\n\r\n/**\r\n * Turn an operation pair into the one-way operation corresponding to the given side\r\n */\r\nfunction makeOperation<S extends Side, Sp extends PolyhedronSpecs, L, R>(\r\n  side: S,\r\n  op: OpPair<Sp, L, R>,\r\n): OpInput<Opts<S, L, R>, Sp> {\r\n  return {\r\n    apply(solid, opts) {\r\n      return op.apply(side, solid, opts)\r\n    },\r\n    canApplyTo(specs) {\r\n      return op.canApplyTo(side, specs)\r\n    },\r\n    getResult(solid, opts) {\r\n      return op.getOpposite(side, solid.specs, opts)\r\n    },\r\n    hasOptions(specs) {\r\n      return op.hasOptions(side, specs)\r\n    },\r\n    *allOptionCombos({ specs }) {\r\n      yield* op.allOptions(side, specs)\r\n    },\r\n  }\r\n}\r\n\r\n/**\r\n * Takes the given input and creates a pair of inverse operations.\r\n */\r\nexport function makeOpPair<Specs extends PolyhedronSpecs, L = {}, R = L>(\r\n  opInput: OpPairInput<Specs, L, R>,\r\n) {\r\n  const op = new OpPair(opInput)\r\n  return { left: makeOperation(\"left\", op), right: makeOperation(\"right\", op) }\r\n}\r\n\r\nexport function combineOps<S extends PolyhedronSpecs, O>(\r\n  opArgs: OpInput<O, S>[],\r\n): OpInput<O, S> {\r\n  function canApplyTo(specs: S) {\r\n    return opArgs.some((op) => op.canApplyTo(specs))\r\n  }\r\n\r\n  function getOp(specs: S) {\r\n    const entry = opArgs.find((op) => op.canApplyTo(specs))\r\n    if (!entry) {\r\n      throw new Error(`Could not apply any operations to ${specs.name}`)\r\n    }\r\n    return entry\r\n  }\r\n\r\n  return {\r\n    canApplyTo,\r\n    apply(solid, opts) {\r\n      return getOp(solid.specs).apply(solid, opts)\r\n    },\r\n    getResult(solid, opts) {\r\n      return getOp(solid.specs).getResult(solid, opts)\r\n    },\r\n    hasOptions(specs) {\r\n      return getOp(specs).hasOptions(specs) ?? false\r\n    },\r\n    *allOptionCombos(solid) {\r\n      yield* getOp(solid.specs).allOptionCombos(solid)\r\n    },\r\n  }\r\n}\r\n","import { mapValues } from \"lodash-es\"\r\n\r\nimport { Polygon } from \"data/polygons\"\r\nimport { Vec3D, vec, PRECISION } from \"math/geom\"\r\nimport { Polyhedron, Face, VertexArg, normalizeVertex } from \"math/polyhedra\"\r\nimport { deduplicateVertices, getValidSpecs } from \"./operationUtils\"\r\nimport { Point } from \"types\"\r\nimport PolyhedronSpecs from \"data/specs/PolyhedronSpecs\"\r\n\r\ntype SelectState = \"selected\" | \"selectable\" | undefined\r\n\r\nexport interface AnimationData {\r\n  start: Polyhedron\r\n  endVertices: Point[]\r\n  startColors: Polygon[]\r\n  endColors: Polygon[]\r\n}\r\n\r\nexport interface OpResult {\r\n  result: Polyhedron\r\n  animationData: AnimationData\r\n}\r\n\r\ninterface PartialOpResult {\r\n  result?: Polyhedron\r\n  animationData: {\r\n    start: Polyhedron\r\n    endVertices: VertexArg[]\r\n  }\r\n}\r\n\r\nexport interface SolidArgs<Specs extends PolyhedronSpecs> {\r\n  specs: Specs\r\n  geom: Polyhedron\r\n}\r\n\r\nexport interface OpArgs<Options extends {}, Specs extends PolyhedronSpecs> {\r\n  canApplyTo(info: PolyhedronSpecs): boolean\r\n\r\n  hasOptions?(info: Specs): boolean\r\n\r\n  isPreferredSpec?(info: Specs, options: Options): boolean\r\n\r\n  apply(solid: SolidArgs<Specs>, options: Options): PartialOpResult\r\n\r\n  allOptions?(\r\n    solid: SolidArgs<Specs>,\r\n    optionName: keyof Options,\r\n  ): Options[typeof optionName][]\r\n\r\n  allOptionCombos?(solid: SolidArgs<Specs>): Generator<Options>\r\n\r\n  getResult(solid: SolidArgs<Specs>, options: Options): PolyhedronSpecs\r\n\r\n  hitOption?: keyof Options\r\n\r\n  getHitOption?(\r\n    solid: SolidArgs<Specs>,\r\n    hitPnt: Vec3D,\r\n    options: Partial<Options>,\r\n  ): Partial<Options>\r\n\r\n  defaultOptions?(info: Specs): Partial<Options>\r\n\r\n  faceSelectionStates?(solid: SolidArgs<Specs>, options: Options): SelectState[]\r\n}\r\n\r\ntype OperationArg = keyof OpArgs<any, any>\r\nconst methodDefaults = {\r\n  getHitOption: {},\r\n  hasOptions: false,\r\n  allOptionCombos: [null],\r\n  isPreferredSpec: true,\r\n  faceSelectionStates: [],\r\n  defaultOptions: {},\r\n}\r\n\r\n// TODO get this to return the correct type\r\nfunction fillDefaults<Options extends {}, Specs extends PolyhedronSpecs>(\r\n  op: OpArgs<Options, Specs>,\r\n): Required<OpArgs<Options, Specs>> {\r\n  return {\r\n    ...mapValues(\r\n      methodDefaults,\r\n      (fnDefault, fn: OperationArg) => op[fn] ?? (() => fnDefault),\r\n    ),\r\n    ...op,\r\n  } as Required<OpArgs<Options, Specs>>\r\n}\r\n\r\nfunction getCoplanarFaces(polyhedron: Polyhedron) {\r\n  const found: Face[] = []\r\n  const pairs: [Face, Face][] = []\r\n  polyhedron.faces.forEach((f1) => {\r\n    if (f1.inSet(found) || !f1.isValid()) return\r\n\r\n    f1.adjacentFaces().forEach((f2) => {\r\n      if (!f2 || !f2.isValid()) return\r\n      if (f1.normal().equalsWithTolerance(f2.normal(), PRECISION)) {\r\n        pairs.push([f1, f2])\r\n        found.push(f1)\r\n        found.push(f2)\r\n        return\r\n      }\r\n    })\r\n  })\r\n  return pairs\r\n}\r\n\r\nfunction getFaceColors(polyhedron: Polyhedron): Polygon[] {\r\n  const pairs = getCoplanarFaces(polyhedron)\r\n  const mapping: Record<number, Polygon> = {}\r\n  for (const [f1, f2] of pairs) {\r\n    const numSides = (f1.numSides + f2.numSides - 2) as Polygon\r\n    mapping[f1.index] = numSides\r\n    mapping[f2.index] = numSides\r\n  }\r\n\r\n  return polyhedron.faces.map(\r\n    (face) => mapping[face.index] ?? face.numUniqueSides(),\r\n  )\r\n}\r\n\r\nfunction arrayDefaults<T>(first: T[], second: T[]) {\r\n  return first.map((item, i) => item ?? second[i])\r\n}\r\n\r\nfunction normalizeOpResult(\r\n  opResult: PartialOpResult,\r\n  newName: string,\r\n): OpResult {\r\n  const { result, animationData } = opResult\r\n  const { start, endVertices } = animationData\r\n\r\n  const end = start.withVertices(endVertices)\r\n  const normedResult = result ?? deduplicateVertices(end)\r\n\r\n  // Populate the how the faces in the start and end vertices should be colored\r\n  const startColors = getFaceColors(start)\r\n  const endColors = getFaceColors(end)\r\n\r\n  return {\r\n    result: normedResult.withName(newName),\r\n    animationData: {\r\n      start,\r\n      endVertices: endVertices.map(normalizeVertex),\r\n      startColors: arrayDefaults(startColors, endColors),\r\n      endColors: arrayDefaults(endColors, startColors),\r\n    },\r\n  }\r\n}\r\n\r\nexport default class Operation<Options extends {} = {}> {\r\n  name: string\r\n  hitOption: keyof Options\r\n  private opArgs: Required<OpArgs<Options, PolyhedronSpecs>>\r\n\r\n  constructor(name: string, opArgs: OpArgs<Options, PolyhedronSpecs>) {\r\n    this.name = name\r\n    this.opArgs = fillDefaults(opArgs)\r\n    this.hitOption = this.opArgs.hitOption\r\n  }\r\n\r\n  private *validSpecs(polyhedron: Polyhedron) {\r\n    for (const specs of getValidSpecs(polyhedron)) {\r\n      if (this.opArgs.canApplyTo(specs)) {\r\n        yield specs\r\n      }\r\n    }\r\n  }\r\n\r\n  private getValidSpecs(polyhedron: Polyhedron) {\r\n    return [...this.validSpecs(polyhedron)]\r\n  }\r\n\r\n  private getSolidArgs(polyhedron: Polyhedron) {\r\n    // TODO think of situations where just using the first entry won't work\r\n    return { specs: this.getValidSpecs(polyhedron)[0], geom: polyhedron }\r\n  }\r\n\r\n  apply(geom: Polyhedron, options: Options) {\r\n    const specs = this.getValidSpecs(geom).find((info) =>\r\n      this.opArgs.isPreferredSpec(info, options),\r\n    )\r\n    if (!specs) {\r\n      throw new Error(`Could not find specs for polyhedron ${geom.name}`)\r\n    }\r\n    const solid = { specs, geom }\r\n\r\n    // get the next polyhedron name\r\n    const next = this.opArgs.getResult!(solid, options ?? {}).canonicalName()\r\n\r\n    // Get the actual operation result\r\n    const opResult = this.opArgs.apply(solid, options ?? {})\r\n    return normalizeOpResult(opResult, next)\r\n  }\r\n\r\n  getHitOption(geom: Polyhedron, hitPnt: Point, options: Options) {\r\n    const { getHitOption } = this.opArgs\r\n    return getHitOption(this.getSolidArgs(geom), vec(hitPnt), options)\r\n  }\r\n\r\n  canApplyTo(polyhedron: Polyhedron) {\r\n    return this.getValidSpecs(polyhedron).length > 0\r\n  }\r\n\r\n  hasOptions(polyhedron: Polyhedron) {\r\n    return this.getValidSpecs(polyhedron).some(this.opArgs.hasOptions!)\r\n  }\r\n\r\n  allOptions(polyhedron: Polyhedron, optionName: keyof Options) {\r\n    return this.opArgs.allOptions(this.getSolidArgs(polyhedron), optionName)\r\n  }\r\n\r\n  *allOptionCombos(geom: Polyhedron) {\r\n    for (const specs of this.getValidSpecs(geom)) {\r\n      yield* this.opArgs.allOptionCombos({ specs, geom })\r\n    }\r\n  }\r\n\r\n  defaultOptions(polyhedron: Polyhedron) {\r\n    return this.opArgs.defaultOptions(this.getValidSpecs(polyhedron)[0])\r\n  }\r\n\r\n  faceSelectionStates(geom: Polyhedron, options: Options) {\r\n    return this.opArgs.faceSelectionStates(this.getSolidArgs(geom), options)\r\n  }\r\n}\r\n\r\nexport function makeOperation<\r\n  Options extends {} = {},\r\n  Specs extends PolyhedronSpecs = PolyhedronSpecs\r\n>(name: string, opArgs: OpArgs<Options, Specs>) {\r\n  return new Operation(name, opArgs)\r\n}\r\n","import { minBy } from \"lodash-es\"\r\nimport { Twist } from \"types\"\r\nimport { mapObject } from \"utils\"\r\nimport Classical, { Facet, Family } from \"data/specs/Classical\"\r\nimport { makeOpPair, combineOps, Pose } from \"./operationPairs\"\r\nimport { angleBetween, getPlane, withOrigin, Vec3D } from \"math/geom\"\r\nimport { Polyhedron, Face, Edge } from \"math/polyhedra\"\r\nimport {\r\n  getOppTwist,\r\n  oppositeFace,\r\n  getTransformedVertices,\r\n  FacetOpts,\r\n  TwistOpts,\r\n  getGeometry,\r\n} from \"./operationUtils\"\r\nimport Operation, { makeOperation } from \"./Operation\"\r\n\r\nfunction getSnubTetrahedronFaces(polyhedron: Polyhedron) {\r\n  const f0 = polyhedron.faceWithNumSides(3)\r\n  return [f0, ...f0.edges.map((e) => oppositeFace(e, \"right\"))]\r\n}\r\n\r\nfunction getCantellatedTetrahedronFaces(polyhedron: Polyhedron, odd?: boolean) {\r\n  let f0 = polyhedron.faceWithNumSides(3)\r\n  if (odd) {\r\n    f0 = f0.edges[0].twin().next().twinFace()\r\n  }\r\n  return [f0, ...f0.edges.map((e) => oppositeFace(e))]\r\n}\r\n\r\nfunction getBevelledTetrahedronFaces(polyhedron: Polyhedron) {\r\n  const f0 = polyhedron.faceWithNumSides(6)\r\n  const rest = f0.edges\r\n    .filter((e) => e.twinFace().numSides === 4)\r\n    .map((e) => oppositeFace(e))\r\n  return [f0, ...rest]\r\n}\r\n\r\nfunction getSnubFaces(specs: Classical, polyhedron: Polyhedron, facet?: Facet) {\r\n  if (specs.isTetrahedral()) {\r\n    return getSnubTetrahedronFaces(polyhedron)\r\n  }\r\n  return polyhedron.faces.filter((face) =>\r\n    isSnubFace(face, getFaceType(specs, facet)),\r\n  )\r\n}\r\n\r\nfunction getBevelledFaces(specs: Classical, geom: Polyhedron, facet: Facet) {\r\n  if (specs.isTetrahedral()) {\r\n    return getBevelledTetrahedronFaces(geom)\r\n  }\r\n  return geom.faces.filter((f) => f.numSides === 2 * getFaceType(specs, facet))\r\n}\r\n\r\nfunction getCantellatedFaces(\r\n  specs: Classical,\r\n  geom: Polyhedron,\r\n  facet?: Facet,\r\n  odd?: boolean,\r\n) {\r\n  if (specs.isTetrahedral()) {\r\n    return getCantellatedTetrahedronFaces(geom, odd)\r\n  }\r\n  return geom.faces.filter((face) =>\r\n    isCantellatedFace(face, getFaceType(specs, facet)),\r\n  )\r\n}\r\n\r\n/**\r\n * Return the expanded vertices of the polyhedron resized to the given distance-from-center\r\n * and rotated by the given angle\r\n *\r\n * @param faces the faces to transform\r\n * @param distance the normalized distance from center to put those faces\r\n * @param angle the angle to twist the faces by\r\n */\r\nfunction getResizedVertices(\r\n  faces: Face[],\r\n  distance: number,\r\n  angle: number = 0,\r\n) {\r\n  const resizedLength = faces[0].sideLength() * distance\r\n  const f0 = faces[0]\r\n  const scale = resizedLength - f0.distanceToCenter()\r\n  return getTransformedVertices(faces, (f) =>\r\n    withOrigin(f.centroid(), (v) =>\r\n      v.getRotatedAroundAxis(f.normal(), angle).add(f.normal().scale(scale)),\r\n    ),\r\n  )\r\n}\r\n\r\nfunction getSchafli(specs: Classical) {\r\n  return specs.isFace() ? [specs.data.family, 3] : [3, specs.data.family]\r\n}\r\n\r\nconst coxeterNum = { 3: 4, 4: 6, 5: 10 }\r\n\r\nconst { sin, cos, tan, PI } = Math\r\n\r\n// get tan(theta/2) where theta is the dihedral angle of the platonic solid\r\nfunction tanDihedralOver2(specs: Classical) {\r\n  const [, q] = getSchafli(specs)\r\n  const h = coxeterNum[specs.data.family]\r\n  return cos(PI / q) / sin(PI / h)\r\n}\r\n\r\nfunction getInradius(specs: Classical) {\r\n  const [p] = getSchafli(specs)\r\n  return tanDihedralOver2(specs) / tan(PI / p) / 2\r\n}\r\n\r\nfunction getMidradius(specs: Classical) {\r\n  const [p] = getSchafli(specs)\r\n  const h = coxeterNum[specs.data.family]\r\n  return cos(PI / p) / sin(PI / h) / 2\r\n}\r\n\r\nfunction getCircumradius(specs: Classical) {\r\n  const [, q] = getSchafli(specs)\r\n  return (tan(PI / q) * tanDihedralOver2(specs)) / 2\r\n}\r\n\r\n// Get the face type for the given facet and solid specs\r\nfunction getFaceType(specs: Classical, facet?: Facet) {\r\n  return facet === \"vertex\" ? 3 : specs.data.family\r\n}\r\n\r\nfunction apothemVec(edge: Edge) {\r\n  return edge.midpoint().sub(edge.face.centroid())\r\n}\r\n\r\n/**\r\n * Return the snub angle of the given polyhedron, given the list of expanded faces\r\n */\r\nexport function calcSnubAngle(specs: Classical, facet: Facet) {\r\n  // Choose one of the expanded faces and get its properties\r\n  const polyhedron = getGeometry(specs)\r\n  const expandedFaces = getSnubFaces(specs, polyhedron, facet)\r\n  const [face0, ...rest] = expandedFaces\r\n  const faceCentroid = face0.centroid()\r\n  const midpoint = face0.edges[0].midpoint()\r\n\r\n  // Choose one of the closest faces\r\n  const face1 = minBy(rest, (face) => midpoint.distanceTo(face.centroid()))!\r\n\r\n  const plane = getPlane([\r\n    faceCentroid,\r\n    face1.centroid(),\r\n    polyhedron.centroid(),\r\n  ])\r\n\r\n  // Calculate the absolute angle between the two midpoints\r\n  return angleBetween(faceCentroid, midpoint, plane.getProjectedPoint(midpoint))\r\n}\r\n\r\nfunction createObject<T extends string | number, U>(\r\n  items: T[],\r\n  iter: (item: T) => U,\r\n) {\r\n  return mapObject(items, (item) => [item, iter(item)])\r\n}\r\n\r\n// Cache snub angles, since they're always the same\r\nconst snubAngles = createObject([3, 4, 5], (family: Family) => {\r\n  const specs = Classical.query.withData({ family, operation: \"snub\" })\r\n  return {\r\n    face: calcSnubAngle(specs, \"face\"),\r\n    vertex: calcSnubAngle(specs, \"vertex\"),\r\n  }\r\n})\r\n\r\nfunction isCantellatedFace(face: Face, faceType: number) {\r\n  return (\r\n    face.numSides === faceType &&\r\n    face.adjacentFaces().every((f) => f.numSides === 4)\r\n  )\r\n}\r\n\r\nfunction isCantellatedEdgeFace(face: Face) {\r\n  return (\r\n    face.numSides === 4 && face.adjacentFaces().some((f) => f.numSides !== 4)\r\n  )\r\n}\r\n\r\nexport function getCantellatedEdgeFace(geom: Polyhedron) {\r\n  const face = geom.faces.find(isCantellatedEdgeFace)\r\n  if (!face) throw new Error(`Could not find edge face for ${geom.name}`)\r\n  return face\r\n}\r\n\r\nexport function getCantellatedFace(geom: Polyhedron, faceType: number) {\r\n  const face = geom.faces.find((f) => isCantellatedFace(f, faceType))\r\n  if (!face) throw new Error(`Could not find cantellated face for ${geom.name}`)\r\n  return face\r\n}\r\n\r\nfunction isSnubFace(face: Face, faceType: number) {\r\n  return (\r\n    face.numSides === faceType &&\r\n    face.adjacentFaces().every((f) => f.numSides === 3)\r\n  )\r\n}\r\n\r\n// TODO deduplicate these (note: bevel has a different criterion for getting face)\r\nconst cantellatedDists = createObject([3, 4, 5], (family: Family) => {\r\n  const specs = Classical.query.withData({ family, operation: \"cantellate\" })\r\n  const geom = getGeometry(specs)\r\n  const face = getCantellatedFace(geom, family)\r\n  return face.distanceToCenter() / geom.edgeLength()\r\n})\r\n\r\nfunction calcTruncatedDist(family: Family, facet: Facet) {\r\n  const _facet = family === 3 ? undefined : facet\r\n  const specs = Classical.query.withData({\r\n    family,\r\n    operation: \"truncate\",\r\n    facet: _facet,\r\n  })\r\n  const geom = getGeometry(specs)\r\n  const face = geom.largestFace()\r\n  return face.distanceToCenter() / geom.edgeLength()\r\n}\r\n\r\nconst bevelledDists = createObject([3, 4, 5], (family: Family) => {\r\n  return {\r\n    face: calcTruncatedDist(family, \"face\"),\r\n    vertex: calcTruncatedDist(family, \"vertex\"),\r\n  }\r\n})\r\n\r\nfunction getSnubAngle(specs: Classical, facet: Facet) {\r\n  const sign = specs.data.twist === \"left\" ? -1 : 1\r\n  // if vertex-solid, reverse the sign\r\n  const sign2 = facet === \"vertex\" ? -1 : 1\r\n  const angle = snubAngles[specs.data.family][facet]\r\n  return sign2 * sign * angle\r\n}\r\n\r\n/**\r\n * Get the common properties of a resize operation's pose.\r\n */\r\nfunction getPose(geom: Polyhedron, face: Face, crossAxis: Vec3D): Pose {\r\n  return {\r\n    // Always centered on centroid\r\n    origin: geom.centroid(),\r\n    // Always scale to side length\r\n    scale: geom.edgeLength(),\r\n    // Use the normal of the given face as the first axis\r\n    orientation: [face.normal(), crossAxis],\r\n  }\r\n}\r\n\r\n// Get the pose of a regular solid for both expand/snub\r\nfunction getRegularPose(geom: Polyhedron): Pose {\r\n  const face = geom.getFace()\r\n  return getPose(geom, face, apothemVec(face.edges[0]))\r\n}\r\n\r\nfunction getCantellatedPose(\r\n  geom: Polyhedron,\r\n  specs: Classical,\r\n  facet?: Facet,\r\n): Pose {\r\n  const faceType = getFaceType(specs, facet)\r\n  // Use an expanded face as the face\r\n  const face = getCantellatedFace(geom, faceType)\r\n  // Pick one of the edges as cross axis\r\n  return getPose(geom, face, apothemVec(face.edges[0]))\r\n}\r\n\r\nfunction getSnubPose(geom: Polyhedron, specs: Classical, facet: Facet): Pose {\r\n  const faceType = getFaceType(specs, facet)\r\n  // Use an expanded face as the face\r\n  const face = geom.faces.find((face) => isSnubFace(face, faceType))!\r\n  // Rotate the apothem vector to align it correctly\r\n  const crossAxis = apothemVec(face.edges[0]).getRotatedAroundAxis(\r\n    face.normal(),\r\n    getSnubAngle(specs, facet),\r\n  )\r\n  return getPose(geom, face, crossAxis)\r\n}\r\n\r\nfunction twistOpts(specs: Classical): Twist[] {\r\n  // Snub tetrahedra aren't chiral (yet)\r\n  return specs.isTetrahedral() ? [\"left\"] : [\"left\", \"right\"]\r\n}\r\n\r\n// Expansion of truncated to bevelled solids\r\nconst semiExpand = makeOpPair<Classical, {}, FacetOpts>({\r\n  graph: Classical.query\r\n    .where((s) => s.isTruncated())\r\n    .map((entry) => ({\r\n      left: entry,\r\n      right: entry.withData({ operation: \"bevel\" }),\r\n      options: { left: {}, right: { facet: entry.data.facet } },\r\n    })),\r\n  middle: \"right\",\r\n  getPose(pos, { specs, geom }, { right: { facet } }) {\r\n    if (pos === \"left\") {\r\n      const face = geom.faces.find((f) => f.numSides > 5)!\r\n      const edge = face.edges.find(\r\n        (e) => e.twinFace().numSides === face.numSides,\r\n      )!\r\n      return getPose(geom, face, apothemVec(edge))\r\n    } else {\r\n      const faceType = 2 * getFaceType(specs, facet)\r\n      const face = geom.faceWithNumSides(faceType)\r\n      const edge = face.edges.find((e) => e.twinFace().numSides === 4)!\r\n      return getPose(geom, face, apothemVec(edge))\r\n    }\r\n  },\r\n  toLeft({ specs, geom }, { right: { facet = \"face\" } }) {\r\n    return getResizedVertices(\r\n      getBevelledFaces(specs, geom, facet),\r\n      bevelledDists[specs.data.family][facet],\r\n    )\r\n  },\r\n})\r\n\r\nconst _expand = makeOpPair<Classical, {}, FacetOpts>({\r\n  graph: Classical.query\r\n    .where((s) => s.isRegular())\r\n    .map((entry) => {\r\n      return {\r\n        left: entry,\r\n        right: entry.withData({ operation: \"cantellate\" }),\r\n        options: { left: {}, right: { facet: entry.data.facet } },\r\n      }\r\n    }),\r\n\r\n  middle: \"right\",\r\n\r\n  getPose(pos, { geom, specs }, { right: { facet } }) {\r\n    return pos === \"left\"\r\n      ? getRegularPose(geom)\r\n      : getCantellatedPose(geom, specs, facet)\r\n  },\r\n  toLeft({ specs, geom }, { right: { facet } }, result) {\r\n    // Take all the stuff and push it inwards\r\n    return getResizedVertices(\r\n      getCantellatedFaces(specs, geom, facet),\r\n      getInradius(result),\r\n    )\r\n  },\r\n})\r\n\r\nconst _snub = makeOpPair<Classical, TwistOpts, FacetOpts>({\r\n  graph: Classical.query\r\n    .where((s) => s.isRegular())\r\n    .flatMap((entry) => {\r\n      return twistOpts(entry).map((twist) => ({\r\n        left: entry,\r\n        right: entry.withData({\r\n          operation: \"snub\",\r\n          // If a vertex-solid, the chirality of the result\r\n          // is *opposite* of the twist option\r\n          twist: entry.isVertex() ? getOppTwist(twist) : twist,\r\n        }),\r\n        options: { left: { twist }, right: { facet: entry.data.facet } },\r\n      }))\r\n    }),\r\n\r\n  middle: \"right\",\r\n\r\n  getPose(pos, { geom, specs }, { right: { facet = \"face\" } }) {\r\n    return pos === \"left\"\r\n      ? getRegularPose(geom)\r\n      : getSnubPose(geom, specs, facet)\r\n  },\r\n  toLeft({ specs, geom }, { right: { facet = \"face\" } }, result) {\r\n    // Take all the stuff and push it inwards\r\n    return getResizedVertices(\r\n      getSnubFaces(specs, geom, result.data.facet),\r\n      getInradius(result),\r\n      getSnubAngle(specs, facet),\r\n    )\r\n  },\r\n})\r\n\r\nconst _twist = makeOpPair<Classical, TwistOpts, {}>({\r\n  graph: Classical.query\r\n    .where((s) => s.isCantellated())\r\n    .flatMap((entry) => {\r\n      return twistOpts(entry).map((twist) => ({\r\n        left: entry,\r\n        right: entry.withData({ operation: \"snub\", twist }),\r\n        options: { left: { twist }, right: {} },\r\n      }))\r\n    }),\r\n\r\n  middle: \"right\",\r\n\r\n  getPose(pos, { specs, geom }) {\r\n    return pos === \"left\"\r\n      ? getCantellatedPose(geom, specs, \"face\")\r\n      : getSnubPose(geom, specs, \"face\")\r\n  },\r\n  toLeft({ specs, geom }) {\r\n    return getResizedVertices(\r\n      getSnubFaces(specs, geom, \"face\"),\r\n      cantellatedDists[specs.data.family],\r\n      getSnubAngle(specs, \"face\"),\r\n    )\r\n  },\r\n})\r\n\r\nfunction getCantellatedMidradius(geom: Polyhedron) {\r\n  return getCantellatedEdgeFace(geom).distanceToCenter()\r\n}\r\n\r\n/**\r\n * Take the cantellated intermediate solid and convert it to either dual\r\n */\r\nfunction doDualTransform(specs: Classical, geom: Polyhedron, facet: Facet) {\r\n  const resultSpecs = specs.withData({ operation: \"regular\", facet })\r\n  const resultSideLength =\r\n    getCantellatedMidradius(geom) / getMidradius(resultSpecs)\r\n  const scale = resultSideLength * getCircumradius(resultSpecs)\r\n  const oppFacet = facet === \"face\" ? \"vertex\" : \"face\"\r\n  const faces = getCantellatedFaces(specs, geom, oppFacet, facet === \"face\")\r\n  return getTransformedVertices(faces, (f) => {\r\n    return geom.centroid().add(f.normal().scale(scale))\r\n  })\r\n}\r\n\r\nconst _dual = makeOpPair({\r\n  graph: Classical.query\r\n    .where((s) => s.isRegular() && !s.isVertex())\r\n    .map((specs) => ({\r\n      left: specs,\r\n      right: specs.withData({ facet: \"vertex\" }),\r\n    })),\r\n  middle: (entry) => entry.left.withData({ operation: \"cantellate\" }),\r\n  getPose(pos, { specs, geom }) {\r\n    switch (pos) {\r\n      case \"left\": {\r\n        return {\r\n          ...getRegularPose(geom),\r\n          // Everything is scaled with the same midradius\r\n          scale: geom.edges[0].distanceToCenter(),\r\n        }\r\n      }\r\n      case \"right\": {\r\n        // for the vertex figure, pick a vertex and align it with that edge\r\n        const vertex = geom.getVertex()\r\n        const normal = vertex.vec.sub(geom.centroid())\r\n        const v2 = vertex.adjacentVertices()[0]\r\n        return {\r\n          origin: geom.centroid(),\r\n          scale: geom.edges[0].distanceToCenter(),\r\n          orientation: [normal, v2.vec.sub(vertex.vec)],\r\n        }\r\n      }\r\n      case \"middle\": {\r\n        return {\r\n          ...getCantellatedPose(geom, specs, \"face\"),\r\n          scale: getCantellatedMidradius(geom),\r\n        }\r\n      }\r\n    }\r\n  },\r\n  toLeft: ({ specs, geom }) => doDualTransform(specs, geom, \"face\"),\r\n  toRight: ({ specs, geom }) => doDualTransform(specs, geom, \"vertex\"),\r\n})\r\n\r\n// Exported members\r\n\r\ntype ExpansionType = \"cantellate\" | \"snub\"\r\n\r\nfunction expansionType(polyhedron: Polyhedron): ExpansionType {\r\n  return polyhedron.getVertex().adjacentFaceCounts()[3] >= 3\r\n    ? \"snub\"\r\n    : \"cantellate\"\r\n}\r\n\r\nconst edgeShape = {\r\n  snub: 3,\r\n  cantellate: 4,\r\n}\r\n\r\n// TODO replace with isCantellatedFace and isSnubFace\r\nexport function isExpandedFace(\r\n  polyhedron: Polyhedron,\r\n  face: Face,\r\n  nSides?: number,\r\n) {\r\n  const type = expansionType(polyhedron)\r\n  if (typeof nSides === \"number\" && face.numSides !== nSides) return false\r\n  if (!face.isValid()) return false\r\n  return face.adjacentFaces().every((f) => f.numSides === edgeShape[type])\r\n}\r\n\r\nexport const dual = new Operation(\"dual\", combineOps([_dual.left, _dual.right]))\r\n\r\nexport const expand = new Operation(\r\n  \"expand\",\r\n  combineOps([semiExpand.left, _expand.left]),\r\n)\r\n\r\nexport const snub = makeOperation(\"snub\", _snub.left)\r\n\r\nexport const twist = makeOperation(\r\n  \"twist\",\r\n  combineOps([_twist.left, _twist.right]),\r\n)\r\n\r\n// NOTE: We are using the same operation for contracting both expanded and snub solids.\r\nexport const contract = makeOperation<FacetOpts, Classical>(\"contract\", {\r\n  ...combineOps([_expand, _snub, semiExpand].map((op) => op.right)),\r\n\r\n  hitOption: \"facet\",\r\n  getHitOption({ specs, geom }, hitPoint) {\r\n    const hitFace = geom.hitFace(hitPoint)\r\n    const faceType = hitFace.numSides\r\n    if (specs.isBevelled()) {\r\n      const isValid = hitFace.numSides > 4\r\n      return isValid ? { facet: faceType === 6 ? \"vertex\" : \"face\" } : {}\r\n    }\r\n    const isValid = isExpandedFace(geom, hitFace)\r\n    return isValid ? { facet: faceType === 3 ? \"vertex\" : \"face\" } : {}\r\n  },\r\n\r\n  faceSelectionStates({ specs, geom }, { facet }) {\r\n    if (specs.isBevelled()) {\r\n      return geom.faces.map((face) => {\r\n        const faceType = facet === \"vertex\" ? 6 : specs.data.family * 2\r\n        if (facet && face.numSides === faceType) {\r\n          return \"selected\"\r\n        }\r\n        if (face.numSides !== 4) return \"selectable\"\r\n        return undefined\r\n      })\r\n    }\r\n    const faceType = !facet ? null : facet === \"vertex\" ? 3 : specs.data.family\r\n    return geom.faces.map((face) => {\r\n      if (faceType && isExpandedFace(geom, face, faceType)) return \"selected\"\r\n      if (isExpandedFace(geom, face)) return \"selectable\"\r\n      return undefined\r\n    })\r\n  },\r\n})\r\n","import { sum } from \"lodash-es\"\r\nimport { Polyhedron, Face, Edge, VertexArg, Cap } from \"math/polyhedra\"\r\nimport Classical, { Operation as OpName } from \"data/specs/Classical\"\r\nimport Composite from \"data/specs/Composite\"\r\nimport { makeOpPair, combineOps, Pose } from \"./operationPairs\"\r\nimport Operation, { SolidArgs, OpArgs } from \"./Operation\"\r\nimport { Vec3D, getCentroid, angleBetween } from \"math/geom\"\r\nimport {\r\n  getGeometry,\r\n  FacetOpts,\r\n  getTransformedVertices,\r\n} from \"./operationUtils\"\r\n// TODO move this to a util\r\nimport { getCantellatedFace, getCantellatedEdgeFace } from \"./resizeOps\"\r\n\r\nfunction getSharpenFaces(polyhedron: Polyhedron) {\r\n  const faceType = polyhedron.smallestFace().numSides\r\n  return polyhedron.faces.filter((f) => f.numSides === faceType)\r\n}\r\n\r\n/**\r\n * Returns the point to sharpen given parameters in the following setup:\r\n *      result\r\n *      / ^\r\n *     /  |\r\n *   p2___f.normal\r\n *   /\r\n * p1\r\n *\r\n */\r\nfunction getSharpenPoint(face: Face, p1: Vec3D, p2: Vec3D) {\r\n  const ray = face.normalRay()\r\n  const theta1 = angleBetween(p1, p2, ray)\r\n  const theta2 = Math.PI - theta1\r\n  const dist = ray.distanceTo(p1) * Math.tan(theta2)\r\n  return ray.getPointAtDistance(dist)\r\n}\r\n\r\nfunction getSharpenPointEdge(face: Face, edge: Edge) {\r\n  return getSharpenPoint(face, edge.midpoint(), edge.twinFace().centroid())\r\n}\r\n\r\nfunction getAvgInradius(specs: Classical, geom: Polyhedron) {\r\n  let faces: Face[]\r\n  if (specs.isRectified()) {\r\n    faces = [geom.faceWithNumSides(3), geom.faceWithNumSides(specs.data.family)]\r\n  } else if (specs.isBevelled()) {\r\n    faces = [\r\n      geom.faceWithNumSides(6),\r\n      geom.faceWithNumSides(2 * specs.data.family),\r\n    ]\r\n  } else if (specs.isCantellated()) {\r\n    faces = [\r\n      geom.faceWithNumSides(3),\r\n      getCantellatedFace(geom, specs.data.family),\r\n    ]\r\n  } else {\r\n    throw new Error(`Invalid specs: ${specs.name()}`)\r\n  }\r\n  return sum(faces.map((f) => f.distanceToCenter())) / faces.length\r\n}\r\n\r\ninterface TrioOpArgs<Op, Opts = any> {\r\n  operation: Op\r\n  pose(solid: SolidArgs<Classical>, opts: Opts): Pose\r\n  transformer(\r\n    solid: SolidArgs<Classical>,\r\n    opts: Opts,\r\n    result: Classical,\r\n  ): VertexArg[]\r\n  options?(entry: Classical): Opts\r\n}\r\n\r\ninterface TrioArgs<L, M, R> {\r\n  left: TrioOpArgs<L>\r\n  middle: Omit<TrioOpArgs<M>, \"transformer\">\r\n  right: TrioOpArgs<R>\r\n}\r\n\r\n/**\r\n * Create a trio of truncation OpPairs: truncate, cotruncate, and rectify.\r\n * Given the functions to use for operations, poses, and transformers,\r\n * generate the triplet of OpPairs to use.\r\n */\r\nfunction makeTruncateTrio<L extends OpName, M extends OpName, R extends OpName>(\r\n  args: TrioArgs<L, M, R>,\r\n) {\r\n  const { left, right, middle } = args\r\n  function makePair(leftOp: \"left\" | \"middle\", rightOp: \"middle\" | \"right\") {\r\n    // Choose which side is the \"middle\" in order to short-circuit getting the intermediate\r\n    const middleArg =\r\n      leftOp === \"middle\" ? \"left\" : rightOp === \"middle\" ? \"right\" : null\r\n\r\n    return makeOpPair({\r\n      graph: Classical.query\r\n        .where((s) => s.data.operation === middle.operation)\r\n        .map((entry) => {\r\n          return {\r\n            left: entry.withData({ operation: args[leftOp].operation }),\r\n            right: entry.withData({ operation: args[rightOp].operation }),\r\n            options: {\r\n              left: args[leftOp].options?.(entry),\r\n              right: args[rightOp].options?.(entry),\r\n            },\r\n          }\r\n        }),\r\n      // If this is the left-right operation, then the intermediate\r\n      // is going to be the middle operation\r\n      middle:\r\n        middleArg ??\r\n        ((entry) => entry.left.withData({ operation: middle.operation })),\r\n      getPose: ($, solid, options) => {\r\n        // Use the pose function for the side that matches the op name of the solid\r\n        const side = Object.values(args).find(\r\n          (arg) => arg.operation === solid.specs.data.operation,\r\n        )\r\n        return side.pose(solid, options)\r\n      },\r\n      toLeft: leftOp === \"left\" ? left.transformer : undefined,\r\n      toRight: rightOp === \"right\" ? right.transformer : undefined,\r\n    })\r\n  }\r\n\r\n  return {\r\n    truncate: makePair(\"left\", \"middle\"),\r\n    cotruncate: makePair(\"middle\", \"right\"),\r\n    rectify: makePair(\"left\", \"right\"),\r\n  }\r\n}\r\n\r\nfunction getRegularPose(geom: Polyhedron, face: Face, crossPoint: Vec3D): Pose {\r\n  return {\r\n    origin: geom.centroid(),\r\n    // scale on the inradius of the truncated face\r\n    scale: face.distanceToCenter(),\r\n    orientation: [face.normal(), crossPoint.sub(face.centroid())],\r\n  }\r\n}\r\n\r\n/**\r\n * Describes the truncation operations on a Platonic solid.\r\n */\r\nconst regs = makeTruncateTrio({\r\n  left: {\r\n    operation: \"regular\",\r\n    pose({ geom }) {\r\n      const face = geom.getFace()\r\n      return getRegularPose(geom, geom.getFace(), face.edges[0].midpoint())\r\n    },\r\n    transformer({ geom }) {\r\n      return getTransformedVertices(getSharpenFaces(geom), (face) =>\r\n        getSharpenPointEdge(face, face.edges[0]),\r\n      )\r\n    },\r\n  },\r\n  middle: {\r\n    operation: \"truncate\",\r\n    pose({ geom }) {\r\n      const face = geom.largestFace()\r\n      const n = face.numSides\r\n      // pick an edge connected to another truncated face\r\n      const edge = face.edges.find((e) => e.twinFace().numSides === n)!\r\n      return getRegularPose(geom, face, edge.midpoint())\r\n    },\r\n  },\r\n  right: {\r\n    operation: \"rectify\",\r\n    // The rectified version is the only thing we need to choose an option for\r\n    // when we move out of it\r\n    options: (entry) => ({ facet: entry.data.facet }),\r\n    pose({ specs, geom }, options) {\r\n      // pick a face that *isn't* the sharpen face type\r\n      const faceType = options.right.facet === \"vertex\" ? 3 : specs.data.family\r\n      const face = geom.faceWithNumSides(faceType)\r\n      return getRegularPose(geom, face, face.vertices[0].vec)\r\n    },\r\n    transformer({ geom }) {\r\n      // All edges that between two truncated faces\r\n      const edges = geom.edges.filter(\r\n        (e) => e.face.numSides > 5 && e.twinFace().numSides > 5,\r\n      )\r\n      // Move each edge to its midpoint\r\n      return getTransformedVertices(edges, (e) => e.midpoint())\r\n    },\r\n  },\r\n})\r\n\r\nfunction getAmboPose(\r\n  specs: Classical,\r\n  geom: Polyhedron,\r\n  face: Face,\r\n  point: Vec3D,\r\n): Pose {\r\n  return {\r\n    origin: geom.centroid(),\r\n    scale: getAvgInradius(specs, geom),\r\n    orientation: [face.normal(), point.sub(face.centroid())],\r\n  }\r\n}\r\n\r\n/**\r\n * A trio of operations that describe the truncation behavior on a quasi-regular polyhedron\r\n * (tetratetrahedron, cuboctahedron, and icosidodecahedron).\r\n *\r\n * A raw truncation on one of these doesn't yield a CRF solid. We need to do some fudging\r\n * in order to everything to align correctly.\r\n *\r\n * We calculate the average inradius between the face-facet faces and the vertex-facet faces\r\n * and use that as a scale. For both, we use a reference polyhedron and calculate the vertex\r\n * transformations based on them.\r\n */\r\nconst ambos = makeTruncateTrio({\r\n  left: {\r\n    operation: \"rectify\",\r\n    pose({ geom, specs }) {\r\n      const face = geom.faceWithNumSides(specs.data.family)\r\n      return getAmboPose(specs, geom, face, face.edges[0].midpoint())\r\n    },\r\n    transformer({ geom, specs }, $, resultSpec) {\r\n      const ref = getGeometry(resultSpec)\r\n      const refInradius = getAvgInradius(resultSpec, ref)\r\n      const refCircumradius = ref.getVertex().distanceToCenter()\r\n      const inradius = getAvgInradius(specs, geom)\r\n      const scale = (refCircumradius / refInradius) * inradius\r\n      const faces = geom.faces.filter((f) => f.numSides === 4)\r\n      // Sharpen each of the faces to a point aligning with the vertices\r\n      // of the rectified solid\r\n      return getTransformedVertices(faces, (f) =>\r\n        geom.centroid().add(f.normal().scale(scale)),\r\n      )\r\n    },\r\n  },\r\n  middle: {\r\n    operation: \"bevel\",\r\n    pose({ geom, specs }) {\r\n      const face = geom.faceWithNumSides(specs.data.family * 2)\r\n      const edge = face.edges.find((e) => e.twinFace().numSides !== 4)!\r\n      return getAmboPose(specs, geom, face, edge.midpoint())\r\n    },\r\n  },\r\n  right: {\r\n    operation: \"cantellate\",\r\n    pose({ geom, specs }) {\r\n      const face = getCantellatedFace(geom, specs.data.family)\r\n      return getAmboPose(specs, geom, face, face.vertices[0].vec)\r\n    },\r\n    transformer({ geom, specs }, $, resultSpec) {\r\n      const ref = getGeometry(resultSpec)\r\n      const refInradius = getAvgInradius(resultSpec, ref)\r\n      const refFace = getCantellatedEdgeFace(ref)\r\n      const refMidradius = refFace.distanceToCenter()\r\n      const refFaceRadius = refFace.radius()\r\n      const inradius = getAvgInradius(specs, geom)\r\n      const scale = inradius / refInradius\r\n      const faces = geom.faces.filter((f) => f.numSides === 4)\r\n      return getTransformedVertices(faces, (f) => {\r\n        const faceCentroid = geom\r\n          .centroid()\r\n          .add(f.normal().scale(refMidradius * scale))\r\n\r\n        return (v) =>\r\n          faceCentroid.add(\r\n            v\r\n              .sub(f.centroid())\r\n              .getNormalized()\r\n              .scale(refFaceRadius * scale),\r\n          )\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\nconst augTruncate = makeOpPair({\r\n  graph: Composite.query\r\n    .where((s) => {\r\n      const source = s.data.source\r\n      return (\r\n        s.isAugmented() &&\r\n        !s.isDiminished() &&\r\n        source.isClassical() &&\r\n        source.isRegular()\r\n      )\r\n    })\r\n    .map((entry) => ({\r\n      left: entry,\r\n      right: entry.withData({\r\n        source: entry.data.source.withData({ operation: \"truncate\" }),\r\n      }),\r\n    })),\r\n  middle: \"right\",\r\n  getPose($, { geom, specs }) {\r\n    const source = specs.data.source\r\n    const isTetrahedron =\r\n      source.isClassical() && source.isTetrahedral() && source.isRegular()\r\n\r\n    // If source is a tetrahedron, take only the first cap (the other is the base)\r\n    let caps = Cap.getAll(geom)\r\n    if (isTetrahedron) {\r\n      caps = [caps[0]]\r\n    }\r\n    const capVertIndices = caps.flatMap((cap) =>\r\n      cap.innerVertices().map((v) => v.index),\r\n    )\r\n    const sourceVerts = geom.vertices.filter(\r\n      (v) => !capVertIndices.includes(v.index),\r\n    )\r\n    // Calculate the centroid *only* for the source polyhedra\r\n    const centroid = getCentroid(sourceVerts.map((v) => v.vec))\r\n    function isSourceFace(face: Face) {\r\n      return face.vertices.every((v) => !capVertIndices.includes(v.index))\r\n    }\r\n    function isBaseFace(face: Face) {\r\n      return isTetrahedron || face.numSides > 3\r\n    }\r\n    const scaleFace = geom.faces.find((f) => isSourceFace(f) && isBaseFace(f))!\r\n    const cap = caps[0]\r\n    const mainAxis = cap.normal()\r\n    const boundary = cap.boundary()\r\n\r\n    let crossAxis\r\n    if (specs.isTri()) {\r\n      // Use the midpoin of the normals of the two other caps\r\n      crossAxis = getCentroid([caps[1].normal(), caps[2].normal()])\r\n    } else if (specs.isBi() && specs.isMeta()) {\r\n      // If metabiaugmented, use the normal of the other cap\r\n      crossAxis = caps[1].normal()\r\n    } else {\r\n      crossAxis = boundary.edges\r\n        .find((e) => isBaseFace(e.twinFace()))!\r\n        .midpoint()\r\n        .sub(boundary.centroid())\r\n    }\r\n\r\n    return {\r\n      origin: centroid,\r\n      scale: scaleFace.centroid().distanceTo(centroid),\r\n      orientation: [mainAxis, crossAxis],\r\n    }\r\n  },\r\n  toLeft({ geom }) {\r\n    const capVertIndices = Cap.getAll(geom).flatMap((cap) =>\r\n      cap.innerVertices().map((v) => v.index),\r\n    )\r\n    const sourceFaces = geom.faces.filter((f) =>\r\n      f.vertices.every((v) => !capVertIndices.includes(v.index)),\r\n    )\r\n    const truncatedFaces = sourceFaces.filter((f) => f.numSides === 3)\r\n    const cupolaFaces = geom.faces.filter((f) =>\r\n      f.vertices.every((v) => capVertIndices.includes(v.index)),\r\n    )\r\n    return getTransformedVertices(\r\n      [...truncatedFaces, ...cupolaFaces],\r\n      (face) => {\r\n        if (cupolaFaces.some((f) => f.equals(face))) {\r\n          // Sharpen the cupola faces\r\n          const v = face.vertices[0]\r\n          // Find a triangular cupola face\r\n          const otherFace = v\r\n            .adjacentFaces()\r\n            .find((f) => f.numSides === 3 && !f.equals(face))!\r\n\r\n          return getSharpenPoint(face, v.vec, otherFace.centroid())\r\n        } else {\r\n          const edge = face.edges.find((e) => e.twinFace().numSides > 5)!\r\n          return getSharpenPointEdge(face, edge)\r\n        }\r\n      },\r\n    )\r\n  },\r\n})\r\n\r\n// Exported operations\r\n\r\nexport const truncate = new Operation(\r\n  \"truncate\",\r\n  combineOps<Classical | Composite, any>([\r\n    regs.truncate.left,\r\n    ambos.truncate.left,\r\n    augTruncate.left,\r\n  ]),\r\n)\r\n\r\nexport const cotruncate = new Operation(\r\n  \"cotruncate\",\r\n  combineOps([regs.cotruncate.left, ambos.cotruncate.left]),\r\n)\r\n\r\nexport const rectify = new Operation(\r\n  \"rectify\",\r\n  combineOps([regs.rectify.left, ambos.rectify.left]),\r\n)\r\n\r\nconst hitOptArgs: Partial<OpArgs<FacetOpts, Classical>> = {\r\n  hitOption: \"facet\",\r\n  getHitOption({ geom }, hitPoint) {\r\n    const n = geom.hitFace(hitPoint).numSides\r\n    return n <= 5 ? { facet: n === 3 ? \"face\" : \"vertex\" } : {}\r\n  },\r\n\r\n  faceSelectionStates({ specs, geom }, { facet }) {\r\n    const faceType = !facet ? null : facet === \"face\" ? 3 : specs.data.family\r\n    return geom.faces.map((face) => {\r\n      if (face.numSides === faceType) return \"selected\"\r\n      return \"selectable\"\r\n    })\r\n  },\r\n}\r\n\r\nexport const sharpen = new Operation(\"sharpen\", {\r\n  ...combineOps<Classical | Composite, FacetOpts>([\r\n    regs.truncate.right,\r\n    ambos.truncate.right,\r\n    augTruncate.right,\r\n    regs.rectify.right,\r\n    ambos.rectify.right,\r\n  ]),\r\n  // TODO split up sharpening rectified and sharpening truncated\r\n  ...hitOptArgs,\r\n})\r\n\r\n// TODO the following operators are unused right now\r\n// and need to be integrated into the app\r\n\r\nexport const cosharpen = new Operation(\"cosharpen\", {\r\n  ...combineOps<Classical, FacetOpts>([\r\n    regs.cotruncate.right,\r\n    ambos.cotruncate.right,\r\n  ]),\r\n  ...hitOptArgs,\r\n})\r\n\r\nexport const unrectify = new Operation(\"unrectify\", {\r\n  ...combineOps<Classical, FacetOpts>([\r\n    regs.rectify.right,\r\n    ambos.rectify.right,\r\n  ]),\r\n  ...hitOptArgs,\r\n})\r\n","import { maxBy, uniqBy } from \"lodash-es\"\r\nimport { Polyhedron, Cap } from \"math/polyhedra\"\r\nimport { isInverse } from \"math/geom\"\r\nimport PolyhedronSpecs from \"data/specs/PolyhedronSpecs\"\r\nimport Prismatic from \"data/specs/Prismatic\"\r\n\r\nfunction getOppositeCaps(polyhedron: Polyhedron) {\r\n  const caps = Cap.getAll(polyhedron)\r\n  for (const cap of caps) {\r\n    const cap2 = caps.find((cap2) => isInverse(cap.normal(), cap2.normal()))\r\n    if (cap2) return [cap, cap2]\r\n  }\r\n  throw new Error(`Could not find opposite caps`)\r\n}\r\n\r\nfunction getOppositePrismFaces(specs: Prismatic, polyhedron: Polyhedron) {\r\n  const face1 = polyhedron.faceWithNumSides(specs.data.base)\r\n  const face2 = polyhedron.faces.find(\r\n    (f) =>\r\n      f.numSides === face1.numSides && isInverse(face1.normal(), f.normal()),\r\n  )!\r\n  return [face1, face2]\r\n}\r\n\r\n// Get information for figuring out how to twist or shorten a polyhedron\r\nexport function getOppositeFacets(\r\n  specs: PolyhedronSpecs,\r\n  polyhedron: Polyhedron,\r\n) {\r\n  if (specs.isPrismatic()) {\r\n    return getOppositePrismFaces(specs, polyhedron)\r\n  }\r\n  if (!specs.isCapstone()) {\r\n    throw new Error(`Invalid spec provided: ${specs.name()}`)\r\n  }\r\n  if (specs.isBi()) {\r\n    return getOppositeCaps(polyhedron)\r\n  }\r\n\r\n  // Otherwise it's an elongated single cap.\r\n  // Find the face *first* (in case it's a diminished icosahedron)\r\n  // then find the cap that's opposite of it\r\n  const faces = polyhedron.faces.filter((face) => {\r\n    return uniqBy(face.adjacentFaces(), \"numSides\").length === 1\r\n  })\r\n  const face = maxBy(faces, \"numSides\")!\r\n  const cap = Cap.getAll(polyhedron).find((cap) =>\r\n    isInverse(cap.normal(), face.normal()),\r\n  )!\r\n  return [face, cap]\r\n}\r\n","import { sortBy } from \"lodash-es\"\r\nimport { Twist } from \"types\"\r\nimport { Cap, FaceLike, Edge, Polyhedron } from \"math/polyhedra\"\r\nimport { PrismaticType } from \"data/specs/common\"\r\nimport PolyhedronSpecs from \"data/specs/PolyhedronSpecs\"\r\nimport Capstone from \"data/specs/Capstone\"\r\nimport Prismatic from \"data/specs/Prismatic\"\r\nimport { combineOps, makeOpPair, Pose } from \"./operationPairs\"\r\nimport { makeOperation, SolidArgs } from \"./Operation\"\r\nimport {\r\n  getOppTwist,\r\n  TwistOpts,\r\n  getTransformedVertices,\r\n} from \"./operationUtils\"\r\nimport { withOrigin } from \"math/geom\"\r\nimport { getOppositeFacets } from \"./prismUtils\"\r\n\r\nconst { cos, PI, sqrt } = Math\r\n\r\n// Get antiprism height of a unit antiprism with n sides\r\nexport function antiprismHeight(n: number) {\r\n  const sec = 1 / cos(PI / (2 * n))\r\n  return sqrt(1 - (sec * sec) / 4)\r\n}\r\n\r\nfunction getPrismaticHeight(n: number, elongation: PrismaticType | null) {\r\n  switch (elongation) {\r\n    case \"prism\":\r\n      return 1\r\n    case \"antiprism\":\r\n      return antiprismHeight(n)\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nfunction getTwistMult(twist?: Twist) {\r\n  switch (twist) {\r\n    case \"left\":\r\n      return 1\r\n    case \"right\":\r\n      return -1\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nfunction getPose(\r\n  face: FaceLike,\r\n  edge: Edge,\r\n  elongation: PrismaticType | null,\r\n  twist?: Twist,\r\n): Pose {\r\n  const faceCenter = face.centroid()\r\n  const length = face.sideLength()\r\n  const n = face.numSides\r\n  const origin = faceCenter.sub(\r\n    face.normal().scale((length * getPrismaticHeight(n, elongation)) / 2),\r\n  )\r\n  const angle =\r\n    (elongation === \"antiprism\" ? 1 : 0) * getTwistMult(twist) * (PI / n / 2)\r\n\r\n  return {\r\n    origin,\r\n    scale: length,\r\n    orientation: [\r\n      face.normal(),\r\n      edge.v1.vec.sub(faceCenter).getRotatedAroundAxis(face.normal(), angle),\r\n    ],\r\n  }\r\n}\r\n\r\nfunction getNumSides(specs: PolyhedronSpecs) {\r\n  if (specs.isPrismatic()) {\r\n    return specs.data.base\r\n  } else if (specs.isCapstone()) {\r\n    if (specs.isPyramid()) return specs.data.base\r\n    return 2 * specs.data.base\r\n  }\r\n  throw new Error(`Invalid specs: ${specs.name()}`)\r\n}\r\n\r\nfunction getScaledPrismVertices(\r\n  specs: PolyhedronSpecs,\r\n  geom: Polyhedron,\r\n  scale: number,\r\n  twist?: Twist,\r\n) {\r\n  const vertexSets = getOppositeFacets(specs, geom)\r\n  const angle = (getTwistMult(twist) * PI) / getNumSides(specs)\r\n\r\n  return getTransformedVertices(vertexSets, (set) =>\r\n    withOrigin(set.normalRay(), (v) =>\r\n      v\r\n        .add(set.normal().scale(scale / 2))\r\n        .getRotatedAroundAxis(set.normal(), angle / 2),\r\n    ),\r\n  )\r\n}\r\n\r\n/**\r\n * Shorten the given polyhedron with the optional twist\r\n */\r\nfunction doShorten(specs: Capstone, geom: Polyhedron, twist?: Twist) {\r\n  const scale =\r\n    -geom.edgeLength() *\r\n    getPrismaticHeight(getNumSides(specs), specs.data.elongation)\r\n  return getScaledPrismVertices(specs, geom, scale, twist)\r\n}\r\n\r\nfunction doTurn(specs: PolyhedronSpecs, geom: Polyhedron, twist?: Twist) {\r\n  const scale = -geom.edgeLength() * (antiprismHeight(getNumSides(specs)) - 1)\r\n  return getScaledPrismVertices(specs, geom, scale, twist)\r\n}\r\n\r\nconst capTypeMap: Record<string, number> = { rotunda: 0, cupola: 1, pyramid: 2 }\r\n\r\ninterface PrismOpArgs {\r\n  // The list of *right* args\r\n  query(data: Capstone): boolean\r\n  rightElongation?: \"prism\" | \"antiprism\"\r\n  getOrientation(solid: SolidArgs<Capstone>): [FaceLike, Edge]\r\n}\r\n\r\nfunction makePrismOp({\r\n  query,\r\n  rightElongation = \"antiprism\",\r\n  getOrientation,\r\n}: PrismOpArgs) {\r\n  const twist = rightElongation === \"prism\" ? undefined : \"left\"\r\n  return (leftElongation: \"prism\" | null) => {\r\n    return makeOpPair({\r\n      graph: Capstone.query\r\n        .where((s) => query(s) && s.data.elongation === rightElongation)\r\n        .map((item) => ({\r\n          left: item.withData({ elongation: leftElongation }),\r\n          right: item,\r\n        })),\r\n      middle: \"right\",\r\n      getPose(side, solid) {\r\n        const [face, edge] = getOrientation(solid)\r\n        return getPose(face, edge, solid.specs.data.elongation, twist)\r\n      },\r\n      toLeft({ geom, specs }) {\r\n        const fn = leftElongation === \"prism\" ? doTurn : doShorten\r\n        return fn(specs, geom, twist)\r\n      },\r\n    })\r\n  }\r\n}\r\n\r\nconst turnPrismatic = makeOpPair({\r\n  // Every unelongated capstone (except fastigium) can be elongated\r\n  graph: Prismatic.query\r\n    .where((s) => s.isPrism() && !s.isDigonal())\r\n    .map((entry) => ({\r\n      left: entry,\r\n      right: entry.withData({ type: \"antiprism\" }),\r\n    })),\r\n  middle: \"right\",\r\n  getPose(side, { geom, specs }) {\r\n    const face = geom.faceWithNumSides(specs.data.base)\r\n    return getPose(face, face.edges[0], specs.data.type, \"left\")\r\n  },\r\n  toLeft: ({ geom, specs }) => doTurn(specs, geom, \"left\"),\r\n})\r\n\r\nconst _elongate = makePrismOp({\r\n  query: (s) => !s.isDigonal(),\r\n  rightElongation: \"prism\",\r\n  getOrientation({ geom }) {\r\n    const face = sortBy(\r\n      Cap.getAll(geom),\r\n      (cap) => capTypeMap[cap.type],\r\n    )[0].boundary()\r\n    const edge = face.edges.find((e) => e.face.numSides === 3)!\r\n    return [face, edge]\r\n  },\r\n})(null)\r\n\r\nconst canGyroelongPyramid = (s: Capstone) => s.isPyramid() && s.data.base > 3\r\nconst canGyroelongCupola = (s: Capstone) => !s.isPyramid() && !s.isDigonal()\r\n\r\nconst pyramidOps = makePrismOp({\r\n  query: (s) => canGyroelongPyramid(s) && s.isMono(),\r\n  getOrientation({ geom }) {\r\n    const face = geom.largestFace()\r\n    return [face, face.edges[0]]\r\n  },\r\n})\r\nconst gyroelongPyramid = pyramidOps(null)\r\nconst turnPyramid = pyramidOps(\"prism\")\r\n\r\nconst cupolaOps = makePrismOp({\r\n  query: (s) => canGyroelongCupola(s) && s.isMono(),\r\n  getOrientation({ geom }) {\r\n    // Pick a cap, favoring rotunda over cupola in the case of cupolarotundae\r\n    const face = Cap.getAll(geom)[0].boundary()\r\n    const edge = face.edges.find((e) => e.face.numSides === 3)!\r\n    return [face, edge]\r\n  },\r\n})\r\n\r\nconst gyroelongCupola = cupolaOps(null)\r\nconst turnCupola = cupolaOps(\"prism\")\r\n\r\nconst bipyramidOps = makePrismOp({\r\n  query: (s) => canGyroelongPyramid(s) && s.isBi(),\r\n  getOrientation({ geom }) {\r\n    // Pick a cap, favoring rotunda over cupola in the case of cupolarotundae\r\n    const face = Cap.getAll(geom)[0].boundary()\r\n    return [face, face.edges[0]]\r\n  },\r\n})\r\n\r\nconst gyroelongBipyramid = bipyramidOps(null)\r\nconst turnBipyramid = bipyramidOps(\"prism\")\r\n\r\nfunction makeBicupolaPrismOp(leftElongation: null | \"prism\") {\r\n  return makeOpPair<Capstone, TwistOpts>({\r\n    graph: Capstone.query\r\n      .where(\r\n        (s) =>\r\n          canGyroelongCupola(s) &&\r\n          s.isBi() &&\r\n          s.data.elongation === leftElongation,\r\n      )\r\n      .flatMap((entry) => {\r\n        return ([\"left\", \"right\"] as Twist[]).map((twist) => {\r\n          return {\r\n            left: entry,\r\n            right: entry.withData({\r\n              elongation: \"antiprism\",\r\n              // left twisting a gyro bicupola makes it be *left* twisted\r\n              // but the opposite for ortho bicupolae\r\n              twist: entry.isGyro() ? twist : getOppTwist(twist),\r\n            }),\r\n            // Left and right options are opposites of each other\r\n            options: { left: { twist }, right: { twist: getOppTwist(twist) } },\r\n          }\r\n        })\r\n      }),\r\n    middle: \"right\",\r\n    getPose(side, { specs, geom }, { right: { twist } }) {\r\n      // Pick a cap, favoring rotunda over cupola in the case of cupolarotundae\r\n      const caps = Cap.getAll(geom)\r\n      const cap = specs.isCupolaRotunda()\r\n        ? caps.find((cap) => cap.type === \"rotunda\")!\r\n        : caps[0]\r\n      const face = cap.boundary()\r\n      const edge = face.edges.find((e) => e.face.numSides === 3)!\r\n      return getPose(face, edge, specs.data.elongation, twist)\r\n    },\r\n    toLeft: ({ geom, specs }, { right: { twist } }) => {\r\n      const fn = leftElongation === \"prism\" ? doTurn : doShorten\r\n      return fn(specs, geom, twist)\r\n    },\r\n  })\r\n}\r\n\r\nconst gyroelongBicupola = makeBicupolaPrismOp(null)\r\nconst turnBicupola = makeBicupolaPrismOp(\"prism\")\r\n\r\n// Exported operations\r\n\r\nexport const elongate = makeOperation(\"elongate\", _elongate.left)\r\n\r\nexport const gyroelongate = makeOperation(\r\n  \"gyroelongate\",\r\n  combineOps(\r\n    [\r\n      gyroelongPyramid,\r\n      gyroelongCupola,\r\n      gyroelongBipyramid,\r\n      gyroelongBicupola,\r\n    ].map((op) => op.left),\r\n  ),\r\n)\r\n\r\nexport const shorten = makeOperation(\r\n  \"shorten\",\r\n  combineOps(\r\n    [\r\n      _elongate,\r\n      gyroelongPyramid,\r\n      gyroelongCupola,\r\n      gyroelongBipyramid,\r\n      gyroelongBicupola,\r\n    ].map((op) => op.right),\r\n  ),\r\n)\r\n\r\nexport const turn = makeOperation(\r\n  \"turn\",\r\n  combineOps<Capstone | Prismatic, TwistOpts>(\r\n    [\r\n      turnPrismatic,\r\n      turnPyramid,\r\n      turnCupola,\r\n      turnBipyramid,\r\n      turnBicupola,\r\n    ].flatMap((op) => [op.left, op.right]),\r\n  ),\r\n)\r\n","import { getSingle } from \"utils\"\r\nimport { Cap, Polyhedron } from \"math/polyhedra\"\r\nimport { isInverse } from \"math/geom\"\r\nimport Capstone from \"data/specs/Capstone\"\r\nimport Composite from \"data/specs/Composite\"\r\nimport Elementary from \"data/specs/Elementary\"\r\n\r\nexport type CutPasteSpecs = Capstone | Composite | Elementary\r\n\r\ntype Count = Composite[\"data\"][\"augmented\"]\r\n\r\nexport function inc(count: Count): Count {\r\n  if (count === 3) throw new Error(`Count ${count} is too high to increment`)\r\n  return (count + 1) as any\r\n}\r\n\r\nexport function dec(count: Count): Count {\r\n  if (count === 0) throw new Error(`Count ${count} is too low to decrement`)\r\n  return (count - 1) as any\r\n}\r\n\r\nexport function getCupolaGyrate(cap: Cap) {\r\n  const isOrtho = cap.boundary().edges.every((edge) => {\r\n    const [n1, n2] = edge.adjacentFaces().map((f) => f.numSides)\r\n    return (n1 === 4) === (n2 === 4)\r\n  })\r\n  return isOrtho ? \"ortho\" : \"gyro\"\r\n}\r\n\r\nexport function getCapAlignment(polyhedron: Polyhedron, cap: Cap) {\r\n  const isRhombicosidodecahedron = cap.type === \"cupola\"\r\n  const orthoCaps = isRhombicosidodecahedron\r\n    ? Cap.getAll(polyhedron).filter((cap) => getCupolaGyrate(cap) === \"ortho\")\r\n    : []\r\n\r\n  const otherNormal =\r\n    orthoCaps.length > 0\r\n      ? getSingle(orthoCaps).boundary().normal()\r\n      : polyhedron.largestFace().normal()\r\n\r\n  return isInverse(cap.normal(), otherNormal) ? \"para\" : \"meta\"\r\n}\r\n","import { mapValues, compact, xor, uniq, pickBy } from \"lodash-es\"\r\n\r\nimport Prismatic from \"data/specs/Prismatic\"\r\nimport Capstone from \"data/specs/Capstone\"\r\nimport Elementary from \"data/specs/Elementary\"\r\nimport { Polyhedron, Face, Cap } from \"math/polyhedra\"\r\nimport { isInverse, getOrthonormalTransform, PRECISION } from \"math/geom\"\r\nimport { repeat, getCyclic, getSingle } from \"utils\"\r\nimport { makeOperation } from \"../Operation\"\r\nimport { withOrigin } from \"../../geom\"\r\nimport { oppositeFace, deduplicateVertices } from \"../operationUtils\"\r\nimport { inc, dec, CutPasteSpecs } from \"./cutPasteUtils\"\r\n\r\ntype AugmentSpecs = Prismatic | CutPasteSpecs\r\n\r\ntype AugmentType = \"pyramid\" | \"cupola\" | \"rotunda\"\r\n\r\n// TODO simplify using Specs\r\nconst augmentees: Record<AugmentType, Record<number, string>> = {\r\n  pyramid: {\r\n    3: \"tetrahedron\",\r\n    4: \"square pyramid\",\r\n    5: \"pentagonal pyramid\",\r\n  },\r\n\r\n  cupola: {\r\n    2: \"triangular prism\",\r\n    3: \"triangular cupola\",\r\n    4: \"square cupola\",\r\n    5: \"pentagonal cupola\",\r\n  },\r\n\r\n  rotunda: {\r\n    5: \"pentagonal rotunda\",\r\n  },\r\n}\r\n\r\nconst augmentData = mapValues(augmentees, (type) =>\r\n  mapValues(type, Polyhedron.get),\r\n)\r\n\r\nconst augmentTypes: Record<string, AugmentType> = {\r\n  Y: \"pyramid\",\r\n  U: \"cupola\",\r\n  R: \"rotunda\",\r\n}\r\n\r\nfunction hasAugmentAlignment(info: AugmentSpecs) {\r\n  if (!info.isComposite()) return false\r\n  const { source, augmented } = info.data\r\n  if (augmented !== 1) return false\r\n  // Only hexagonal prism has augment alignment\r\n  if (source.isPrismatic()) return source.data.base === 6\r\n  // If Classical, has alignment if it has icosahedral symmetry\r\n  return source.isIcosahedral()\r\n}\r\n\r\nfunction getAugmentAlignment(polyhedron: Polyhedron, face: Face) {\r\n  const boundary = getSingle(Cap.getAll(polyhedron)).boundary()\r\n  return isInverse(boundary.normal(), face.normal()) ? \"para\" : \"meta\"\r\n}\r\n\r\nfunction getPossibleAugmentees(n: number) {\r\n  const { pyramid, cupola, rotunda } = augmentData\r\n  return compact([pyramid[n], cupola[n / 2], rotunda[n / 2]])\r\n}\r\n\r\n// Checks to see if the polyhedron can be augmented at the base while remaining convex\r\nfunction canAugmentWith(base: Face, augmentee: Polyhedron, offset: number) {\r\n  const n = base.numSides\r\n  if (!augmentee) return false\r\n  const underside = augmentee.faceWithNumSides(n)\r\n\r\n  return base.edges.every((edge, i: number) => {\r\n    const baseAngle = edge.dihedralAngle()\r\n\r\n    const edge2 = getCyclic(underside.edges, i - 1 + offset)\r\n    const augmenteeAngle = edge2.dihedralAngle()\r\n\r\n    return baseAngle + augmenteeAngle < Math.PI - PRECISION\r\n  })\r\n}\r\n\r\nfunction canAugmentWithType(base: Face, using: string) {\r\n  const augmentType = getUsingType(using)\r\n  const n = augmentType === \"pyramid\" ? base.numSides : base.numSides / 2\r\n  for (const offset of [0, 1]) {\r\n    if (canAugmentWith(base, augmentData[augmentType][n], offset)) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction canAugment(base: Face) {\r\n  const n = base.numSides\r\n  const augmentees = getPossibleAugmentees(n)\r\n  for (const augmentee of augmentees) {\r\n    for (const offset of [0, 1]) {\r\n      if (canAugmentWith(base, augmentee, offset)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n// Computes the set equality of two arrays\r\nconst setEquals = <T>(array1: T[], array2: T[]) =>\r\n  xor(array1, array2).length === 0\r\n\r\nfunction getBaseType(base: Face) {\r\n  const adjacentFaces = base.adjacentFaces()\r\n  const adjacentFaceCounts = uniq(adjacentFaces.map((f) => f.numSides))\r\n  if (setEquals(adjacentFaceCounts, [3, 4])) {\r\n    return \"cupola\"\r\n  } else if (setEquals(adjacentFaceCounts, [4])) {\r\n    return \"prism\"\r\n  } else if (setEquals(adjacentFaceCounts, [3])) {\r\n    return \"pyramidOrAntiprism\"\r\n  } else if (setEquals(adjacentFaceCounts, [3, 5])) {\r\n    return \"rotunda\"\r\n  } else if (setEquals(adjacentFaceCounts, [4, 5])) {\r\n    return \"rhombicosidodecahedron\"\r\n  } else {\r\n    return \"truncated\"\r\n  }\r\n}\r\n\r\nfunction isCupolaRotunda(baseType: string, augmentType: string) {\r\n  return setEquals([\"cupola\", \"rotunda\"], [baseType, augmentType])\r\n}\r\n\r\n// TODO redo this function to rely on tableUtils instead\r\n// Return true if the base and augmentee are aligned\r\nfunction isAligned(\r\n  polyhedron: Polyhedron,\r\n  base: Face,\r\n  underside: Face,\r\n  gyrate: string | undefined,\r\n  augmentType: string,\r\n) {\r\n  if (augmentType === \"pyramid\") return true\r\n  const baseType = getBaseType(base)\r\n  if (baseType === \"pyramidOrAntiprism\") {\r\n    return true\r\n  }\r\n\r\n  if (baseType === \"prism\" && Cap.getAll(polyhedron).length === 0) {\r\n    return true\r\n  }\r\n\r\n  if (baseType !== \"truncated\" && !gyrate) {\r\n    throw new Error(`Must define 'gyrate' for augmenting ${baseType} `)\r\n  }\r\n\r\n  const adjFace =\r\n    baseType === \"prism\" ? oppositeFace(base.edges[0]) : base.adjacentFaces()[0]\r\n  const alignedFace = getCyclic(underside.adjacentFaces(), -1)\r\n\r\n  if (baseType === \"rhombicosidodecahedron\") {\r\n    const isOrtho = (adjFace.numSides !== 4) === (alignedFace.numSides !== 4)\r\n    return isOrtho === (gyrate === \"ortho\")\r\n  }\r\n\r\n  // It's orthogonal if triangle faces are aligned or non-triangle faces are aligned\r\n  const isOrtho = (adjFace.numSides !== 3) === (alignedFace.numSides !== 3)\r\n\r\n  if (baseType === \"truncated\") {\r\n    return !isOrtho\r\n  }\r\n\r\n  // \"ortho\" or \"gyro\" is actually determined by whether the *tops* are aligned, not the bottoms\r\n  // So for a cupola-rotunda, it's actually the opposite of everything else\r\n  if (isCupolaRotunda(Cap.getAll(polyhedron)[0].type, augmentType)) {\r\n    return isOrtho !== (gyrate === \"ortho\")\r\n  }\r\n\r\n  return isOrtho === (gyrate === \"ortho\")\r\n}\r\n\r\nfunction getAugmentee(augmentType: AugmentType, numSides: number) {\r\n  const index = [\"cupola\", \"rotunda\"].includes(augmentType)\r\n    ? numSides / 2\r\n    : numSides\r\n  return augmentData[augmentType][index]\r\n}\r\n\r\nfunction isFastigium(augmentType: string, numSides: number) {\r\n  return augmentType === \"cupola\" && numSides === 4\r\n}\r\n\r\n// Augment the following\r\nfunction doAugment(\r\n  info: AugmentSpecs,\r\n  polyhedron: Polyhedron,\r\n  base: Face,\r\n  augmentType: AugmentType,\r\n  gyrate?: string,\r\n) {\r\n  const numSides = base.numSides\r\n  const augmentee = getAugmentee(augmentType, numSides)\r\n  const underside = augmentee.faceWithNumSides(base.numSides)\r\n\r\n  // Determine the orientations of the underside and the base\r\n  const undersideRadius = underside.vertices[0].vec\r\n    .sub(underside.centroid())\r\n    .getNormalized()\r\n\r\n  const baseIsAligned = isAligned(\r\n    polyhedron,\r\n    base,\r\n    underside,\r\n    isFastigium(augmentType, numSides) ? \"gyro\" : gyrate,\r\n    augmentType,\r\n  )\r\n  const offset = baseIsAligned ? 0 : 1\r\n  const baseRadius = base.vertices[offset].vec\r\n    .sub(base.centroid())\r\n    .getNormalized()\r\n\r\n  // https://math.stackexchange.com/questions/624348/finding-rotation-axis-and-angle-to-align-two-oriented-vectors\r\n  // Determine the transformation that rotates the underside orientation to the base orientation\r\n  // TODO we probably want this as some sort of generic method\r\n  const transformMatrix = getOrthonormalTransform(\r\n    undersideRadius,\r\n    underside.normal().getInverted(),\r\n    baseRadius,\r\n    base.normal(),\r\n  )\r\n  const transform = withOrigin(base.centroid(), (u) =>\r\n    transformMatrix.applyTo(u),\r\n  )\r\n\r\n  // Scale and position the augmentee so that it lines up with the base\r\n  const alignedVertices = augmentee.vertices.map((v) => {\r\n    return v.vec\r\n      .sub(underside.centroid())\r\n      .scale(base.sideLength() / augmentee.edgeLength())\r\n      .add(base.centroid())\r\n  })\r\n\r\n  // Rotate the vertices so that they align with the base\r\n  const rotatedVertices = alignedVertices.map((v) => transform(v))\r\n\r\n  const newAugmentee = augmentee.withChanges((s) =>\r\n    s.withVertices(rotatedVertices).withoutFaces([underside]),\r\n  )\r\n\r\n  const augmenteeInitial = augmentee.withVertices(\r\n    repeat(base.centroid(), augmentee.numVertices()),\r\n  )\r\n\r\n  const endResult = polyhedron.addPolyhedron(newAugmentee)\r\n\r\n  return {\r\n    animationData: {\r\n      start: polyhedron.addPolyhedron(augmenteeInitial),\r\n      endVertices: endResult.vertices,\r\n    },\r\n    result: deduplicateVertices(endResult.withoutFaces([base])),\r\n  }\r\n}\r\n\r\nfunction defaultAugmentType(numSides: number) {\r\n  return numSides <= 5 ? \"pyramid\" : \"cupola\"\r\n}\r\n\r\nconst defaultAugmentees: Record<number, string> = {\r\n  3: \"Y3\",\r\n  4: \"Y4\",\r\n  5: \"Y5\",\r\n  6: \"U3\",\r\n  8: \"U4\",\r\n  10: \"U5\",\r\n}\r\n\r\nfunction getAugmenteeNumSides(using: string) {\r\n  const { type, base } = getUsingData(using)\r\n  return [\"rotunda\", \"cupola\"].includes(type) ? base * 2 : base\r\n}\r\n\r\nfunction getUsingOpt(numSides: number, using?: string) {\r\n  return !!using && getAugmenteeNumSides(using) === numSides\r\n    ? using\r\n    : defaultAugmentees[numSides]\r\n}\r\n\r\nfunction hasRotunda(info: AugmentSpecs) {\r\n  if (info.isPrismatic()) {\r\n    return info.data.base === 10\r\n  }\r\n  if (info.isCapstone()) {\r\n    return info.isMono() && !info.isPyramid() && info.isPentagonal()\r\n  }\r\n  return false\r\n}\r\n\r\nfunction getUsingData(using: string) {\r\n  const [prefix, baseStr] = using\r\n  return { type: augmentTypes[prefix], base: parseInt(baseStr) }\r\n}\r\n\r\nfunction getUsingType(using: string) {\r\n  return getUsingData(using).type\r\n}\r\n\r\nfunction getUsingOpts(info: AugmentSpecs) {\r\n  // Triangular prism or fastigium\r\n  if (info.canonicalName() === \"triangular prism\") {\r\n    return [\"Y4\", \"U2\"]\r\n  }\r\n\r\n  if (hasRotunda(info)) {\r\n    return [\"U5\", \"R5\"]\r\n  }\r\n  return null\r\n}\r\n\r\nfunction hasGyrateOpts(info: AugmentSpecs) {\r\n  if (info.isCapstone()) {\r\n    // Gyroelongated capstones are always gyro\r\n    if (info.isGyroelongated()) return false\r\n    // Cupolae and rotundae (that are not the gyrobifastigium) always have gyrate opts\r\n    if (!info.isDigonal() && !info.isPyramid()) return true\r\n    return false\r\n  }\r\n  if (info.isComposite()) {\r\n    return info.data.source.canonicalName() === \"rhombicosidodecahedron\"\r\n  }\r\n  return false\r\n}\r\n\r\ntype GyrateOpts = \"ortho\" | \"gyro\"\r\nconst allGyrateOpts: GyrateOpts[] = [\"ortho\", \"gyro\"]\r\n\r\ninterface Options {\r\n  face: Face\r\n  gyrate?: GyrateOpts\r\n  using?: string\r\n}\r\nexport const augment = makeOperation<Options, AugmentSpecs>(\"augment\", {\r\n  apply({ specs, geom }, { face, gyrate, using }) {\r\n    const augmentType = using\r\n      ? getUsingType(using)\r\n      : defaultAugmentType(face.numSides)\r\n    return doAugment(specs, geom, face, augmentType, gyrate)\r\n  },\r\n\r\n  canApplyTo(info) {\r\n    if (info.isPrismatic()) {\r\n      const { base } = info.data\r\n      if (info.isAntiprism() && base === 3) return false\r\n      return base > 2\r\n    }\r\n    if (info.isCapstone()) {\r\n      return info.isMono()\r\n    }\r\n    if (info.isComposite()) {\r\n      const { source, diminished, augmented } = info.data\r\n      if (source.canonicalName() === \"rhombicosidodecahedron\") {\r\n        return diminished > 0\r\n      }\r\n      if (source.canonicalName() === \"icosahedron\") {\r\n        return diminished > 0 && augmented === 0\r\n      }\r\n      if (source.isPrismatic()) {\r\n        return (\r\n          augmented < (source.data.base % 3 === 0 ? 3 : 2) && !info.isPara()\r\n        )\r\n      }\r\n      if (source.isClassical()) {\r\n        return augmented < source.data.family - 2 && !info.isPara()\r\n      }\r\n    }\r\n    if (info.isElementary()) {\r\n      return info.canonicalName() === \"sphenocorona\"\r\n    }\r\n    return false\r\n  },\r\n\r\n  isPreferredSpec(info, { face, using }) {\r\n    const n = face.numSides\r\n    const { type, base } = getUsingData(getUsingOpt(n, using))\r\n    if (base === 4 && type === \"pyramid\") {\r\n      if (info.isPrismatic() && info.isPrism()) return false\r\n    }\r\n    // for the fastigium, depend on what the using option is\r\n    if (info.canonicalName() === \"triangular prism\") {\r\n      if (type === \"cupola\") return info.isCapstone()\r\n      return base === 3 ? info.isPrismatic() : info.isComposite()\r\n    }\r\n    return true\r\n  },\r\n\r\n  getResult({ specs, geom }, { face, using, gyrate }) {\r\n    const n = face.numSides\r\n    const { type, base } = getUsingData(getUsingOpt(n, using))\r\n    if (specs.isPrismatic()) {\r\n      return Capstone.query.withData({\r\n        count: 1,\r\n        elongation: specs.data.type,\r\n        type,\r\n        base: base as any,\r\n      })\r\n    }\r\n    if (specs.isCapstone()) {\r\n      return specs.withData({\r\n        count: 2,\r\n        gyrate: base === 2 ? \"gyro\" : gyrate,\r\n        type: type === specs.data.type ? type : \"cupolarotunda\",\r\n      })\r\n    }\r\n    if (specs.isComposite()) {\r\n      const { source, augmented, diminished, gyrate: gyrated } = specs.data\r\n      if (source.canonicalName() === \"rhombicosidodecahedron\") {\r\n        if (gyrate === \"ortho\") {\r\n          return specs.withData({\r\n            gyrate: inc(gyrated),\r\n            diminished: dec(diminished),\r\n          })\r\n        } else {\r\n          return specs.withData({ diminished: dec(diminished), align: \"meta\" })\r\n        }\r\n      }\r\n      if (source.canonicalName() === \"icosahedron\") {\r\n        if (base === 3) {\r\n          return specs.withData({ augmented: 1 })\r\n        }\r\n        return specs.withData({ diminished: dec(diminished), align: \"meta\" })\r\n      }\r\n      return specs.withData({\r\n        augmented: inc(augmented),\r\n        align: hasAugmentAlignment(specs)\r\n          ? getAugmentAlignment(geom, face)\r\n          : undefined,\r\n      })\r\n    }\r\n    if (specs.isElementary()) {\r\n      return Elementary.query.withName(\"augmented sphenocorona\")\r\n    }\r\n    throw new Error()\r\n  },\r\n\r\n  hasOptions() {\r\n    return true\r\n  },\r\n\r\n  *allOptionCombos({ specs, geom }) {\r\n    const gyrateOpts = hasGyrateOpts(specs) ? allGyrateOpts : [undefined]\r\n\r\n    const usingOpts = getUsingOpts(specs) ?? [undefined]\r\n    const faceOpts = geom.faces.filter((face) => canAugment(face))\r\n\r\n    for (const face of faceOpts) {\r\n      for (const gyrate of gyrateOpts) {\r\n        for (const using of usingOpts) {\r\n          if (!using || canAugmentWithType(face, using)) {\r\n            yield { gyrate, using, face }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  hitOption: \"face\",\r\n  getHitOption({ geom }, hitPnt, options) {\r\n    if (!options) return {}\r\n    const face = geom.hitFace(hitPnt)\r\n    if (!options.using) {\r\n      return canAugment(face) ? { face } : {}\r\n    }\r\n    if (!canAugmentWithType(face, options.using)) {\r\n      return {}\r\n    }\r\n    return { face }\r\n  },\r\n\r\n  faceSelectionStates({ geom }, { face, using }) {\r\n    return geom.faces.map((f) => {\r\n      if (face && f.equals(face)) return \"selected\"\r\n\r\n      if (!using && canAugment(f)) return \"selectable\"\r\n\r\n      if (using && canAugmentWithType(f, using)) return \"selectable\"\r\n      return undefined\r\n    })\r\n  },\r\n\r\n  allOptions({ specs, geom }, optionName) {\r\n    switch (optionName) {\r\n      case \"gyrate\":\r\n        return hasGyrateOpts(specs) ? allGyrateOpts : []\r\n      case \"using\":\r\n        return getUsingOpts(specs) ?? []\r\n      case \"face\":\r\n        return geom.faces.filter((face) => canAugment(face))\r\n    }\r\n  },\r\n\r\n  defaultOptions(info) {\r\n    const usingOpts = getUsingOpts(info) ?? []\r\n    return pickBy({\r\n      gyrate: hasGyrateOpts(info) && \"gyro\",\r\n      using: usingOpts.length > 1 && usingOpts[0],\r\n    })\r\n  },\r\n})\r\n","import { range } from \"lodash-es\"\r\n\r\nimport Prismatic from \"data/specs/Prismatic\"\r\nimport Elementary from \"data/specs/Elementary\"\r\nimport { mapObject } from \"utils\"\r\nimport {\r\n  getTransformedVertices,\r\n  removeExtraneousVertices,\r\n} from \"../operationUtils\"\r\nimport { makeOperation } from \"../Operation\"\r\nimport { Polyhedron, Cap } from \"math/polyhedra\"\r\nimport {\r\n  inc,\r\n  dec,\r\n  CutPasteSpecs,\r\n  getCapAlignment,\r\n  getCupolaGyrate,\r\n} from \"./cutPasteUtils\"\r\n\r\nfunction removeCap(polyhedron: Polyhedron, cap: Cap) {\r\n  const boundary = cap.boundary()\r\n  const oldToNew = mapObject(boundary.vertices, (vertex, i) => [\r\n    vertex.index,\r\n    i,\r\n  ])\r\n  const mockPolyhedron = polyhedron.withChanges((s) =>\r\n    s\r\n      .addVertices(boundary.vertices)\r\n      .mapFaces((face) => {\r\n        if (face.inSet(cap.faces())) {\r\n          return face\r\n        }\r\n        return face.vertices.map((v) => {\r\n          return v.inSet(boundary.vertices)\r\n            ? polyhedron.numVertices() + oldToNew[v.index]\r\n            : v.index\r\n        })\r\n      })\r\n      .addFaces([\r\n        range(\r\n          polyhedron.numVertices(),\r\n          polyhedron.numVertices() + boundary.numSides,\r\n        ),\r\n      ]),\r\n  )\r\n\r\n  const endVertices = getTransformedVertices(\r\n    [cap],\r\n    () => boundary.centroid(),\r\n    mockPolyhedron.vertices,\r\n  )\r\n\r\n  return {\r\n    animationData: {\r\n      start: mockPolyhedron,\r\n      endVertices,\r\n    },\r\n    result: removeExtraneousVertices(\r\n      polyhedron.withChanges((s) =>\r\n        s.withoutFaces(cap.faces()).addFaces([cap.boundary().vertices]),\r\n      ),\r\n    ),\r\n  }\r\n}\r\n\r\ninterface Options {\r\n  cap: Cap\r\n}\r\nexport const diminish = makeOperation<Options, CutPasteSpecs>(\"diminish\", {\r\n  apply({ geom }, { cap }) {\r\n    return removeCap(geom, cap)\r\n  },\r\n\r\n  canApplyTo(info) {\r\n    if (info.isCapstone()) {\r\n      return !(info.isMono() && info.isShortened())\r\n    }\r\n    if (info.isComposite()) {\r\n      const { source, augmented, diminished, gyrate } = info.data\r\n      if (source.canonicalName() === \"rhombicosidodecahedron\") {\r\n        if (diminished === 2 && gyrate === 0) return !info.isPara()\r\n        return diminished < 3\r\n      }\r\n      if (source.canonicalName() === \"icosahedron\") {\r\n        return (diminished < 3 || augmented === 1) && !info.isPara()\r\n      }\r\n      return augmented > 0\r\n    }\r\n    if (info.isElementary()) {\r\n      return info.canonicalName() === \"augmented sphenocorona\"\r\n    }\r\n    return false\r\n  },\r\n\r\n  isPreferredSpec(info) {\r\n    if (info.canonicalName() === \"gyroelongated pentagonal pyramid\") {\r\n      return info.isComposite()\r\n    }\r\n    return true\r\n  },\r\n\r\n  getResult({ specs, geom }, { cap }) {\r\n    if (specs.isCapstone()) {\r\n      const { count, elongation, base, type } = specs.data\r\n      if (count === 1) {\r\n        return Prismatic.query.withData({\r\n          type: elongation as any,\r\n          base: specs.isPyramid() ? base : ((base * 2) as any),\r\n        })\r\n      } else {\r\n        const capType = cap.type\r\n        return specs.withData({\r\n          count: 1,\r\n          type:\r\n            type === \"cupolarotunda\"\r\n              ? capType === \"rotunda\"\r\n                ? \"cupola\"\r\n                : \"rotunda\"\r\n              : type,\r\n        })\r\n      }\r\n    }\r\n    if (specs.isComposite()) {\r\n      const { source, augmented, diminished, gyrate } = specs.data\r\n      if (source.canonicalName() === \"rhombicosidodecahedron\") {\r\n        const gyration = getCupolaGyrate(cap)\r\n        if (gyration === \"ortho\") {\r\n          // we're just removing a gyrated cap in this case\r\n          return specs.withData({\r\n            gyrate: dec(gyrate),\r\n            diminished: inc(diminished),\r\n          })\r\n        } else {\r\n          return specs.withData({\r\n            diminished: inc(diminished),\r\n            align: specs.isMono() ? getCapAlignment(geom, cap) : undefined,\r\n          })\r\n        }\r\n      }\r\n      if (source.canonicalName() === \"icosahedron\") {\r\n        if (augmented === 1) return specs.withData({ augmented: 0 })\r\n        return specs.withData({\r\n          diminished: inc(diminished),\r\n          align: diminished === 1 ? getCapAlignment(geom, cap) : undefined,\r\n        })\r\n      }\r\n      return specs.withData({\r\n        augmented: dec(augmented),\r\n        align:\r\n          augmented === 3 && source.canonicalName() !== \"triangular prism\"\r\n            ? \"meta\"\r\n            : undefined,\r\n      })\r\n    }\r\n    if (specs.isElementary()) {\r\n      return Elementary.query.withName(\"sphenocorona\")\r\n    }\r\n    throw new Error()\r\n  },\r\n\r\n  hasOptions() {\r\n    return true\r\n  },\r\n\r\n  *allOptionCombos({ geom }) {\r\n    for (const cap of Cap.getAll(geom)) yield { cap }\r\n  },\r\n\r\n  hitOption: \"cap\",\r\n  getHitOption({ geom }, hitPnt) {\r\n    const cap = Cap.find(geom, hitPnt)\r\n    return cap ? { cap } : {}\r\n  },\r\n\r\n  faceSelectionStates({ geom }, { cap }) {\r\n    const allCapFaces = Cap.getAll(geom).flatMap((cap) => cap.faces())\r\n    return geom.faces.map((face) => {\r\n      if (cap instanceof Cap && face.inSet(cap.faces())) return \"selected\"\r\n      if (face.inSet(allCapFaces)) return \"selectable\"\r\n      return undefined\r\n    })\r\n  },\r\n})\r\n","import { withOrigin } from \"math/geom\"\r\nimport { Polyhedron, Cap } from \"math/polyhedra\"\r\nimport { mapObject } from \"utils\"\r\nimport Capstone from \"data/specs/Capstone\"\r\nimport Composite from \"data/specs/Composite\"\r\nimport { inc, dec, getCapAlignment, getCupolaGyrate } from \"./cutPasteUtils\"\r\nimport { getTransformedVertices } from \"../operationUtils\"\r\nimport { makeOperation } from \"../Operation\"\r\n\r\nconst TAU = 2 * Math.PI\r\n\r\ninterface Options {\r\n  cap: Cap\r\n}\r\n\r\nexport function isGyrated(cap: Cap) {\r\n  return getCupolaGyrate(cap) === \"ortho\"\r\n}\r\n\r\nfunction applyGyrate(polyhedron: Polyhedron, { cap }: Options) {\r\n  // get adjacent faces\r\n  const boundary = cap.boundary()\r\n\r\n  // rotate the cupola/rotunda top\r\n  const theta = TAU / boundary.numSides\r\n\r\n  const oldToNew = mapObject(boundary.vertices, (vertex, i) => [\r\n    vertex.index,\r\n    i,\r\n  ])\r\n\r\n  const mockPolyhedron = polyhedron.withChanges((solid) =>\r\n    solid.addVertices(boundary.vertices).mapFaces((face) => {\r\n      if (face.inSet(cap.faces())) {\r\n        return face\r\n      }\r\n      return face.vertices.map((v) => {\r\n        return v.inSet(boundary.vertices)\r\n          ? polyhedron.numVertices() + oldToNew[v.index]\r\n          : v.index\r\n      })\r\n    }),\r\n  )\r\n\r\n  const endVertices = getTransformedVertices(\r\n    [cap],\r\n    (p) =>\r\n      withOrigin(p.normalRay(), (v) =>\r\n        v.getRotatedAroundAxis(p.normal(), theta),\r\n      ),\r\n    mockPolyhedron.vertices,\r\n  )\r\n\r\n  // TODO the animation makes the cupola shrink and expand.\r\n  // Make it not do that.\r\n  return {\r\n    animationData: {\r\n      start: mockPolyhedron,\r\n      endVertices,\r\n    },\r\n  }\r\n}\r\n\r\nexport const gyrate = makeOperation<{ cap: Cap }, Capstone | Composite>(\r\n  \"gyrate\",\r\n  {\r\n    apply({ geom }, options) {\r\n      return applyGyrate(geom, options)\r\n    },\r\n\r\n    canApplyTo(info) {\r\n      if (info.isCapstone()) {\r\n        return info.isBi() && !info.isPyramid() && info.data.base > 2\r\n      }\r\n      if (info.isComposite()) {\r\n        const { source, diminished } = info.data\r\n        if (source.canonicalName() !== \"rhombicosidodecahedron\") return false\r\n        if (diminished === 2) return !info.isPara()\r\n        return diminished < 3\r\n      }\r\n      return false\r\n    },\r\n\r\n    getResult({ specs, geom }, { cap }) {\r\n      if (specs.isCapstone()) {\r\n        const { gyrate } = specs.data\r\n        return specs.withData({ gyrate: gyrate === \"ortho\" ? \"gyro\" : \"ortho\" })\r\n      }\r\n      const { gyrate } = specs.data\r\n      if (isGyrated(cap)) {\r\n        return specs.withData({ gyrate: dec(gyrate), align: \"meta\" })\r\n      } else {\r\n        return specs.withData({\r\n          gyrate: inc(gyrate),\r\n          align: specs.isMono() ? getCapAlignment(geom, cap) : undefined,\r\n        })\r\n      }\r\n    },\r\n\r\n    hasOptions() {\r\n      return true\r\n    },\r\n\r\n    *allOptionCombos({ geom }) {\r\n      for (const cap of Cap.getAll(geom)) yield { cap }\r\n    },\r\n\r\n    hitOption: \"cap\",\r\n    getHitOption({ geom }, hitPnt) {\r\n      const cap = Cap.find(geom, hitPnt)\r\n      return cap ? { cap } : {}\r\n    },\r\n\r\n    faceSelectionStates({ geom }, { cap }) {\r\n      const allCapFaces = Cap.getAll(geom).flatMap((cap) => cap.faces())\r\n      return geom.faces.map((face) => {\r\n        if (cap instanceof Cap && face.inSet(cap.faces())) return \"selected\"\r\n        if (face.inSet(allCapFaces)) return \"selectable\"\r\n        return undefined\r\n      })\r\n    },\r\n  },\r\n)\r\n","import {\r\n  truncate,\r\n  // cotruncate,\r\n  sharpen,\r\n  // cosharpen,\r\n  rectify,\r\n  // unrectify,\r\n} from \"./truncateOps\"\r\nimport { dual, expand, snub, contract, twist } from \"./resizeOps\"\r\nimport { elongate, gyroelongate, shorten, turn } from \"./prismOps\"\r\nimport { augment, diminish, gyrate } from \"./cutPasteOps\"\r\n\r\nexport type { default as Operation, AnimationData } from \"./Operation\"\r\n\r\nexport const operations = {\r\n  dual,\r\n  truncate,\r\n  // cotruncate,\r\n  sharpen,\r\n  // cosharpen,\r\n  rectify,\r\n  // unrectify,\r\n  expand,\r\n  snub,\r\n  contract,\r\n  twist,\r\n  elongate,\r\n  gyroelongate,\r\n  shorten,\r\n  turn,\r\n  augment,\r\n  diminish,\r\n  gyrate,\r\n}\r\n\r\nexport type OpName = keyof typeof operations\r\n","import React from \"react\"\r\nimport { range } from \"lodash-es\"\r\n\r\nconst { PI, sin, cos } = Math\r\nconst TAU = 2 * PI\r\n\r\nexport type Point2D = [number, number]\r\n\r\ninterface PointsProps {\r\n  points: Point2D[]\r\n  [prop: string]: any\r\n}\r\n\r\nfunction joinPoints(points: Point2D[]) {\r\n  return points.map((point) => point.join(\",\")).join(\" \")\r\n}\r\n\r\n// Irregular polygon\r\nexport function PolyShape({ points, ...rest }: PointsProps) {\r\n  return <polygon {...rest} points={joinPoints(points)} />\r\n}\r\n\r\nexport function PolyLine({ points, ...rest }: PointsProps) {\r\n  return <polyline {...rest} points={joinPoints(points)} />\r\n}\r\n\r\ninterface PolygonProps {\r\n  n?: number\r\n  r?: number\r\n  cx?: number\r\n  cy?: number\r\n  a?: number\r\n  [prop: string]: any\r\n}\r\n\r\nexport function polygonPoints({\r\n  n = 3,\r\n  r = 1,\r\n  cx = 0,\r\n  cy = 0,\r\n  a = 0,\r\n}: PolygonProps) {\r\n  return range(n).map<Point2D>((i) => [\r\n    cx + r * cos(TAU * (a / 360 + i / n)),\r\n    cy + r * sin(TAU * (a / 360 + i / n)),\r\n  ])\r\n}\r\n\r\n// Regular polygon\r\nexport function Polygon({\r\n  n = 3,\r\n  r = 1,\r\n  cx = 0,\r\n  cy = 0,\r\n  a = 0,\r\n  ...rest\r\n}: PolygonProps) {\r\n  const points = polygonPoints({ n, r, cx, cy, a })\r\n  return <PolyShape {...rest} points={points} />\r\n}\r\n","import { range } from \"lodash-es\"\r\n\r\nimport React, { memo, ComponentType } from \"react\"\r\nimport { StyleSheet, css } from \"aphrodite/no-important\"\r\n\r\nimport { OpName } from \"math/operations\"\r\nimport { Polygon, PolyLine } from \"components/svg\"\r\nimport { square } from \"styles/common\"\r\nimport { scales } from \"styles\"\r\nconst { sqrt } = Math\r\n\r\ntype SheetDefinition = { [key: string]: {} }\r\n\r\ntype KeyType = string | false\r\n\r\n// TODO usually we would do `useStyle`, but I can't figure out\r\n// how to make it look reasonable. Plus, I'm thinking of redoing these anyway.\r\nfunction makeStyles(inputStyles: SheetDefinition) {\r\n  const styles = StyleSheet.create(inputStyles)\r\n\r\n  return (...keys: KeyType[]) => {\r\n    return css(...keys.map((key) => !!key && styles[key]))\r\n  }\r\n}\r\n\r\nconst color = \"DimGray\"\r\nconst styles = makeStyles({\r\n  operationIcon: square(scales.size[3]),\r\n\r\n  invariant: {\r\n    fill: color,\r\n    stroke: color,\r\n    strokeWidth: 5,\r\n    strokeLinejoin: \"round\",\r\n  },\r\n\r\n  subtracted: {\r\n    fill: \"none\",\r\n    stroke: color,\r\n    strokeWidth: 5,\r\n    strokeDasharray: 10,\r\n  },\r\n\r\n  added: {\r\n    fill: \"none\",\r\n    stroke: color,\r\n    strokeWidth: 5,\r\n    strokeLinejoin: \"round\",\r\n  },\r\n\r\n  changed: {\r\n    fill: \"none\",\r\n    stroke: color,\r\n    strokeWidth: 5,\r\n  },\r\n})\r\n\r\ninterface TruncateIconProps {\r\n  styled: string\r\n  innerSides?: number\r\n  innerScale?: number\r\n  innerAngle?: number\r\n}\r\n\r\nfunction TruncateIcon({\r\n  styled,\r\n  innerSides = 6,\r\n  innerScale = 1 / sqrt(3),\r\n  innerAngle = 0,\r\n}: TruncateIconProps) {\r\n  const center = { cx: 100, cy: 120 }\r\n  const r = 100\r\n  return (\r\n    <>\r\n      <Polygon className={styles(styled)} n={3} r={r} a={-90} {...center} />\r\n      <Polygon\r\n        className={styles(\"invariant\")}\r\n        n={innerSides}\r\n        r={r * innerScale}\r\n        a={innerAngle}\r\n        {...center}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction DualIcon() {\r\n  const center = { cx: 100, cy: 100 }\r\n  const r = 75\r\n  return (\r\n    <>\r\n      <Polygon\r\n        className={styles(\"subtracted\")}\r\n        n={3}\r\n        r={r}\r\n        a={-90}\r\n        {...center}\r\n      />\r\n      <Polygon className={styles(\"added\")} n={3} r={r} a={90} {...center} />\r\n      <Polygon\r\n        className={styles(\"invariant\")}\r\n        n={6}\r\n        r={r / sqrt(3)}\r\n        a={0}\r\n        {...center}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\ninterface ExpandIconRenderProps {\r\n  cx: number\r\n  cy: number\r\n  r: number\r\n  ap: number\r\n  r1: number\r\n  ap1: number\r\n}\r\n\r\ninterface ExpandIconProps {\r\n  styled: string\r\n  render?: ComponentType<ExpandIconRenderProps>\r\n  hollow?: boolean\r\n  innerStyle?: string\r\n  innerAngle?: number\r\n}\r\n\r\nfunction BaseExpandIcon({\r\n  styled,\r\n  render: Renderer = () => null,\r\n  hollow = false,\r\n  innerAngle = 0,\r\n}: ExpandIconProps) {\r\n  const [cx, cy] = [100, 100]\r\n  const r = 80\r\n  const ap = (sqrt(3) * r) / 2\r\n  const r1 = r / sqrt(3)\r\n  const ap1 = r1 / 2\r\n  return (\r\n    <>\r\n      <Polygon className={styles(styled)} n={6} r={r} a={0} cx={cx} cy={cy} />\r\n      <Polygon\r\n        className={styles(hollow ? styled : \"invariant\")}\r\n        n={3}\r\n        r={r1}\r\n        a={innerAngle}\r\n        cx={cx}\r\n        cy={cy}\r\n      />\r\n      <Renderer {...{ cx, cy, r, ap, r1, ap1 }} />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction ExpandIcon({\r\n  styled,\r\n  render: Renderer = () => null,\r\n  innerStyle = styled,\r\n  hollow = false,\r\n}: ExpandIconProps) {\r\n  return (\r\n    <BaseExpandIcon\r\n      styled={styled}\r\n      innerAngle={-90}\r\n      hollow={hollow}\r\n      render={({ cx, cy, r, ap, r1, ap1 }) => (\r\n        <>\r\n          {range(3).map((i) => (\r\n            <PolyLine\r\n              key={i}\r\n              className={styles(innerStyle)}\r\n              transform={`rotate(${i * 120} ${cx} ${cy})`}\r\n              points={[\r\n                [cx - r / 2, cy - ap],\r\n                [cx, cy - r1],\r\n                [cx + r / 2, cy - ap],\r\n              ]}\r\n            />\r\n          ))}\r\n          <Renderer {...{ cx, cy, r, ap, r1, ap1 }} />\r\n        </>\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\ninterface ElongateIconRenderProps {\r\n  cx: number\r\n  cy: number\r\n  r: number\r\n  ap: number\r\n}\r\ninterface ElongateIconProps {\r\n  styled: string\r\n  render?: ComponentType<ElongateIconRenderProps>\r\n}\r\nfunction ElongateIcon({ styled, render: Renderer }: ElongateIconProps) {\r\n  // TODO consolidate with expand\r\n  const [cx, cy] = [100, 100]\r\n  const r = 80\r\n  const ap = (sqrt(3) * r) / 2\r\n  return (\r\n    <>\r\n      <Polygon className={styles(styled)} n={6} r={r} a={90} cx={cx} cy={cy} />\r\n      <PolyLine\r\n        className={styles(\"invariant\")}\r\n        points={[\r\n          [cx - ap, cy - r / 2],\r\n          [cx, cy - r],\r\n          [cx + ap, cy - r / 2],\r\n        ]}\r\n      />\r\n      <PolyLine\r\n        className={styles(\"invariant\")}\r\n        points={[\r\n          [cx - ap, cy + r / 2],\r\n          [cx, cy + r],\r\n          [cx + ap, cy + r / 2],\r\n        ]}\r\n      />\r\n      {Renderer ? (\r\n        <Renderer {...{ cx, cy, r, ap }} />\r\n      ) : (\r\n        <rect\r\n          className={styles(styled)}\r\n          x={cx - r / 2}\r\n          y={cy - r / 2 - 5}\r\n          width={r}\r\n          height={r + 10}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction AugmentIcon({ styled }: { styled: string }) {\r\n  const [cx, cy] = [100, 100]\r\n  const r = 80\r\n  const ap = (sqrt(3) * r) / 2\r\n  return (\r\n    <>\r\n      <Polygon className={styles(styled)} n={6} r={r} a={90} cx={cx} cy={cy} />\r\n      <PolyLine\r\n        className={styles(\"invariant\")}\r\n        points={[\r\n          [cx - ap, cy - r / 2],\r\n          [cx - ap, cy + r / 2],\r\n          [cx, cy + r],\r\n          [cx + ap, cy + r / 2],\r\n          [cx + ap, cy - r / 2],\r\n        ]}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction drawIcon(name: OpName) {\r\n  switch (name) {\r\n    case \"truncate\":\r\n      return <TruncateIcon styled=\"subtracted\" />\r\n    case \"rectify\":\r\n      return (\r\n        <TruncateIcon\r\n          styled=\"subtracted\"\r\n          innerSides={3}\r\n          innerScale={1 / 2}\r\n          innerAngle={90}\r\n        />\r\n      )\r\n    case \"sharpen\":\r\n      return <TruncateIcon styled=\"added\" />\r\n    case \"dual\":\r\n      return <DualIcon />\r\n    case \"expand\": {\r\n      return <ExpandIcon styled=\"added\" />\r\n    }\r\n    case \"snub\": {\r\n      return (\r\n        <BaseExpandIcon\r\n          styled=\"added\"\r\n          hollow={false}\r\n          innerAngle={0}\r\n          render={({ cx, cy, r, ap, ap1 }) => (\r\n            <>\r\n              {range(3).map((i) => (\r\n                <PolyLine\r\n                  key={i}\r\n                  className={styles(\"added\")}\r\n                  transform={`rotate(${i * 120} ${cx} ${cy})`}\r\n                  points={[\r\n                    [cx - ap1, cy - r / 2],\r\n                    [cx - r, cy],\r\n                    [cx - ap1, cy + r / 2],\r\n                    [cx - r / 2, cy + ap],\r\n                  ]}\r\n                />\r\n              ))}\r\n            </>\r\n          )}\r\n        />\r\n      )\r\n    }\r\n    case \"contract\": {\r\n      return <ExpandIcon styled=\"subtracted\" />\r\n    }\r\n    case \"twist\": {\r\n      return (\r\n        <ExpandIcon\r\n          styled=\"changed\"\r\n          innerStyle=\"invariant\"\r\n          render={({ cx, cy, r, ap, ap1 }) => (\r\n            <>\r\n              {range(3).map((i) => (\r\n                <PolyLine\r\n                  key={i}\r\n                  className={styles(\"changed\")}\r\n                  transform={`rotate(${i * 120} ${cx} ${cy})`}\r\n                  points={[\r\n                    [cx - r / 2, cy + ap1],\r\n                    [cx + r / 2, cy + ap],\r\n                  ]}\r\n                />\r\n              ))}\r\n            </>\r\n          )}\r\n        />\r\n      )\r\n    }\r\n\r\n    case \"elongate\":\r\n      return <ElongateIcon styled=\"added\" />\r\n\r\n    case \"gyroelongate\":\r\n      return (\r\n        <ElongateIcon\r\n          styled=\"added\"\r\n          render={({ cx, cy, r, ap }) => (\r\n            <PolyLine\r\n              className={styles(\"added\")}\r\n              points={[\r\n                [cx - ap, cy - r / 2],\r\n                [cx - r / 2, cy + r / 2],\r\n                [cx, cy - r / 2],\r\n                [cx + r / 2, cy + r / 2],\r\n                [cx + ap, cy - r / 2],\r\n              ]}\r\n            />\r\n          )}\r\n        />\r\n      )\r\n\r\n    case \"shorten\":\r\n      return <ElongateIcon styled=\"subtracted\" />\r\n\r\n    case \"turn\":\r\n      return (\r\n        <ElongateIcon\r\n          styled=\"added\"\r\n          render={({ cx, cy, r, ap }) => (\r\n            <PolyLine\r\n              className={styles(\"added\")}\r\n              points={[\r\n                [cx - ap, cy - r / 2],\r\n                [cx - r / 2, cy + r / 2],\r\n                [cx - r / 2, cy - r / 2],\r\n                [cx + r / 2, cy + r / 2],\r\n                [cx + r / 2, cy - r / 2],\r\n                [cx + ap, cy + r / 2],\r\n              ]}\r\n            />\r\n          )}\r\n        />\r\n      )\r\n    case \"augment\":\r\n      return <AugmentIcon styled=\"added\" />\r\n    case \"diminish\":\r\n      return <AugmentIcon styled=\"subtracted\" />\r\n    case \"gyrate\":\r\n      // TODO simplify the ExpandIcon hierarchy\r\n      return (\r\n        <>\r\n          <ExpandIcon styled=\"subtracted\" hollow />\r\n          <g transform=\"rotate(180 100 100)\">\r\n            <ExpandIcon styled=\"added\" hollow />\r\n          </g>\r\n        </>\r\n      )\r\n    default:\r\n      throw new Error(`Unknown operation: ${name}`)\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  name: OpName\r\n}\r\n\r\nexport default memo(function OperationIcon({ name }: Props) {\r\n  return (\r\n    <svg viewBox=\"0 0 200 200\" className={styles(\"operationIcon\")}>\r\n      {drawIcon(name)}\r\n    </svg>\r\n  )\r\n})\r\n","import { uniq } from \"lodash-es\"\r\n\r\nimport React, { memo } from \"react\"\r\n\r\nimport { useStyle, scales } from \"styles\"\r\nimport { media, fonts } from \"styles\"\r\nimport { hover, scroll, square, flexColumn, flexRow } from \"styles/common\"\r\nimport { operations, OpName } from \"math/operations\"\r\nimport {\r\n  useApplyOperation,\r\n  OperationCtx,\r\n  TransitionCtx,\r\n  PolyhedronCtx,\r\n} from \"components/ViewerPage/context\"\r\nimport OperationIcon from \"./OperationIcon\"\r\n\r\nconst opLayout: OpName[][] = [\r\n  [\"truncate\", \"rectify\", \"sharpen\", \"dual\"],\r\n  [\"expand\", \"snub\", \"contract\", \"twist\"],\r\n  [\"elongate\", \"gyroelongate\", \"shorten\", \"turn\"],\r\n  [\"augment\", \"augment\", \"diminish\", \"gyrate\"],\r\n]\r\n\r\nconst opList = uniq(opLayout.flat())\r\n\r\ninterface Props {\r\n  name: OpName\r\n  disabled: boolean\r\n}\r\nconst OpButton = memo(function ({ name, disabled }: Props) {\r\n  const polyhedron = PolyhedronCtx.useState()\r\n  const { operation: currentOp } = OperationCtx.useState()\r\n  const { setOperation, unsetOperation } = OperationCtx.useActions()\r\n  const applyOperation = useApplyOperation()\r\n  const operation = operations[name]\r\n  const isCurrent = !!currentOp && name === currentOp.name\r\n\r\n  const css = useStyle(\r\n    {\r\n      ...flexColumn(\"center\", \"center\"),\r\n      ...hover,\r\n      ...square(\"5rem\"),\r\n      border: isCurrent ? \"2px DarkSlateGray solid\" : \"1px LightGray solid\",\r\n      fontFamily: fonts.verdana,\r\n      fontSize: scales.font[7],\r\n      color: \"DimGray\",\r\n      backgroundColor: \"white\",\r\n\r\n      \":disabled\": { opacity: 0.3 },\r\n      // add spacing since we're displayed in a row\r\n      // TODO can we do this in the parent styling?\r\n      [media.mobile]: {\r\n        \":not(:last-child)\": { marginRight: scales.spacing[2] },\r\n      },\r\n    },\r\n    [isCurrent],\r\n  )\r\n\r\n  const selectOperation = () => {\r\n    if (isCurrent) {\r\n      return unsetOperation()\r\n    }\r\n\r\n    if (!operation.hasOptions(polyhedron)) {\r\n      applyOperation(operation)\r\n    } else {\r\n      setOperation(operation, polyhedron)\r\n    }\r\n  }\r\n  return (\r\n    <button\r\n      {...css()}\r\n      style={{ gridArea: name }}\r\n      onClick={selectOperation}\r\n      disabled={!operation.canApplyTo(polyhedron) || disabled}\r\n    >\r\n      <OperationIcon name={name} />\r\n      {name}\r\n    </button>\r\n  )\r\n})\r\n\r\nconst templateString = opLayout.map((line) => `\"${line.join(\" \")}\"`).join(\"\\n\")\r\n\r\nexport default function OpGrid() {\r\n  const { unsetOperation } = OperationCtx.useActions()\r\n  const { isTransitioning } = TransitionCtx.useState()\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      unsetOperation()\r\n    }\r\n  }, [unsetOperation])\r\n  const css = useStyle({\r\n    [media.notMobile]: {\r\n      display: \"grid\",\r\n      justifyContent: \"space-between\",\r\n      gridColumnGap: scales.spacing[1],\r\n      gridRowGap: scales.spacing[2],\r\n      gridTemplateAreas: templateString,\r\n    },\r\n    [media.mobile]: {\r\n      ...flexRow(),\r\n      ...scroll(\"x\"),\r\n      width: \"100%\",\r\n    },\r\n  })\r\n  return (\r\n    <div {...css()}>\r\n      {opList.map((name) => (\r\n        <OpButton key={name} name={name} disabled={isTransitioning} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React, { ButtonHTMLAttributes } from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { TransitionCtx, PolyhedronCtx } from \"components/ViewerPage/context\"\r\n\r\nimport { Polyhedron } from \"math/polyhedra\"\r\nimport { andaleMono } from \"styles/fonts\"\r\nimport { hover } from \"styles/common\"\r\n\r\nfunction ResetButton(props: ButtonHTMLAttributes<Element>) {\r\n  const css = useStyle({\r\n    ...hover,\r\n    alignSelf: \"flex-end\",\r\n    backgroundColor: \"white\",\r\n    border: \"1px LightGray solid\",\r\n    padding: scales.spacing[2],\r\n    fontSize: scales.font[6],\r\n    fontFamily: andaleMono,\r\n  })\r\n  return <button {...props} {...css()} />\r\n}\r\n\r\nconst buttons = [\r\n  {\r\n    name: \"Recenter\",\r\n    handler: (polyhedron: Polyhedron) => polyhedron.center(),\r\n  },\r\n  {\r\n    name: \"Resize\",\r\n    handler: (polyhedron: Polyhedron) => polyhedron.normalizeToVolume(5),\r\n  },\r\n]\r\n\r\nexport default function ResizeButtons() {\r\n  const polyhedron = PolyhedronCtx.useState()\r\n  const { setPolyhedron } = PolyhedronCtx.useActions()\r\n  const { isTransitioning } = TransitionCtx.useState()\r\n\r\n  const css = useStyle({\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"1fr 1fr\",\r\n    columnGap: scales.spacing[2],\r\n  })\r\n  return (\r\n    <div {...css()}>\r\n      {buttons.map(({ name, handler }) => (\r\n        <ResetButton\r\n          key={name}\r\n          disabled={isTransitioning}\r\n          onClick={() => setPolyhedron(handler(polyhedron))}\r\n        >\r\n          {name}\r\n        </ResetButton>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport Icon from \"@mdi/react\"\r\nimport { mdiRotateLeft, mdiRotateRight } from \"@mdi/js\"\r\n\r\nimport { Twist } from \"types\"\r\nimport { useStyle, scales } from \"styles\"\r\nimport { flexRow, square, flexColumn, hover } from \"styles/common\"\r\nimport { SrOnly } from \"components/common\"\r\nimport { useApplyOperation, TransitionCtx, OperationCtx } from \"../../context\"\r\n\r\nfunction TwistOption({ orientation }: { orientation: Twist }) {\r\n  const { isTransitioning } = TransitionCtx.useState()\r\n  const { operation } = OperationCtx.useState()\r\n  const applyOperation = useApplyOperation()\r\n  const handleClick = useCallback(\r\n    () => applyOperation(operation!, { twist: orientation }),\r\n    [orientation, operation, applyOperation],\r\n  )\r\n\r\n  const css = useStyle({\r\n    ...flexColumn(\"center\", \"center\"),\r\n    ...square(scales.size[3]),\r\n    ...hover,\r\n    border: \"1px LightGray solid\",\r\n    pointerEvents: \"initial\",\r\n    background: \"none\",\r\n  })\r\n  return (\r\n    <button {...css()} disabled={isTransitioning} onClick={handleClick}>\r\n      <Icon\r\n        path={orientation === \"left\" ? mdiRotateLeft : mdiRotateRight}\r\n        rotate={180}\r\n        size={scales.size[3]}\r\n      />\r\n      <SrOnly>{orientation}</SrOnly>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default function TwistOptions() {\r\n  const css = useStyle({\r\n    ...flexRow(\"center\", \"space-between\"),\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  })\r\n  return (\r\n    <div {...css()}>\r\n      <TwistOption orientation=\"left\" />\r\n      <TwistOption orientation=\"right\" />\r\n    </div>\r\n  )\r\n}\r\n","import { take } from \"lodash-es\"\r\n\r\nimport React, { memo } from \"react\"\r\n\r\nimport { useStyle, scales } from \"styles\"\r\nimport {\r\n  Point2D,\r\n  Polygon,\r\n  PolyLine,\r\n  PolyShape,\r\n  polygonPoints,\r\n} from \"components/svg\"\r\nimport { square } from \"styles/common\"\r\n\r\ninterface Props {\r\n  name: string\r\n}\r\n\r\nconst color = \"DimGray\"\r\n\r\nfunction InnerIcon({ name }: Props) {\r\n  const inner = useStyle({\r\n    stroke: color,\r\n    fill: \"none\",\r\n    strokeWidth: 5,\r\n    strokeLinejoin: \"round\",\r\n  })\r\n  const outer = useStyle({\r\n    stroke: color,\r\n    fill: \"none\",\r\n    strokeWidth: 8,\r\n    strokeLinejoin: \"round\",\r\n  })\r\n\r\n  switch (name) {\r\n    case \"ortho\":\r\n      return (\r\n        <>\r\n          <Polygon {...outer()} n={5} cx={100} cy={100} a={90} r={100} />\r\n          <Polygon {...inner()} n={5} cx={100} cy={100} a={90} r={66} />\r\n        </>\r\n      )\r\n    case \"gyro\":\r\n      return (\r\n        <>\r\n          <Polygon {...outer()} n={5} cx={100} cy={100} a={90} r={100} />\r\n          <Polygon {...inner()} n={5} cx={100} cy={100} a={-90} r={66} />\r\n        </>\r\n      )\r\n    case \"pyramid\":\r\n      return (\r\n        <>\r\n          <PolyShape\r\n            {...outer()}\r\n            points={[\r\n              [100, 50],\r\n              [10, 170],\r\n              [190, 170],\r\n            ]}\r\n          />\r\n          <PolyLine\r\n            {...inner()}\r\n            points={[\r\n              [140, 170],\r\n              [100, 50],\r\n              [60, 170],\r\n            ]}\r\n          />\r\n        </>\r\n      )\r\n    case \"fastigium\": {\r\n      const center = 100\r\n      const height = 50\r\n      const topY = center - height\r\n      const bottomY = center + height\r\n      return (\r\n        <>\r\n          <PolyShape\r\n            {...outer()}\r\n            points={[\r\n              [150, topY],\r\n              [50, topY],\r\n              [10, bottomY],\r\n              [190, bottomY],\r\n            ]}\r\n          />\r\n          <PolyLine\r\n            {...inner()}\r\n            points={[\r\n              [150, topY],\r\n              [120, bottomY],\r\n            ]}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    case \"cupola\": {\r\n      const center = 100\r\n      const height = 50\r\n      const topY = center - height\r\n      const bottomY = center + height\r\n      const topWidth = 50\r\n      const bottomWidth = 90\r\n      const topLeftX = center - topWidth\r\n      const topRightX = center + topWidth\r\n      return (\r\n        <>\r\n          <PolyShape\r\n            {...outer()}\r\n            points={[\r\n              [topRightX, topY],\r\n              [topLeftX, topY],\r\n              [center - bottomWidth, bottomY],\r\n              [center + bottomWidth, bottomY],\r\n            ]}\r\n          />\r\n          <PolyLine\r\n            {...inner()}\r\n            points={[\r\n              [topLeftX, topY],\r\n              [topLeftX, bottomY],\r\n              [topRightX, bottomY],\r\n              [topRightX, topY],\r\n            ]}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    case \"rotunda\": {\r\n      const points = take(polygonPoints({ n: 12, cx: 100, cy: 150, r: -90 }), 7)\r\n      const [p1, p2, p3, p4, p5, p6] = points\r\n      const bottomY = p1[1]\r\n      const q1: Point2D = [p3[0], p2[1]]\r\n      const q2: Point2D = [p5[0], p6[1]]\r\n      return (\r\n        <>\r\n          <PolyShape {...outer()} points={points} />\r\n          <PolyShape\r\n            {...inner()}\r\n            points={[[70, bottomY], q1, p4, q2, [130, bottomY]]}\r\n          />\r\n          <PolyLine\r\n            {...inner()}\r\n            points={[p3, q1, [40, bottomY], [160, bottomY], q2, p5]}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    default:\r\n      throw new Error(\"unknown icon type\")\r\n  }\r\n}\r\nexport default memo(function OptionIcon({ name }: Props) {\r\n  const css = useStyle(square(scales.size[2]))\r\n  return (\r\n    <svg viewBox=\"0 0 200 200\" {...css()}>\r\n      <InnerIcon name={name} />\r\n    </svg>\r\n  )\r\n})\r\n","import React, { ButtonHTMLAttributes } from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { PolyhedronCtx, OperationCtx } from \"components/ViewerPage/context\"\r\nimport OptionIcon from \"./OptionIcon\"\r\nimport { verdana } from \"styles/fonts\"\r\nimport { hover, square, flexRow, flexColumn } from \"styles/common\"\r\n\r\nconst getOptionName = (optValue: string) => {\r\n  switch (optValue) {\r\n    case \"U2\":\r\n      return \"fastigium\"\r\n    case \"Y4\":\r\n      return \"pyramid\"\r\n    case \"U5\":\r\n      return \"cupola\"\r\n    case \"R5\":\r\n      return \"rotunda\"\r\n    default:\r\n      return optValue\r\n  }\r\n}\r\n\r\ninterface BtnProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  optValue: string\r\n  selected: boolean\r\n}\r\n\r\nfunction OptionButton({ optValue, selected, ...htmlProps }: BtnProps) {\r\n  const css = useStyle(\r\n    {\r\n      ...hover,\r\n      ...square(scales.size[3]),\r\n      border: selected ? \"2px DarkSlateGray solid\" : \"1px LightGray solid\",\r\n      backgroundColor: \"white\",\r\n      fontFamily: verdana,\r\n    },\r\n    [selected],\r\n  )\r\n  return (\r\n    <button {...htmlProps} {...css()}>\r\n      <OptionIcon name={getOptionName(optValue)} />\r\n      {getOptionName(optValue)}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default function AugmentOptions() {\r\n  const polyhedron = PolyhedronCtx.useState()\r\n  const { operation, options } = OperationCtx.useState()\r\n  const { setOption } = OperationCtx.useActions()\r\n\r\n  const css = useStyle({\r\n    ...flexRow(\"center\", \"space-between\"),\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  })\r\n\r\n  const optionCss = useStyle({\r\n    ...flexColumn(),\r\n    pointerEvents: \"initial\",\r\n  })\r\n\r\n  return (\r\n    <div {...css()}>\r\n      {[\"gyrate\", \"using\"].map((name) => {\r\n        const value = options![name]\r\n        return (\r\n          <div key={name} {...optionCss()}>\r\n            {operation?.allOptions(polyhedron, name).map((optValue) => (\r\n              <OptionButton\r\n                key={optValue}\r\n                optValue={optValue}\r\n                onClick={() => setOption(name, optValue)}\r\n                disabled={!value}\r\n                selected={value === optValue}\r\n              />\r\n            ))}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nimport { OperationCtx } from \"components/ViewerPage/context\"\r\nimport TwistOptions from \"./TwistOptions\"\r\nimport AugmentOptions from \"./AugmentOptions\"\r\n\r\nfunction hasTwist(opName: string) {\r\n  return [\"snub\", \"twist\", \"gyroelongate\", \"shorten\", \"turn\"].includes(opName)\r\n}\r\n\r\nexport default function Options() {\r\n  const { operation } = OperationCtx.useState()\r\n  if (!operation) return null\r\n  if (operation.name === \"augment\") return <AugmentOptions />\r\n  if (hasTwist(operation.name)) return <TwistOptions />\r\n  return null\r\n}\r\n","// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport x3dom from \"exports-loader?x3dom!x3dom\"\r\nexport default x3dom\r\n","import React, { useRef, useEffect } from \"react\"\r\nimport x3dom from \"x3domWrapper\"\r\nimport \"x3dom/x3dom.css\"\r\n\r\nimport { ChildrenProp } from \"types\"\r\nimport { useStyle } from \"styles\"\r\n\r\n// Disable double-clicking to change rotation point\r\nif (x3dom.Viewarea) {\r\n  x3dom.Viewarea.prototype.onDoubleClick = () => {}\r\n}\r\n\r\ninterface Props extends ChildrenProp {\r\n  label: string\r\n}\r\n\r\nexport default function X3dScene({ label, children }: Props) {\r\n  const x3d = useRef<any>(null)\r\n\r\n  useEffect(() => {\r\n    // Reload X3DOM asynchronously so that it tracks the re-created instance\r\n    setTimeout(() => {\r\n      x3dom.reload()\r\n      // X3DOM generates this canvas which isn't controlled by react,\r\n      // so we have to manually fix things\r\n      if (x3d.current) {\r\n        const canvas = x3d.current.querySelector(\"canvas\")\r\n        canvas?.setAttribute(\"tabIndex\", -1)\r\n        canvas?.setAttribute(\"aria-label\", label)\r\n      }\r\n    })\r\n  }, [label])\r\n\r\n  const css = useStyle({\r\n    border: \"none\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  })\r\n\r\n  return (\r\n    <x3d is=\"x3d\" {...css(\"class\")} ref={x3d}>\r\n      <scene is=\"x3d\">\r\n        <viewpoint is=\"x3d\" position=\"0,0,5\" />\r\n        {children}\r\n      </scene>\r\n    </x3d>\r\n  )\r\n}\r\n","import React, { useEffect, useRef, MouseEvent } from \"react\"\r\nimport { isEqual, forEach } from \"lodash-es\"\r\n\r\nimport { Point } from \"types\"\r\nimport { SolidData } from \"math/polyhedra\"\r\n\r\n// Join a list of lists with an inner and outer separator.\r\nfunction joinListOfLists<T>(list: T[][], outerSep: string, innerSep: string) {\r\n  return list.map((elem) => elem.join(innerSep)).join(outerSep)\r\n}\r\n\r\nconst Coordinates = ({ points }: { points: Point[] }) => {\r\n  return (\r\n    <coordinate\r\n      is=\"x3d\"\r\n      data-testid=\"x3d-vertices\"\r\n      point={joinListOfLists(points, \", \", \" \")}\r\n    />\r\n  )\r\n}\r\n\r\n/* Edges */\r\n\r\nconst Edges = ({\r\n  edges = [],\r\n  vertices = [],\r\n}: Pick<SolidData, \"edges\" | \"vertices\">) => {\r\n  return (\r\n    <shape is=\"x3d\">\r\n      <indexedlineset is=\"x3d\" coordindex={joinListOfLists(edges, \" -1 \", \" \")}>\r\n        <Coordinates points={vertices} />\r\n      </indexedlineset>\r\n    </shape>\r\n  )\r\n}\r\n\r\ninterface X3dEvent extends MouseEvent {\r\n  hitPnt: Point\r\n}\r\n\r\ninterface SolidConfig {\r\n  showFaces: boolean\r\n  showEdges: boolean\r\n  showInnerFaces: boolean\r\n  opacity: number\r\n}\r\n\r\ninterface Props {\r\n  value: SolidData\r\n  colors: number[][]\r\n  config?: SolidConfig\r\n  onHover?: (p: Point) => void\r\n  onMouseOut?: () => void\r\n  onClick?: (p: Point) => void\r\n}\r\n\r\nconst defaultConfig = {\r\n  showFaces: true,\r\n  showEdges: true,\r\n  showInnerFaces: true,\r\n  opacity: 0.7,\r\n}\r\n\r\nexport default function X3dPolyhedron({\r\n  value,\r\n  colors,\r\n  config = defaultConfig,\r\n  onHover,\r\n  onMouseOut,\r\n  onClick,\r\n}: Props) {\r\n  const shape = useRef<any>(null)\r\n  const hitPnt = useRef<Point | null>(null)\r\n\r\n  const { vertices, faces, edges } = value\r\n  const { showFaces, showEdges, showInnerFaces, opacity } = config\r\n\r\n  const listeners = {\r\n    mousedown(e: X3dEvent) {\r\n      hitPnt.current = e.hitPnt\r\n    },\r\n    mouseup(e: X3dEvent) {\r\n      if (!isEqual(hitPnt.current, e.hitPnt)) return\r\n      onClick?.(e.hitPnt)\r\n    },\r\n    mousemove(e: X3dEvent) {\r\n      hitPnt.current = e.hitPnt\r\n      onHover?.(e.hitPnt)\r\n    },\r\n    mouseout() {\r\n      onMouseOut?.()\r\n    },\r\n  }\r\n\r\n  useEffect(() => {\r\n    forEach(listeners, (fn, type) => {\r\n      if (shape.current !== null) {\r\n        shape.current.addEventListener(type, fn)\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      forEach(listeners, (fn, type) => {\r\n        // The X3DOM node isn't managed by React so this rule doesn't apply\r\n        // If we store this in a var this causes a type error\r\n        // eslint-disable-next-line\r\n        const shapeNode = shape.current\r\n        if (shapeNode !== null) {\r\n          shapeNode.removeEventListener(type, fn)\r\n        }\r\n      })\r\n    }\r\n  }, [listeners])\r\n\r\n  const colorStr = joinListOfLists(colors, \",\", \" \")\r\n  return (\r\n    <>\r\n      {showFaces && (\r\n        <shape is=\"x3d\" data-testid=\"x3d-shape\" ref={shape}>\r\n          <appearance is=\"x3d\">\r\n            <material is=\"x3d\" transparency={1 - opacity} />\r\n          </appearance>\r\n          <indexedfaceset\r\n            is=\"x3d\"\r\n            data-testid=\"x3d-faces\"\r\n            solid={(!showInnerFaces).toString()}\r\n            colorpervertex=\"false\"\r\n            coordindex={joinListOfLists(faces, \" -1 \", \" \")}\r\n          >\r\n            <Coordinates points={vertices} />\r\n            <color is=\"x3d\" color={colorStr} />\r\n          </indexedfaceset>\r\n        </shape>\r\n      )}\r\n      {showEdges && <Edges edges={edges} vertices={vertices} />}\r\n    </>\r\n  )\r\n}\r\n","import { useMemo } from \"react\"\r\nimport tinycolor from \"tinycolor2\"\r\nimport Config from \"components/ConfigCtx\"\r\nimport { PolyhedronCtx, OperationCtx, TransitionCtx } from \"../../context\"\r\n\r\nfunction toRgb(hex: string) {\r\n  const { r, g, b } = tinycolor(hex).toRgb()\r\n  return [r / 255, g / 255, b / 255]\r\n}\r\n\r\n// Hook that takes data from Polyhedron and Animation states and decides which to use.\r\nexport default function useSolidContext() {\r\n  const { colors } = Config.useState()\r\n  const polyhedron = PolyhedronCtx.useState()\r\n\r\n  const {\r\n    solidData,\r\n    isTransitioning,\r\n    faceColors = [],\r\n  } = TransitionCtx.useState()\r\n  const { operation, options = {} } = OperationCtx.useState()\r\n\r\n  // TODO I'm trying to useMemo here so it's similar to reselect?\r\n  // but is that a bad idea?\r\n\r\n  // Colors when animation is being applied\r\n  const transitionColors = useMemo(\r\n    () =>\r\n      isTransitioning &&\r\n      solidData!.faces.map((face, i) => faceColors[i] || colors[face.length]),\r\n    [solidData, faceColors, colors, isTransitioning],\r\n  )\r\n\r\n  // Colors when in operation mode and hit options are being selected\r\n  const operationColors = useMemo(() => {\r\n    if (!operation) return\r\n    const selectState = operation.faceSelectionStates(polyhedron, options)\r\n    return polyhedron.faces.map((face, i) => {\r\n      switch (selectState[i]) {\r\n        case \"selected\":\r\n          return tinycolor.mix(colors[face.numSides], \"lime\")\r\n        case \"selectable\":\r\n          return tinycolor.mix(colors[face.numSides], \"yellow\", 25)\r\n        default:\r\n          return colors[face.numSides]\r\n      }\r\n    })\r\n  }, [polyhedron, operation, options, colors])\r\n\r\n  const normalizedColors = useMemo(() => {\r\n    const rawColors =\r\n      transitionColors ||\r\n      operationColors ||\r\n      polyhedron.faces.map((f) => colors[f.numSides])\r\n    return rawColors.map(toRgb)\r\n  }, [transitionColors, operationColors, polyhedron, colors])\r\n\r\n  return {\r\n    colors: normalizedColors,\r\n    solidData: isTransitioning ? solidData! : polyhedron.solidData,\r\n  }\r\n}\r\n","import SolidScene from \"./SolidScene\"\r\nexport default SolidScene\r\n","import { pick } from \"lodash-es\"\r\nimport React from \"react\"\r\nimport X3dScene from \"./X3dScene\"\r\nimport X3dPolyhedron from \"./X3dPolyhedron\"\r\n\r\nimport useSolidContext from \"./useSolidContext\"\r\nimport useHitOptions from \"./useHitOptions\"\r\nimport Config from \"components/ConfigCtx\"\r\n\r\nexport default function SolidScene({ label }: { label: string }) {\r\n  const { colors, solidData } = useSolidContext()\r\n  const config = Config.useState()\r\n  const { setHitOption, unsetHitOption, applyWithHitOption } = useHitOptions()\r\n\r\n  return (\r\n    <X3dScene label={label}>\r\n      <X3dPolyhedron\r\n        value={solidData}\r\n        colors={colors}\r\n        config={pick(config, [\r\n          \"showFaces\",\r\n          \"showEdges\",\r\n          \"showInnerFaces\",\r\n          \"opacity\",\r\n        ])}\r\n        onHover={setHitOption}\r\n        onMouseOut={unsetHitOption}\r\n        onClick={applyWithHitOption}\r\n      />\r\n    </X3dScene>\r\n  )\r\n}\r\n","import { isEmpty, isEqual } from \"lodash-es\"\r\n\r\nimport { Point } from \"types\"\r\nimport { Cap } from \"math/polyhedra\"\r\nimport {\r\n  PolyhedronCtx,\r\n  OperationCtx,\r\n  TransitionCtx,\r\n  useApplyOperation,\r\n} from \"../../context\"\r\n\r\nexport default function useHitOptions() {\r\n  const polyhedron = PolyhedronCtx.useState()\r\n  const { isTransitioning } = TransitionCtx.useState()\r\n  const { operation, options = {} } = OperationCtx.useState()\r\n  const { setOption } = OperationCtx.useActions()\r\n  const applyOperation = useApplyOperation()\r\n  const { hitOption = \"\" } = operation ?? {}\r\n\r\n  const setHitOption = (hitPnt: Point) => {\r\n    if (!operation || isTransitioning) return\r\n    const newHitOptions = operation.getHitOption(polyhedron, hitPnt, options)\r\n    if (isEmpty(newHitOptions)) {\r\n      return setOption(hitOption, undefined)\r\n    }\r\n    const newValue = newHitOptions[hitOption]\r\n    if (!isEqual(options[hitOption], newValue)) {\r\n      setOption(hitOption, newValue)\r\n    }\r\n  }\r\n\r\n  const unsetHitOption = () => {\r\n    if (!operation) return\r\n    setOption(hitOption, undefined)\r\n  }\r\n\r\n  const applyWithHitOption = (hitPnt: Point) => {\r\n    if (!operation || isTransitioning) return\r\n    const newHitOptions = operation.getHitOption(polyhedron, hitPnt, options)\r\n    const newValue = newHitOptions[hitOption]\r\n    // only apply operation if we have a hit\r\n    if (options && newValue) {\r\n      applyOperation(\r\n        operation,\r\n        { ...options, [hitOption]: newValue },\r\n        (result) => {\r\n          // If we're still on a cap, select it\r\n          if (hitOption === \"cap\" && options[hitOption]) {\r\n            setOption(\"cap\", Cap.find(result, options[hitOption].topPoint))\r\n          }\r\n        },\r\n      )\r\n    }\r\n  }\r\n  return { setHitOption, unsetHitOption, applyWithHitOption }\r\n}\r\n","import React from \"react\"\r\nimport { NavLink, NavLinkProps } from \"react-router-dom\"\r\nimport { useStyle, scales } from \"styles\"\r\nimport Icon from \"@mdi/react\"\r\n\r\nimport { media, fonts } from \"styles\"\r\nimport { SrOnly } from \"components/common\"\r\nimport { colorFill, flexColumn } from \"styles/common\"\r\n\r\ninterface Props extends NavLinkProps {\r\n  iconName: string\r\n  iconOnly?: boolean\r\n  title: string\r\n}\r\n\r\nfunction LinkText({ text, hidden }: { text: string; hidden: boolean }) {\r\n  const css = useStyle({\r\n    marginTop: scales.spacing[1],\r\n    fontSize: scales.font[7],\r\n    fontFamily: fonts.verdana,\r\n\r\n    [media.mobileLandscape]: {\r\n      marginTop: 0,\r\n      paddingLeft: scales.spacing[1],\r\n    },\r\n  })\r\n  return hidden ? <SrOnly>{text}</SrOnly> : <div {...css()}>{text}</div>\r\n}\r\n\r\nexport default function IconLink({\r\n  iconName,\r\n  title,\r\n  to,\r\n  replace,\r\n  onClick,\r\n  iconOnly = false,\r\n}: Props) {\r\n  const css = useStyle({\r\n    ...flexColumn(\"center\"),\r\n    ...colorFill(\"DimGray\"),\r\n    textDecoration: \"none\",\r\n    padding: scales.spacing[2],\r\n\r\n    [media.mobileLandscape]: {\r\n      padding: 0,\r\n      flexDirection: \"row\",\r\n    },\r\n  })\r\n\r\n  const activeCss = useStyle(colorFill(\"DarkSlateGray\"))\r\n\r\n  return (\r\n    <NavLink\r\n      to={to}\r\n      replace={replace}\r\n      {...css()}\r\n      {...activeCss(\"activeClassName\")}\r\n      onClick={onClick}\r\n    >\r\n      <Icon path={iconName} size={scales.size[2]} />\r\n      <LinkText text={title} hidden={iconOnly} />\r\n    </NavLink>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { mdiChevronLeft } from \"@mdi/js\"\r\nimport { escape } from \"utils\"\r\n\r\nimport IconLink from \"./IconLink\"\r\n\r\ninterface Props {\r\n  solid: string\r\n}\r\n\r\nexport default function BackLink({ solid }: Props) {\r\n  return (\r\n    <IconLink\r\n      iconOnly\r\n      iconName={mdiChevronLeft}\r\n      title=\"Back\"\r\n      to={`/#${escape(solid)}`}\r\n    />\r\n  )\r\n}\r\n","import { capitalize } from \"lodash-es\"\r\nimport React from \"react\"\r\nimport {\r\n  mdiFormatListBulleted,\r\n  mdiInformationOutline,\r\n  mdiCog,\r\n  mdiMathCompass,\r\n  mdiCubeOutline,\r\n} from \"@mdi/js\"\r\n\r\nimport { useStyle } from \"styles\"\r\nimport IconLink from \"./IconLink\"\r\n\r\ninterface Props {\r\n  compact?: boolean\r\n  onClick(): void\r\n}\r\n\r\nconst links = [\r\n  { name: \"list\", icon: mdiFormatListBulleted },\r\n  { name: \"info\", icon: mdiInformationOutline },\r\n  { name: \"options\", icon: mdiCog },\r\n  { name: \"operations\", icon: mdiMathCompass },\r\n  { name: \"full\", title: \"Fullscreen\", icon: mdiCubeOutline },\r\n]\r\n\r\nexport default function NavMenu({ compact = false, onClick }: Props) {\r\n  const css = useStyle({\r\n    // Using grid here bc it's easier to get evenly spaced than flex\r\n    display: \"grid\",\r\n    gridTemplateColumns: `repeat(${links.length}, 1fr)`,\r\n    justifyItems: \"center\",\r\n    width: \"100%\",\r\n  })\r\n\r\n  return (\r\n    <nav {...css()}>\r\n      {links.map(({ name, title = name, icon }) => (\r\n        <IconLink\r\n          key={name}\r\n          replace\r\n          to={`../${name}`}\r\n          title={capitalize(title)}\r\n          iconName={icon}\r\n          iconOnly={compact}\r\n          onClick={onClick}\r\n        />\r\n      ))}\r\n    </nav>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Icon from \"@mdi/react\"\r\n\r\nimport { useStyle, scales } from \"styles\"\r\nimport { SrOnly } from \"components/common\"\r\nimport { fonts } from \"styles\"\r\n\r\nimport { SolidData } from \"math/polyhedra\"\r\nimport { hover } from \"styles/common\"\r\nimport { mdiDownload } from \"@mdi/js\"\r\n\r\nfunction formatDecimal(number: number) {\r\n  return Number.isInteger(number) ? `${number}.0` : number\r\n}\r\n\r\nfunction vToObj(vertex: number[]) {\r\n  return \"v \" + vertex.map(formatDecimal).join(\" \")\r\n}\r\n\r\nfunction fToObj(face: number[]) {\r\n  return \"f \" + face.map((i) => i + 1).join(\" \")\r\n}\r\n\r\nfunction toObj({ vertices, faces }: SolidData) {\r\n  const vObj = vertices.map(vToObj)\r\n  const fObj = faces.map(fToObj)\r\n  return vObj.concat(fObj).join(\"\\n\")\r\n}\r\n\r\nconst fileFormats = [\r\n  {\r\n    ext: \"json\",\r\n    serializer: JSON.stringify,\r\n  },\r\n  {\r\n    ext: \"obj\",\r\n    serializer: toObj,\r\n  },\r\n]\r\n\r\ninterface Props {\r\n  solid: SolidData\r\n}\r\n\r\nfunction DownloadLink({\r\n  ext,\r\n  serializer,\r\n  solid,\r\n}: typeof fileFormats[0] & Props) {\r\n  const filename = `${solid.name}.${ext}`\r\n  const blob = new Blob([serializer(solid)], {\r\n    type: \"text/plain;charset=utf-8\",\r\n  })\r\n  const url = window.URL.createObjectURL(blob)\r\n\r\n  const css = useStyle({\r\n    display: \"inline-flex\",\r\n    justifyContent: \"center\",\r\n    padding: scales.spacing[2],\r\n    width: scales.size[4],\r\n\r\n    textDecoration: \"none\",\r\n    border: \"1px LightGray solid\",\r\n    color: \"black\",\r\n    fontFamily: fonts.andaleMono,\r\n    ...hover,\r\n\r\n    \":not(:last-child)\": {\r\n      marginRight: scales.spacing[2],\r\n    },\r\n  })\r\n\r\n  return (\r\n    <a {...css()} key={ext} download={filename} href={url}>\r\n      <SrOnly>Download as</SrOnly>.{ext}{\" \"}\r\n      <span>\r\n        <Icon path={mdiDownload} size={scales.size[1]} />\r\n      </span>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default function DataDownloader({ solid }: Props) {\r\n  const heading = useStyle({\r\n    fontFamily: fonts.times,\r\n    fontSize: scales.font[4],\r\n    marginBottom: scales.spacing[2],\r\n  })\r\n  return (\r\n    <div>\r\n      <h2 {...heading()}>Download model</h2>\r\n      <div>\r\n        {fileFormats.map((format) => (\r\n          <DownloadLink key={format.ext} {...format} solid={solid} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { capitalize, map } from \"lodash-es\"\r\nimport { ChildrenProp } from \"types\"\r\nimport { polygonNames } from \"data/polygons\"\r\nimport PolyhedronSpecs from \"data/specs/PolyhedronSpecs\"\r\nimport { Polyhedron } from \"math/polyhedra\"\r\nimport { useStyle } from \"styles\"\r\n\r\nexport function Sub({ children }: ChildrenProp) {\r\n  const css = useStyle({\r\n    verticalAlign: \"sub\",\r\n    fontSize: \"smaller\",\r\n  })\r\n  return <sub {...css()}>{children}</sub>\r\n}\r\n\r\nexport function Sup({ children }: ChildrenProp<number>) {\r\n  if (typeof children === \"undefined\") {\r\n    throw new Error(\"undefined child\")\r\n  }\r\n  if (children < 0 || children > 5) {\r\n    throw new Error(\"Number not supported\")\r\n  }\r\n  const value = (() => {\r\n    switch (children) {\r\n      case 1:\r\n        return <>&#x00B9;</>\r\n      case 2:\r\n        return <>&#x00B2;</>\r\n      case 3:\r\n        return <>&#x00B3;</>\r\n      case 4:\r\n        return <>&#x2074;</>\r\n      case 5:\r\n        return <>&#x2075;</>\r\n      default:\r\n        return children\r\n    }\r\n  })()\r\n  const css = useStyle({ fontSize: 20 })\r\n  return <sup {...css()}>{value}</sup>\r\n}\r\n\r\nfunction* groupedVertexConfig(config: string) {\r\n  const array = config.split(\".\")\r\n  let current = { type: \"\", count: 0 }\r\n  for (const type of array) {\r\n    if (type === current.type) {\r\n      current.count++\r\n    } else {\r\n      if (current.count) yield current\r\n      current = { type, count: 1 }\r\n    }\r\n  }\r\n  if (current.count) yield current\r\n}\r\n\r\nfunction getShortVertexConfig(config: string) {\r\n  const grouped = [...groupedVertexConfig(config)]\r\n  const children = grouped.map((typeCount, i) => {\r\n    const { type, count } = typeCount\r\n    const val =\r\n      count === 1 ? (\r\n        type\r\n      ) : (\r\n        <>\r\n          {type}\r\n          <Sup>{count}</Sup>\r\n        </>\r\n      )\r\n    if (i === 0) return val\r\n    return <>.{val}</>\r\n  })\r\n  return <>{children}</>\r\n}\r\n\r\nexport interface RenderProps {\r\n  polyhedron: Polyhedron\r\n  info: PolyhedronSpecs\r\n}\r\n\r\nexport function displayVertexConfig({ polyhedron }: RenderProps) {\r\n  const vConfig = polyhedron.vertexConfiguration()\r\n  const configKeys = Object.keys(vConfig)\r\n  // When there's only one type, just get it on its own\r\n  if (configKeys.length === 1) return <>{configKeys[0]}</>\r\n  return (\r\n    <ul>\r\n      {map(vConfig, (count, type) => (\r\n        <li key={type}>\r\n          {count}({getShortVertexConfig(type)})\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport function displayFaceTypes({ polyhedron }: RenderProps) {\r\n  const faceCounts = polyhedron.numFacesBySides()\r\n  // TODO verify order by type of face\r\n  return (\r\n    <ul>\r\n      {map(faceCounts, (count, type) => (\r\n        <li key={type}>\r\n          {count} {polygonNames.get(parseInt(type) as any)}\r\n          {count !== 1 ? \"s\" : \"\"}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport function displaySymmetry({ info }: RenderProps) {\r\n  const { base, sub } = info.symmetry().symbol()\r\n  const symName = info.symmetry().name()\r\n  return (\r\n    <>\r\n      {capitalize(symName)}, {base}\r\n      {sub ? <Sub>{sub}</Sub> : undefined}\r\n    </>\r\n  )\r\n}\r\n\r\ninterface Properties {\r\n  name: string\r\n  check(info: PolyhedronSpecs, p: Polyhedron): boolean\r\n}\r\n\r\nconst properties: Properties[] = [\r\n  { name: \"deltahedron\", check: (_, p) => p.isDeltahedron() },\r\n  { name: \"chiral\", check: (info) => info.isChiral() },\r\n  { name: \"honeycomb\", check: (info) => info.isHoneycomb() },\r\n]\r\n\r\nexport function displayProperties({ info, polyhedron }: RenderProps) {\r\n  const filteredProps = properties.filter((property) =>\r\n    property.check(info, polyhedron),\r\n  )\r\n\r\n  return <>{filteredProps.map((prop) => prop.name).join(\", \") || \"--\"}</>\r\n}\r\n","import React, { ComponentType } from \"react\"\r\nimport { round } from \"lodash-es\"\r\nimport { useStyle, scales } from \"styles\"\r\nimport { fonts } from \"styles\"\r\n\r\nimport {\r\n  Sup,\r\n  RenderProps,\r\n  displayFaceTypes,\r\n  displayVertexConfig,\r\n  displaySymmetry,\r\n  displayProperties,\r\n} from \"./renderFuncs\"\r\n\r\ninterface InfoRow {\r\n  name: string\r\n  area: string\r\n  render: ComponentType<RenderProps>\r\n}\r\n\r\nconst infoRows: InfoRow[] = [\r\n  {\r\n    name: \"Vertices\",\r\n    area: \"verts\",\r\n    render: ({ polyhedron }) => <>{polyhedron.numVertices()}</>,\r\n  },\r\n  {\r\n    name: \"Edges\",\r\n    area: \"edges\",\r\n    render: ({ polyhedron }) => <>{polyhedron.numEdges()}</>,\r\n  },\r\n  {\r\n    name: \"Faces\",\r\n    area: \"faces\",\r\n    render: ({ polyhedron }) => <>{polyhedron.numFaces()}</>,\r\n  },\r\n  {\r\n    name: \"Vertex configuration\",\r\n    area: \"vconf\",\r\n    render: displayVertexConfig,\r\n  },\r\n  {\r\n    name: \"Faces by type\",\r\n    area: \"ftype\",\r\n    render: displayFaceTypes,\r\n  },\r\n\r\n  {\r\n    name: \"Volume\",\r\n    area: \"vol\",\r\n    render: ({ polyhedron: p }) => (\r\n      <>\r\n        ≈{round(p.normalizedVolume(), 3)}s<Sup>{3}</Sup>\r\n      </>\r\n    ),\r\n  },\r\n  {\r\n    name: \"Surface area\",\r\n    area: \"sa\",\r\n    render: ({ polyhedron: p }) => (\r\n      <>\r\n        ≈{round(p.normalizedSurfaceArea(), 3)}s<Sup>{2}</Sup>\r\n      </>\r\n    ),\r\n  },\r\n  {\r\n    name: \"Sphericity\",\r\n    area: \"spher\",\r\n    render: ({ polyhedron: p }) => <>≈{round(p.sphericity(), 3)}</>,\r\n  },\r\n\r\n  { name: \"Symmetry\", area: \"sym\", render: displaySymmetry },\r\n  {\r\n    name: \"Order\",\r\n    area: \"order\",\r\n    render: ({ info }) => <>{info.symmetry().order()}</>,\r\n  },\r\n  {\r\n    name: \"Properties\",\r\n    area: \"props\",\r\n    render: displayProperties,\r\n  },\r\n  {\r\n    name: \"Also known as\",\r\n    area: \"alt\",\r\n    render: ({ info }: RenderProps) => {\r\n      const alts = info.alternateNames()\r\n      if (alts.length === 0) return <>--</>\r\n      return (\r\n        <ul>\r\n          {alts.map((alt) => (\r\n            <li key={alt}>{alt}</li>\r\n          ))}\r\n        </ul>\r\n      )\r\n    },\r\n  },\r\n]\r\n\r\nfunction Datum({\r\n  info,\r\n  polyhedron,\r\n  name,\r\n  area,\r\n  render: Renderer,\r\n}: InfoRow & RenderProps) {\r\n  const css = useStyle({ marginBottom: 10 })\r\n  const nameCss = useStyle({\r\n    fontSize: scales.font[5],\r\n    marginBottom: scales.spacing[1],\r\n  })\r\n  const valueCss = useStyle({\r\n    fontFamily: fonts.andaleMono,\r\n    color: \"DimGrey\",\r\n  })\r\n\r\n  return (\r\n    <div {...css()} style={{ gridArea: area }}>\r\n      <dd {...nameCss()}>{name}</dd>\r\n      <dt {...valueCss()}>\r\n        <Renderer polyhedron={polyhedron} info={info} />\r\n      </dt>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function DataList(props: RenderProps) {\r\n  const css = useStyle({\r\n    display: \"grid\",\r\n    gridTemplateAreas: `\r\n      \"verts verts edges edges faces faces\"\r\n      \"vconf vconf vconf ftype ftype ftype\"\r\n      \"vol   vol   sa    sa    spher spher\"\r\n      \"sym   sym   sym   sym   order order\"\r\n      \"props props props props props props\"\r\n      \"alt   alt   alt   alt   alt   alt\"\r\n    `,\r\n    gridRowGap: scales.spacing[2],\r\n  })\r\n\r\n  return (\r\n    <dl {...css()}>\r\n      {infoRows.map((rowProps) => (\r\n        <Datum key={rowProps.name} {...rowProps} {...props} />\r\n      ))}\r\n    </dl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useStyle, scales, media } from \"styles\"\r\nimport { capitalize } from \"lodash-es\"\r\n\r\nimport { fonts } from \"styles\"\r\n\r\nimport getSpecs from \"data/specs/getSpecs\"\r\nimport { PolyhedronCtx } from \"components/ViewerPage/context\"\r\nimport DataDownloader from \"../DataDownloader\"\r\nimport { flexColumn } from \"styles/common\"\r\n\r\nimport { RenderProps } from \"./renderFuncs\"\r\nimport DataList from \"./DataList\"\r\n\r\nfunction Heading({ info }: RenderProps) {\r\n  const css = useStyle({\r\n    fontSize: scales.font[3],\r\n    marginBottom: scales.spacing[1],\r\n    lineHeight: 1.25,\r\n  })\r\n  return (\r\n    <h2 {...css()}>\r\n      {capitalize(info.canonicalName())} | {info.conwaySymbol()}\r\n    </h2>\r\n  )\r\n}\r\n\r\nexport default function InfoPanel() {\r\n  const polyhedron = PolyhedronCtx.useState()\r\n\r\n  const css = useStyle({\r\n    ...flexColumn(),\r\n    borderSpacing: 8,\r\n    borderCollapse: \"separate\",\r\n    padding: scales.spacing[3],\r\n    fontFamily: fonts.times,\r\n\r\n    // On non-mobile, display the download links on the bottom\r\n    [media.notMobile]: { height: \"100%\" },\r\n  })\r\n\r\n  const typeCss = useStyle({\r\n    fontSize: scales.font[5],\r\n    color: \"DimGrey\",\r\n    marginBottom: scales.spacing[3],\r\n  })\r\n\r\n  const downloaderCss = useStyle({\r\n    [media.mobile]: { marginTop: scales.spacing[4] },\r\n    [media.notMobile]: { marginTop: \"auto\" },\r\n  })\r\n\r\n  const info = getSpecs(polyhedron.name)\r\n\r\n  return (\r\n    <div {...css()}>\r\n      <Heading polyhedron={polyhedron} info={info} />\r\n      <p {...typeCss()}>{info.group()}</p>\r\n      <DataList polyhedron={polyhedron} info={info} />\r\n      <div {...downloaderCss()}>\r\n        <DataDownloader solid={polyhedron.solidData} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { memo, useCallback, ButtonHTMLAttributes } from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\nimport { get, pick } from \"lodash-es\"\r\n\r\nimport Config from \"components/ConfigCtx\"\r\nimport {\r\n  configInputs,\r\n  ConfigInput as InputType,\r\n} from \"components/configOptions\"\r\nimport { hover, flexRow, flexColumn } from \"styles/common\"\r\nimport { andaleMono } from \"styles/fonts\"\r\n\r\nfunction getInputValue<T>(input: InputType<T>, el: HTMLInputElement) {\r\n  switch (input.type) {\r\n    case \"checkbox\":\r\n      return el.checked\r\n    default:\r\n      return el.value\r\n  }\r\n}\r\n\r\nfunction getInputProps<T>(input: InputType<T>, value: T) {\r\n  switch (input.type) {\r\n    case \"checkbox\":\r\n      return { checked: value }\r\n    case \"range\":\r\n      return {\r\n        ...pick(input, [\"min\", \"max\", \"step\"]),\r\n        value,\r\n      }\r\n    default:\r\n      return { value }\r\n  }\r\n}\r\n\r\ninterface InputProps<T> {\r\n  input: InputType<T>\r\n  value: T\r\n  setValue(key: string, value: T): void\r\n}\r\n\r\nfunction ConfigInput({ input, value, setValue }: InputProps<any>) {\r\n  const inputProps = getInputProps(input, value)\r\n  const onChange = useCallback(\r\n    (e) => setValue(input.key, getInputValue(input, e.target)),\r\n    [input, setValue],\r\n  )\r\n  switch (input.type) {\r\n    case \"select\":\r\n      return (\r\n        <select onChange={onChange} {...inputProps}>\r\n          {input.options?.map((option) => (\r\n            <option key={option} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )\r\n    default:\r\n      return <input type={input.type} onChange={onChange} {...inputProps} />\r\n  }\r\n}\r\n\r\nconst LabelledInput = memo(({ input, value, setValue }: InputProps<any>) => {\r\n  const css = useStyle({\r\n    ...flexRow(undefined, \"space-between\"),\r\n    width: \"100%\",\r\n    fontFamily: andaleMono,\r\n    \":not(:last-child)\": {\r\n      marginBottom: scales.spacing[3],\r\n    },\r\n  })\r\n  return (\r\n    <label {...css()}>\r\n      {input.display}\r\n      <ConfigInput input={input} value={value} setValue={setValue} />\r\n    </label>\r\n  )\r\n})\r\n\r\nfunction ResetButton({ onClick }: ButtonHTMLAttributes<Element>) {\r\n  const css = useStyle({\r\n    ...hover,\r\n\r\n    width: 120,\r\n    height: 30,\r\n    marginTop: scales.spacing[3],\r\n\r\n    border: \"1px LightGray solid\",\r\n\r\n    fontFamily: andaleMono,\r\n    fontSize: scales.font[6],\r\n  })\r\n  return (\r\n    <button {...css()} type=\"button\" onClick={onClick}>\r\n      Reset\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default function ConfigForm() {\r\n  const config = Config.useState()\r\n  const { setValue, reset } = Config.useActions()\r\n\r\n  const css = useStyle({\r\n    ...flexColumn(\"flex-end\"),\r\n    width: \"100%\",\r\n    padding: scales.spacing[3],\r\n  })\r\n  return (\r\n    <form {...css()}>\r\n      {configInputs.map((input) => (\r\n        <LabelledInput\r\n          key={input.key}\r\n          input={input}\r\n          value={get(config, input.key)}\r\n          setValue={setValue}\r\n        />\r\n      ))}\r\n      <ResetButton onClick={reset} />\r\n    </form>\r\n  )\r\n}\r\n","import { getPolyhedraNames } from \"./common\"\r\n\r\nconst uniformData = [\r\n  { name: \"platonic\", display: \"Platonic Solids\" },\r\n  { name: \"archimedean\", display: \"Archimedean Solids\" },\r\n  { name: \"prisms\", display: \"Prisms\" },\r\n  { name: \"antiprisms\", display: \"Antiprisms\" },\r\n]\r\n\r\nconst johnsonSubgroups = [\r\n  { name: \"pyramids\", index: 0 },\r\n  { name: \"cupolæ and rotunda\", index: 2 },\r\n  { name: \"elongated pyramids\", index: 6 },\r\n  { name: \"gyroelongated pyramids\", index: 9 },\r\n  { name: \"bipyramids\", index: 11 },\r\n  { name: \"elongated cupolæ / rotundæ\", index: 17 },\r\n  { name: \"gyroelongated cupolæ / rotundæ\", index: 21 },\r\n  { name: \"bicupolæ / rotundæ\", index: 25 },\r\n  { name: \"elongated bicupolæ / rotundæ\", index: 34 },\r\n  {\r\n    name: \"gyroelongated bicupolæ / rotundæ\",\r\n    index: 43,\r\n  },\r\n  { name: \"augmented prisms\", index: 48 },\r\n  { name: \"augmented dodecahedra\", index: 57 },\r\n  { name: \"diminished icosahedra\", index: 61 },\r\n  {\r\n    name: \"augmented Archimedean solids\",\r\n    index: 64,\r\n  },\r\n  { name: \"gyrate rhombicosidodecahedra\", index: 71 },\r\n  { name: \"diminished rhombicosidodecahedra\", index: 75 },\r\n  { name: \"snub antiprisms\", index: 83 },\r\n  { name: \"others\", index: 85 },\r\n]\r\n\r\nexport interface PolyhedronSubgroup {\r\n  name: string\r\n  polyhedra: string[]\r\n}\r\n\r\nexport interface PolyhedronGroup {\r\n  name: string\r\n  groups: PolyhedronSubgroup[]\r\n}\r\n\r\nfunction getUniformPolyhedra(): PolyhedronSubgroup[] {\r\n  return uniformData.map(({ name, display }) => ({\r\n    name: display,\r\n    polyhedra: getPolyhedraNames(name),\r\n  }))\r\n}\r\n\r\nfunction getEndIndex(i: number) {\r\n  return i === johnsonSubgroups.length - 1 ? 92 : johnsonSubgroups[i + 1].index\r\n}\r\n\r\nfunction getJohnsonPolyhedra(): PolyhedronSubgroup[] {\r\n  return johnsonSubgroups.map(({ name, index }, i) => ({\r\n    name,\r\n    polyhedra: getPolyhedraNames(\"johnson\").slice(index, getEndIndex(i)),\r\n  }))\r\n}\r\n\r\nexport const groups: PolyhedronGroup[] = [\r\n  { name: \"Uniform Polyhedra\", groups: getUniformPolyhedra() },\r\n  { name: \"Johnson Solids\", groups: getJohnsonPolyhedra() },\r\n]\r\n","import React, { memo, useState, InputHTMLAttributes } from \"react\"\r\nimport Icon from \"@mdi/react\"\r\nimport { mdiMagnify } from \"@mdi/js\"\r\n\r\nimport { useStyle, scales } from \"styles\"\r\nimport { andaleMono } from \"styles/fonts\"\r\nimport { flexRow } from \"styles/common\"\r\n\r\nconst duration = \"0.35s\"\r\n\r\nfunction SearchIcon({ focused }: { focused: boolean }) {\r\n  const css = useStyle(\r\n    {\r\n      transition: `fill ${duration}`,\r\n      position: \"absolute\",\r\n      // TODO This is kinda jank but I'm too lazy to fix it for a not useful feature\r\n      paddingLeft: 8,\r\n      paddingTop: 2,\r\n      fill: focused ? \"Gray\" : \"LightGray\",\r\n    },\r\n    [focused],\r\n  )\r\n  return (\r\n    <span {...css()}>\r\n      <Icon path={mdiMagnify} size={scales.size[1]} />\r\n    </span>\r\n  )\r\n}\r\n\r\nfunction SearchInput(props: InputHTMLAttributes<HTMLInputElement>) {\r\n  const css = useStyle({\r\n    transition: `border-color ${duration}`,\r\n    width: \"100%\",\r\n    height: scales.size[2],\r\n    paddingLeft: scales.spacing[4],\r\n\r\n    border: \"2px LightGray solid\",\r\n    borderRadius: 9999,\r\n\r\n    fontSize: scales.font[6],\r\n    fontFamily: andaleMono,\r\n\r\n    \":focus\": {\r\n      outline: \"none\",\r\n      borderColor: \"Gray\",\r\n      fill: \"Gray\",\r\n    },\r\n  })\r\n  return (\r\n    <input\r\n      {...props}\r\n      {...css()}\r\n      type=\"text\"\r\n      placeholder=\"Search...\"\r\n      aria-label=\"search\"\r\n    />\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  value: string\r\n  onChange(value: string): void\r\n}\r\nexport default memo(function SearchBar({ value, onChange }: Props) {\r\n  const [isFocused, setFocus] = useState(false)\r\n\r\n  const css = useStyle({\r\n    ...flexRow(\"center\"),\r\n    padding: scales.spacing[2],\r\n    width: \"100%\",\r\n    position: \"relative\",\r\n  })\r\n  return (\r\n    <label {...css()}>\r\n      <SearchInput\r\n        value={value}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        onFocus={() => setFocus(true)}\r\n        onBlur={() => setFocus(false)}\r\n      />\r\n      <SearchIcon focused={isFocused} />\r\n    </label>\r\n  )\r\n})\r\n","import { capitalize } from \"lodash-es\"\r\n\r\nimport React, { useState } from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { fonts, useStyle, scales } from \"styles\"\r\n\r\nimport { PolyhedronGroup, PolyhedronSubgroup, groups } from \"data/list\"\r\nimport { escape } from \"utils\"\r\nimport { hover, padding, paddingVert, margin, marginVert } from \"styles/common\"\r\n\r\nimport SearchBar from \"./SearchBar\"\r\n\r\nfunction getFilteredPolyhedra(polyhedra: string[], filter: string) {\r\n  return polyhedra.filter((solid) => solid.includes(filter.toLowerCase()))\r\n}\r\n\r\nfunction filterSubgroups(subgroups: PolyhedronSubgroup[], filterText: string) {\r\n  return subgroups\r\n    .map(({ name, polyhedra }) => ({\r\n      name,\r\n      polyhedra: getFilteredPolyhedra(polyhedra, filterText),\r\n    }))\r\n    .filter(({ polyhedra }) => polyhedra.length > 0)\r\n}\r\n\r\nfunction filterGroups(groups: PolyhedronGroup[], filterText: string) {\r\n  return groups\r\n    .map(({ name, groups }) => ({\r\n      name,\r\n      groups: filterSubgroups(groups, filterText),\r\n    }))\r\n    .filter(({ groups }) => groups.length > 0)\r\n}\r\n\r\nfunction PolyhedronLink({ name }: { name: string }) {\r\n  const css = useStyle({\r\n    ...hover,\r\n    ...padding(scales.spacing[1], scales.spacing[3]),\r\n    textDecoration: \"none\",\r\n    display: \"block\",\r\n\r\n    color: \"DimGrey\",\r\n    lineHeight: 1.25,\r\n    fontFamily: fonts.andaleMono,\r\n    fontSize: scales.font[6],\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    whiteSpace: \"nowrap\",\r\n  })\r\n\r\n  const activeCss = useStyle({\r\n    color: \"DarkSlateGray\",\r\n    fontWeight: \"bolder\",\r\n  })\r\n\r\n  return (\r\n    <NavLink\r\n      to={`../../${escape(name)}/list`}\r\n      {...css()}\r\n      {...activeCss(\"activeClassName\")}\r\n    >\r\n      {capitalize(name)}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nfunction SubList({ polyhedra }: { polyhedra: string[] }) {\r\n  return (\r\n    <ul>\r\n      {polyhedra.map((name) => (\r\n        <li key={name}>\r\n          <PolyhedronLink name={name} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nfunction SubgroupHeader({ name }: { name: string }) {\r\n  const css = useStyle({\r\n    ...margin(scales.spacing[1], scales.spacing[3]),\r\n    fontFamily: fonts.times,\r\n    fontSize: scales.font[5],\r\n  })\r\n  return <h3 {...css()}>{capitalize(name)}</h3>\r\n}\r\n\r\nfunction Subgroup({ name, polyhedra }: PolyhedronSubgroup) {\r\n  const css = useStyle(marginVert(scales.spacing[3]))\r\n\r\n  return (\r\n    <div {...css()}>\r\n      <SubgroupHeader name={name} />\r\n      <SubList polyhedra={polyhedra} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction GroupHeader({ text }: { text: string }) {\r\n  const css = useStyle({\r\n    ...margin(scales.spacing[1], scales.spacing[3]),\r\n    fontFamily: fonts.times,\r\n    fontSize: scales.font[4],\r\n  })\r\n  return <h2 {...css()}>{text}</h2>\r\n}\r\n\r\nfunction Group({ group }: { group: PolyhedronGroup }) {\r\n  const { name, groups } = group\r\n  const css = useStyle({ marginTop: scales.spacing[2] })\r\n\r\n  return (\r\n    <div {...css()}>\r\n      <GroupHeader text={name} />\r\n      {groups.map((group) => (\r\n        <Subgroup key={group.name} {...group} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function ListPanel() {\r\n  const [filterText, setFilterText] = useState(\"\")\r\n  const filteredGroups =\r\n    filterText === \"\" ? groups : filterGroups(groups, filterText)\r\n\r\n  const css = useStyle(paddingVert(scales.spacing[2]))\r\n\r\n  return (\r\n    <section {...css()}>\r\n      <SearchBar value={filterText} onChange={setFilterText} />\r\n      {filteredGroups.map((group) => (\r\n        <Group key={group.name} group={group} />\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n","import React, { ComponentType } from \"react\"\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport ConfigForm from \"./ConfigForm\"\r\nimport ListPanel from \"./ListPanel\"\r\n\r\ninterface Props {\r\n  panel: string\r\n  operationsPanel: ComponentType\r\n}\r\nexport default function Panels({\r\n  panel,\r\n  operationsPanel: OperationsPanel,\r\n}: Props) {\r\n  switch (panel) {\r\n    case \"info\":\r\n      return <InfoPanel />\r\n    case \"operations\":\r\n      return <OperationsPanel />\r\n    case \"options\":\r\n      return <ConfigForm />\r\n    case \"list\":\r\n      return <ListPanel />\r\n    case \"full\":\r\n      return null\r\n    default:\r\n      throw new Error(\"unknown tab\")\r\n  }\r\n}\r\n","import { capitalize } from \"lodash-es\"\r\nimport React from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { media, fonts } from \"styles\"\r\n\r\nfunction Title({ name }: { name: string }) {\r\n  const css = useStyle({\r\n    fontFamily: fonts.andaleMono,\r\n    fontSize: scales.font[2],\r\n\r\n    [media.notMobile]: {\r\n      fontWeight: \"bold\",\r\n      textAlign: \"left\",\r\n    },\r\n\r\n    [media.tabletPortrait]: {\r\n      // Otherwise, it bleeds into the sidebar\r\n      fontSize: scales.font[3],\r\n    },\r\n\r\n    // TODO consider making this style-less and defining the styles\r\n    // in mobile/desktop viewers\r\n    [media.mobile]: {\r\n      fontSize: scales.font[5],\r\n      lineHeight: 1.25,\r\n      textAlign: \"center\",\r\n    },\r\n  })\r\n  return (\r\n    <h1 data-testid=\"viewer-title\" {...css()}>\r\n      {capitalize(name)}\r\n    </h1>\r\n  )\r\n}\r\n\r\nexport default Title\r\n","import * as React from \"react\"\r\nimport JSZip from \"jszip\"\r\nimport FileSaver from \"file-saver\"\r\n\r\nimport { escape } from \"utils\"\r\nimport { allSolidNames } from \"data/common\"\r\n\r\n/**\r\n * Utility class to download image thumbnails. Do NOT use in production\r\n */\r\n// TODO rebuild this class with hoooks~~\r\nexport default class ImageDownloader extends React.Component<any> {\r\n  downloadImages = async () => {\r\n    const zip = new JSZip()\r\n    const canvas = document.getElementsByTagName(\"canvas\")\r\n    const ratio = canvas[0].width / canvas[0].height\r\n    const height = 150\r\n    canvas[0].height = height\r\n    canvas[0].width = ratio * height\r\n\r\n    const images = zip.folder(\"images\")\r\n\r\n    for (const solid of allSolidNames) {\r\n      await this.addImage(canvas, images, solid)\r\n    }\r\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\r\n      FileSaver.saveAs(content, \"images.zip\")\r\n    })\r\n  }\r\n\r\n  addImage = async (canvas: any, folder: any, solid: any) => {\r\n    const { setPolyhedron } = this.props\r\n    return await new Promise((resolve) => {\r\n      setPolyhedron(solid, () => {\r\n        setTimeout(() => {\r\n          canvas[0].toBlob((v: any) => {\r\n            folder.file(`${escape(solid)}.png`, v, { base64: true })\r\n            resolve()\r\n          })\r\n        }, 100)\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return <button onClick={this.downloadImages}>download images</button>\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { media, fonts } from \"styles\"\r\nimport { OperationCtx } from \"components/ViewerPage/context\"\r\n\r\nfunction getMessage(opName: string) {\r\n  switch (opName) {\r\n    case \"augment\":\r\n      return \"Select a face\"\r\n    case \"diminish\":\r\n    case \"gyrate\":\r\n      return \"Select a component\"\r\n    case \"sharpen\":\r\n    case \"contract\":\r\n      return \"Select a type of face\"\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport default function Prompt() {\r\n  const css = useStyle({\r\n    fontSize: scales.font[3],\r\n    fontFamily: fonts.andaleMono,\r\n    textAlign: \"center\",\r\n\r\n    [media.mobile]: {\r\n      fontSize: scales.font[4],\r\n    },\r\n  })\r\n  const { operation } = OperationCtx.useState()\r\n  if (!operation) return null\r\n  const message = getMessage(operation.name)\r\n\r\n  return message && <div {...css()}>{message}</div>\r\n}\r\n","import React, { useRef, useCallback } from \"react\"\r\nimport { SrOnly } from \"components/common\"\r\n\r\n/**\r\n * Provides a hidden heading and a function to focus on it.\r\n */\r\nexport default function useHiddenHeading(\r\n  value: string,\r\n): [JSX.Element, () => void] {\r\n  const ref = useRef<HTMLHeadingElement>(null)\r\n  const focusFn = useCallback(() => {\r\n    if (ref.current) ref.current.focus()\r\n  }, [])\r\n  const node = (\r\n    <SrOnly>\r\n      <h2 tabIndex={0} ref={ref}>\r\n        {value}\r\n      </h2>\r\n    </SrOnly>\r\n  )\r\n  return [node, focusFn]\r\n}\r\n","import React from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { ResizeButtons, OpGrid } from \"../common\"\r\nimport { flexColumn } from \"styles/common\"\r\n\r\nexport default function OperationsPanel() {\r\n  const css = useStyle({\r\n    ...flexColumn(),\r\n    padding: scales.spacing[3],\r\n    height: \"100%\",\r\n  })\r\n\r\n  const buttonCss = useStyle({ marginTop: \"auto\" })\r\n\r\n  return (\r\n    <section {...css()}>\r\n      <OpGrid />\r\n      <div {...buttonCss()}>\r\n        <ResizeButtons />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { NavMenu, Panels, useHiddenHeading } from \"../common\"\r\nimport { paddingHoriz, scroll } from \"styles/common\"\r\n\r\nimport OperationsPanel from \"./OperationsPanel\"\r\n\r\ninterface Props {\r\n  panel: string\r\n  solid: string\r\n  compact?: boolean\r\n}\r\n\r\nconst menuH = scales.size[3]\r\n\r\nexport default function Sidebar({ panel, solid, compact }: Props) {\r\n  const [header, focusOnHeader] = useHiddenHeading(panel)\r\n\r\n  const css = useStyle(\r\n    {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n      display: \"grid\",\r\n      gridTemplateRows: `${menuH} 1fr`,\r\n      gridTemplateAreas: '\"menu\" \"content\"',\r\n      borderLeft: compact ? undefined : \"1px solid LightGray\",\r\n    },\r\n    [compact],\r\n  )\r\n\r\n  const navCss = useStyle(\r\n    {\r\n      ...paddingHoriz(scales.spacing[2]),\r\n      gridArea: \"menu\",\r\n      height: menuH,\r\n      borderBottom: compact ? undefined : \"1px solid LightGray\",\r\n    },\r\n    [compact],\r\n  )\r\n\r\n  const contentCss = useStyle({\r\n    ...scroll(\"y\"),\r\n    gridArea: \"content\",\r\n    position: \"relative\",\r\n  })\r\n  return (\r\n    <section {...css()}>\r\n      <div {...navCss()}>\r\n        <NavMenu compact={compact} onClick={focusOnHeader} />\r\n      </div>\r\n      {!compact && (\r\n        <div {...contentCss()}>\r\n          {header}\r\n          <Panels panel={panel} operationsPanel={OperationsPanel} />\r\n        </div>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n","//@flow\r\n\r\nimport React from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { absolute, absoluteFull, paddingHoriz } from \"styles/common\"\r\nimport { BackLink, Title, Options, Prompt } from \"../common\"\r\n\r\ninterface Props {\r\n  solid: string\r\n}\r\n\r\n// TODO replace all the padding/absolute values with Grid\r\nexport default function Overlay({ solid }: Props) {\r\n  const css = useStyle({\r\n    ...absoluteFull,\r\n    pointerEvents: \"none\",\r\n  })\r\n\r\n  const title = useStyle({\r\n    ...absolute(\"bottom\", \"left\"),\r\n    pointerEvents: \"initial\",\r\n    padding: scales.spacing[4],\r\n  })\r\n\r\n  const homeLink = useStyle({\r\n    ...absolute(\"top\", \"left\"),\r\n    pointerEvents: \"initial\",\r\n    paddingLeft: scales.spacing[2],\r\n  })\r\n\r\n  const options = useStyle({\r\n    ...paddingHoriz(scales.spacing[4]),\r\n    height: \"100%\",\r\n  })\r\n\r\n  const prompt = useStyle({\r\n    paddingTop: scales.spacing[3],\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    left: 0,\r\n  })\r\n\r\n  return (\r\n    <div {...css()}>\r\n      <div {...homeLink()}>\r\n        <BackLink solid={solid} />\r\n      </div>\r\n      <div {...title()}>\r\n        <Title name={solid} />\r\n      </div>\r\n      <div {...prompt()}>\r\n        <Prompt />\r\n      </div>\r\n      <div {...options()}>\r\n        <Options />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { memo } from \"react\"\r\n\r\nimport { useStyle } from \"styles\"\r\nimport { flexRow } from \"styles/common\"\r\nimport Sidebar from \"./Sidebar\"\r\nimport Overlay from \"./Overlay\"\r\nimport { SolidScene } from \"../common\"\r\n\r\ninterface Props {\r\n  panel: string\r\n  solid: string\r\n}\r\n\r\nconst sidebarW = \"24rem\"\r\n\r\nfunction Scene({ solid, full }: Pick<Props, \"solid\"> & { full: boolean }) {\r\n  const css = useStyle(\r\n    {\r\n      position: \"relative\",\r\n      width: full ? \"100%\" : `calc(100% - ${sidebarW})`,\r\n      height: \"100%\",\r\n      alignSelf: \"flex-start\",\r\n    },\r\n    [full],\r\n  )\r\n  return (\r\n    <div {...css()}>\r\n      <SolidScene label={solid} />\r\n      <Overlay solid={solid} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction StyledSidebar({\r\n  solid,\r\n  panel,\r\n  compact,\r\n}: Props & { compact: boolean }) {\r\n  const css = useStyle(\r\n    compact\r\n      ? {\r\n          position: \"absolute\",\r\n          top: 0,\r\n          right: 0,\r\n        }\r\n      : {\r\n          position: \"relative\",\r\n          height: \"100%\",\r\n          minWidth: sidebarW,\r\n          maxWidth: sidebarW,\r\n        },\r\n    [compact],\r\n  )\r\n  return (\r\n    <div {...css()}>\r\n      <Sidebar panel={panel} solid={solid} compact={compact} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(function DesktopViewer({ solid, panel }: Props) {\r\n  const full = panel === \"full\"\r\n\r\n  const css = useStyle({\r\n    ...flexRow(),\r\n    position: \"fixed\",\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n  })\r\n  return (\r\n    <div {...css()}>\r\n      <Scene solid={solid} full={full} />\r\n      <StyledSidebar solid={solid} panel={panel} compact={full} />\r\n    </div>\r\n  )\r\n})\r\n","import React from \"react\"\r\nimport { useStyle, scales } from \"styles\"\r\n\r\nimport { OpGrid, Prompt, Options, ResizeButtons } from \"../common\"\r\nimport { flexColumn } from \"styles/common\"\r\n\r\nexport default function OperationsPanel() {\r\n  const css = useStyle({\r\n    ...flexColumn(),\r\n    height: \"100%\",\r\n    pointerEvents: \"none\",\r\n    padding: scales.spacing[2],\r\n  })\r\n\r\n  const resizeButtons = useStyle({\r\n    pointerEvents: \"initial\",\r\n  })\r\n\r\n  const prompt = useStyle({\r\n    marginTop: scales.spacing[2],\r\n    marginBottom: \"auto\",\r\n  })\r\n\r\n  const options = useStyle({\r\n    marginTop: \"auto\",\r\n    marginBottom: scales.spacing[2],\r\n  })\r\n\r\n  const opGrid = useStyle({\r\n    width: \"100%\",\r\n    pointerEvents: \"initial\",\r\n  })\r\n\r\n  // TODO I really wanna create a wrapper component for this...\r\n  return (\r\n    <section {...css()}>\r\n      <div {...resizeButtons()}>\r\n        <ResizeButtons />\r\n      </div>\r\n      <div {...prompt()}>\r\n        <Prompt />\r\n      </div>\r\n      <div {...options()}>\r\n        <Options />\r\n      </div>\r\n      <div {...opGrid()}>\r\n        <OpGrid />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React, { memo } from \"react\"\r\nimport { CSSProperties } from \"aphrodite\"\r\n\r\nimport { useStyle, media, scales } from \"styles\"\r\nimport { scroll, paddingHoriz, flexRow } from \"styles/common\"\r\nimport {\r\n  BackLink,\r\n  Title,\r\n  NavMenu,\r\n  SolidScene,\r\n  Panels,\r\n  useHiddenHeading,\r\n} from \"../common\"\r\n\r\nimport OperationsPanel from \"./OperationsPanel\"\r\n\r\nconst titleHeight = \"3rem\"\r\n\r\nfunction mobile(styles: (navH: string) => CSSProperties) {\r\n  return {\r\n    [media.mobileLandscape]: styles(\"3rem\"),\r\n    [media.mobilePortrait]: styles(scales.size[3]),\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  panel: string\r\n  solid: string\r\n}\r\n\r\nfunction Header({ solid }: Pick<Props, \"solid\">) {\r\n  const css = useStyle({\r\n    height: titleHeight,\r\n    ...paddingHoriz(scales.spacing[2]),\r\n    borderBottom: \"1px solid LightGray\",\r\n    width: \"100%\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: `${scales.size[2]} 1fr ${scales.size[2]}`,\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n  })\r\n  return (\r\n    <header {...css()}>\r\n      <BackLink solid={solid} />\r\n      <Title name={solid} />\r\n    </header>\r\n  )\r\n}\r\n\r\nfunction Content({\r\n  panel,\r\n  header,\r\n}: Pick<Props, \"panel\"> & { header: JSX.Element }) {\r\n  const transparent = [\"operations\", \"full\"].includes(panel)\r\n  const css = useStyle(\r\n    {\r\n      ...scroll(\"y\"),\r\n      gridArea: \"content\",\r\n      position: \"relative\",\r\n      zIndex: 100,\r\n      ...(transparent\r\n        ? { pointerEvents: \"none\" }\r\n        : { backgroundColor: \"rgba(255, 255, 255, 0.75)\" }),\r\n    },\r\n    [transparent],\r\n  )\r\n  return (\r\n    <div {...css()}>\r\n      {header}\r\n      <Panels panel={panel} operationsPanel={OperationsPanel} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(function MobileViewer({ panel, solid }: Props) {\r\n  const [header, focusOnHeader] = useHiddenHeading(panel)\r\n\r\n  const css = useStyle({\r\n    position: \"relative\",\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    display: \"grid\",\r\n    gridTemplateAreas: '\"title\" \"content\" \"nav\"',\r\n    ...mobile((navH) => ({\r\n      gridTemplateRows: `${titleHeight} 1fr ${navH}`,\r\n    })),\r\n  })\r\n\r\n  const sceneCss = useStyle({\r\n    ...mobile((navH) => ({\r\n      height: `calc(100vh - ${navH} - ${titleHeight})`,\r\n    })),\r\n    zIndex: 0,\r\n    gridArea: \"content\",\r\n    position: \"relative\",\r\n  })\r\n\r\n  const navCss = useStyle({\r\n    ...mobile((navH) => ({\r\n      height: navH,\r\n    })),\r\n    ...flexRow(\"center\"),\r\n    gridArea: \"nav\",\r\n    borderTop: \"1px solid LightGray\",\r\n  })\r\n\r\n  return (\r\n    <section {...css()}>\r\n      <Header solid={solid} />\r\n      <Content panel={panel} header={header} />\r\n      <main {...sceneCss()}>\r\n        <SolidScene label={solid} />\r\n      </main>\r\n      <div {...navCss()}>\r\n        <NavMenu onClick={focusOnHeader} />\r\n      </div>\r\n    </section>\r\n  )\r\n})\r\n","import { capitalize } from \"lodash-es\"\r\nimport React, { useEffect } from \"react\"\r\nimport { useParams, useNavigate } from \"react-router-dom\"\r\n\r\nimport { escape } from \"utils\"\r\nimport { Polyhedron } from \"math/polyhedra\"\r\nimport { wrapProviders } from \"components/common\"\r\nimport { OperationCtx, TransitionCtx, PolyhedronCtx } from \"./context\"\r\nimport DesktopViewer from \"./DesktopViewer\"\r\nimport MobileViewer from \"./MobileViewer\"\r\nimport { usePageTitle } from \"components/common\"\r\nimport useMediaInfo from \"components/useMediaInfo\"\r\n\r\ninterface InnerProps {\r\n  solid: string\r\n  panel: string\r\n}\r\n\r\nfunction InnerViewer({ solid, panel }: InnerProps) {\r\n  const { unsetOperation } = OperationCtx.useActions()\r\n  const { setPolyhedron } = PolyhedronCtx.useActions()\r\n  const polyhedron = PolyhedronCtx.useState()\r\n  const navigate = useNavigate()\r\n  // Use a buffer variable to keep the two states in sync\r\n  const [solidSync, setSolidSync] = React.useState(solid)\r\n\r\n  // When either `solid` (derived from the route) or `polyhedron.name` (derived from operation)\r\n  // chagnes, update the *other* state.\r\n  useEffect(() => {\r\n    setSolidSync(solid)\r\n  }, [solid])\r\n\r\n  useEffect(() => {\r\n    setSolidSync(polyhedron.name)\r\n  }, [polyhedron.name])\r\n\r\n  useEffect(() => {\r\n    if (polyhedron.name !== solidSync) {\r\n      // If the route has changed (and it wasn't from an operation)\r\n      // cancel the current operation and set the polyhedorn model\r\n      unsetOperation()\r\n      setPolyhedron(Polyhedron.get(solid))\r\n    } else if (solid !== solidSync) {\r\n      // If an operation was executed, update the URL\r\n      navigate(`/${escape(polyhedron.name)}/operations`)\r\n    }\r\n    // Don't depend on `solid` or `polyhedron.name` over here:\r\n    // this is how the two states get synced with each other\r\n    // Also don't depend on `navigate` because it's not memoized\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [solidSync, setPolyhedron, unsetOperation])\r\n\r\n  const { device } = useMediaInfo()\r\n\r\n  const ViewerComponent = device === \"desktop\" ? DesktopViewer : MobileViewer\r\n\r\n  return <ViewerComponent solid={solid} panel={panel} />\r\n}\r\n\r\nconst Providers = wrapProviders([TransitionCtx.Provider, OperationCtx.Provider])\r\n\r\nexport default function Viewer({ solid }: { solid: string }) {\r\n  const { panel = \"operations\" } = useParams()\r\n  usePageTitle(`${capitalize(solid)} - Polyhedra Viewer`)\r\n\r\n  return (\r\n    <PolyhedronCtx.Provider name={solid}>\r\n      <Providers>\r\n        <InnerViewer solid={solid} panel={panel} />\r\n      </Providers>\r\n    </PolyhedronCtx.Provider>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport {\r\n  Routes,\r\n  Route,\r\n  Navigate,\r\n  useParams,\r\n  useLocation,\r\n} from \"react-router-dom\"\r\n\r\nimport { escape, choose } from \"utils\"\r\nimport { isValidSolid, allSolidNames } from \"data/common\"\r\nimport { isAlternateName, getCanonicalName } from \"data/alternates\"\r\nimport { isConwayNotation, fromConwayNotation } from \"data/conway\"\r\n\r\nimport ErrorPage from \"components/ErrorPage\"\r\nimport Viewer from \"./Viewer\"\r\n\r\nconst unescapeName = (name: string) => name.replace(/-/g, \" \")\r\n\r\nfunction resolveSolidName(solid: string) {\r\n  if (solid === \"random\") {\r\n    return choose(allSolidNames)\r\n  }\r\n  if (isConwayNotation(solid)) {\r\n    return fromConwayNotation(solid)\r\n  }\r\n  if (isAlternateName(solid)) {\r\n    return getCanonicalName(solid)\r\n  }\r\n  if (isValidSolid(solid)) {\r\n    return solid\r\n  }\r\n  return null\r\n}\r\n\r\nexport default function ViewerPage() {\r\n  const params = useParams()\r\n  const { pathname } = useLocation()\r\n  const solidParam = unescapeName(params.solid)\r\n  const solid = resolveSolidName(solidParam)\r\n\r\n  if (!solid) {\r\n    return <ErrorPage />\r\n  }\r\n\r\n  if (solid !== solidParam) {\r\n    return (\r\n      <Navigate replace to={pathname.replace(params.solid, escape(solid))} />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Navigate replace to=\"operations\" />} />\r\n      <Route path=\":panel\" element={<Viewer solid={solid} />} />\r\n    </Routes>\r\n  )\r\n}\r\n"],"sourceRoot":""}