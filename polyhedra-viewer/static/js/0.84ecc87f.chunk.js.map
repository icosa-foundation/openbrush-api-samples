{"version":3,"sources":["styles/common.ts","utils.ts","data/common.ts","data/symmetry.ts","data/specs/getSymmetry.ts","data/specs/getName.ts","data/specs/getConwaySymbol.ts","data/specs/PolyhedronSpecs.ts","data/specs/Queries.ts","data/specs/Prismatic.ts","data/specs/Classical.ts","data/specs/Capstone.ts","data/specs/Elementary.ts","data/specs/ModifiedAntiprism.ts","data/specs/getSpecs.ts","data/conway.ts","data/alternates.ts","data/specs/common.ts","data/specs/Composite.ts","data/names sync /^/.*/.json$","data/polyhedra sync /^/.*/.json$"],"names":["marginVert","m","marginTop","marginBottom","marginHoriz","marginLeft","marginRight","margin","vert","horiz","paddingVert","p","paddingTop","paddingBottom","paddingHoriz","paddingLeft","paddingRight","padding","square","size","width","height","flexRow","alignItems","justifyContent","display","flexDirection","flexColumn","absolute","position","absoluteFull","top","left","right","bottom","scroll","direction","toUpperCase","colorFill","color","fill","hover","backgroundColor","link","textDecoration","getCyclic","array","index","a","b","length","repeat","value","n","Array","mapObject","arr","iteratee","Object","fromEntries","map","flatMapUniq","iteratee1","iteratee2","uniqBy","flatMap","getSingle","Error","JSON","stringify","choose","choices","Math","floor","random","splitAt","list","slice","escape","str","replace","getPolyhedraNames","groupName","require","allSolidNames","isValidSolid","solidName","includes","assertValidSolid","getSolidData","escapedName","Symmetry","meta","this","achiralSub","chiral","sub","base","group","symbol","rotationalOrder","polyhedralOrders","3","4","5","groupNames","Polyhedral","data","family","Cyclic","prefix","polygonPrefixes","get","bilateral","biradial","Dihedral","reflection","elementaryMapping","sphenocorona","sphenomegacorona","hebesphenomegacorona","disphenocingulum","bilunabirotunda","getSymmetry","solid","isClassical","isSnub","isPrismatic","type","isCapstone","capstone","gyrate","isMono","isGyroelongated","isPyramid","isCupolaRotunda","getCapstoneSymmetry","isComposite","composite","augmented","diminished","source","align","count","pure","symmetry","basePolygon","getCompositeSymmetry","isModifiedAntiprism","operation","isElementary","countPrefixes","1","2","countString","wordJoin","compact","join","rest","rectifiedNames","regularNames","facet","getName","getExpandedString","elongation","baseStr","prism","antiprism","name","johnsonSolids","operationMapping","regular","truncate","rectify","bevel","cantellate","snub","familyMapping","PolyhedronSpecs","getCanonicalName","getAlternateNames","canonicalName","structure","indexOf","getConwaySymbol","isRegular","capitalize","s2","isEqual","Queries","entries","nameMapping","Map","entry","has","set","pickBy","filter","item","isMatch","some","bases","polygons","Prismatic","isPrism","isAntiprism","isDigonal","isPrimary","isSecondary","prismaticTypes","Specs","query","getAll","families","primaryPolygons","facets","operations","Classical","isTetrahedral","isOctahedral","isIcosahedral","isTruncated","isRectified","isBevelled","isCantellated","hasFacet","isFace","isVertex","isChiral","twist","elongations","counts","gyrations","capTypes","Capstone","isTriangular","isSquare","isPentagonal","isCupola","isRotunda","isBi","isShortened","isElongated","isGyro","isOrtho","Elementary","sources","where","s","ModifiedAntiprism","getAllSpecs","subclasses","Composite","getSpecs","Subclass","hasName","withName","allWithName","f","getConwayNotation","conwaySymbol","conwayMapping","BiMap","isConwayNotation","hasValue","fromConwayNotation","of","getCanonicalMapping","alternateNamesMapping","tetrahedron","cube","octahedron","icosahedron","cuboctahedron","rhombicuboctahedron","icosidodecahedron","gyrobifastigium","canonical","alts","alt","canonicalMapping","alternateNames","keys","isAlternateName","alignments","prismaticBases","augmentedClassicalBases","rhombicosidodecahedron","limitCount","limit","totalCount","isTri","isAugmented","isDiminished","isGyrate","isPara","isMeta","source2","data2","omit","equals","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","code","resolve","module","exports"],"mappings":"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","file":"static/js/0.84ecc87f.chunk.js","sourcesContent":["import { CSSProperties } from \"aphrodite\"\r\n\r\ntype Value = string | number\r\n\r\n/* Spacing utilities */\r\n\r\nexport function marginVert(m: Value): CSSProperties {\r\n  return {\r\n    marginTop: m,\r\n    marginBottom: m,\r\n  }\r\n}\r\n\r\nexport function marginHoriz(m: Value): CSSProperties {\r\n  return {\r\n    marginLeft: m,\r\n    marginRight: m,\r\n  }\r\n}\r\n\r\nexport function margin(vert: Value, horiz: Value = vert): CSSProperties {\r\n  return {\r\n    ...marginVert(vert),\r\n    ...marginHoriz(horiz),\r\n  }\r\n}\r\n\r\nexport function paddingVert(p: Value): CSSProperties {\r\n  return {\r\n    paddingTop: p,\r\n    paddingBottom: p,\r\n  }\r\n}\r\n\r\nexport function paddingHoriz(p: Value): CSSProperties {\r\n  return {\r\n    paddingLeft: p,\r\n    paddingRight: p,\r\n  }\r\n}\r\n\r\nexport function padding(vert: Value, horiz: Value = vert): CSSProperties {\r\n  return {\r\n    ...paddingHoriz(horiz),\r\n    ...paddingVert(vert),\r\n  }\r\n}\r\n\r\n/* Layout utlities */\r\n\r\nexport function square(size: Value): CSSProperties {\r\n  return {\r\n    width: size,\r\n    height: size,\r\n  }\r\n}\r\n\r\n/* Display utilities */\r\n\r\nexport function flexRow(\r\n  alignItems?: CSSProperties[\"alignItems\"],\r\n  justifyContent?: CSSProperties[\"justifyContent\"],\r\n): CSSProperties {\r\n  return {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems,\r\n    justifyContent,\r\n  }\r\n}\r\n\r\nexport function flexColumn(\r\n  alignItems?: CSSProperties[\"alignItems\"],\r\n  justifyContent?: CSSProperties[\"justifyContent\"],\r\n): CSSProperties {\r\n  return {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems,\r\n    justifyContent,\r\n  }\r\n}\r\n\r\n/* Position utilities */\r\n\r\nexport const fullScreen = {\r\n  position: \"absolute\",\r\n  height: \"100%\",\r\n  width: \"100%\",\r\n}\r\n\r\nexport function absolute(\r\n  vert: \"top\" | \"bottom\",\r\n  horiz: \"left\" | \"right\",\r\n): CSSProperties {\r\n  return {\r\n    position: \"absolute\",\r\n    [vert]: 0,\r\n    [horiz]: 0,\r\n  }\r\n}\r\n\r\nexport const absoluteFull: CSSProperties = {\r\n  position: \"absolute\",\r\n  top: 0,\r\n  left: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n}\r\n\r\n/* Mobile */\r\n\r\nexport function scroll(direction?: \"x\" | \"y\") {\r\n  const prop = `overflow${(direction ?? \"\").toUpperCase()}`\r\n  return {\r\n    [prop]: \"scroll\",\r\n    // use momentum scrolling on mobile browsers\r\n    \"-webkit-overflow-scrolling\": \"touch\",\r\n  }\r\n}\r\n\r\n/* Miscellaneous */\r\n\r\n/**\r\n * Populate the `color` and `fill` properties (useful for icons).\r\n * @param color the color to fill in\r\n */\r\nexport function colorFill(color: string): CSSProperties {\r\n  return {\r\n    color,\r\n    fill: color,\r\n  }\r\n}\r\n\r\n/* Themeing */\r\n// TODO  move to new file\r\n\r\nexport const hover = {\r\n  \":hover:not(:disabled)\": {\r\n    backgroundColor: \"LightGray\",\r\n  },\r\n}\r\n\r\nexport const link = {\r\n  ...colorFill(\"MediumBlue\"),\r\n  textDecoration: \"none\",\r\n  \":hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n}\r\n","import { ValueIteratee } from \"lodash\"\r\nimport { uniqBy } from \"lodash-es\"\r\n\r\nfunction mod(a: number, b: number) {\r\n  return a >= 0 ? a % b : (a % b) + b\r\n}\r\n\r\n/**\r\n * Get the element of the array at the given index, modulo its length\r\n */\r\nexport function getCyclic<T>(array: T[], index: number): T {\r\n  return array[mod(index, array.length)]\r\n}\r\n\r\n/**\r\n * Repeat a value n times\r\n */\r\nexport function repeat<T>(value: T, n: number) {\r\n  return Array<T>(n).fill(value)\r\n}\r\n\r\n/**\r\n * Create an object from the array using the iteratee\r\n */\r\nexport function mapObject<T, U>(\r\n  arr: T[],\r\n  iteratee: (item: T, i: number) => [string | number, U],\r\n): { [key: string]: U } {\r\n  return Object.fromEntries(arr.map(iteratee))\r\n}\r\n\r\nexport function flatMapUniq<T, U>(\r\n  arr: T[],\r\n  iteratee1: (key: T) => U[],\r\n  iteratee2: ValueIteratee<U>,\r\n) {\r\n  return uniqBy(arr.flatMap(iteratee1), iteratee2)\r\n}\r\n\r\n/**\r\n * Get the single element from the given array.\r\n */\r\nexport function getSingle<T>(array: T[]): T {\r\n  if (array.length !== 1) {\r\n    throw new Error(\r\n      `Expected array to have one element: ${JSON.stringify(array)}`,\r\n    )\r\n  }\r\n  return array[0]\r\n}\r\n\r\nexport function choose<T>(choices: T[]): T {\r\n  const index = Math.floor(Math.random() * choices.length)\r\n  return choices[index]\r\n}\r\n\r\n/**\r\n * Split the list in two at index (exclusive)\r\n */\r\nexport function splitAt<T>(list: T[], index: number) {\r\n  return [list.slice(0, index), list.slice(index)]\r\n}\r\n\r\n/**\r\n * Return the list \"pivoted\" so that the given value starts first\r\n */\r\nexport function pivot<T>(list: T[], value: T) {\r\n  const index = list.indexOf(value)\r\n  const [front, back] = splitAt(list, index)\r\n  return [...back, ...front]\r\n}\r\n\r\nexport const escape = (str: string) => str.replace(/ /g, \"-\")\r\n","import { escape } from \"utils\"\r\nexport const getPolyhedraNames = (groupName: string): string[] =>\r\n  require(`./names/${groupName}.json`)\r\n\r\nconst groups = [\"platonic\", \"archimedean\", \"prisms\", \"antiprisms\", \"johnson\"]\r\nexport const allSolidNames = groups.flatMap(getPolyhedraNames)\r\n\r\nexport function isValidSolid(solidName: string) {\r\n  return allSolidNames.includes(solidName)\r\n}\r\n\r\nexport function assertValidSolid(solidName: string) {\r\n  if (!isValidSolid(solidName)) {\r\n    throw new Error(`Invalid polyhedron name: ${solidName}`)\r\n  }\r\n  return solidName\r\n}\r\n\r\nexport function getSolidData(solidName: string) {\r\n  // We can't inline this because it messes up Webpack\r\n  const escapedName = escape(assertValidSolid(solidName))\r\n  return require(`data/polyhedra/${escapedName}.json`)\r\n}\r\n","import { Polygon, polygonPrefixes } from \"./polygons\"\r\n\r\ntype SymPolygon = 1 | 2 | Polygon\r\n\r\ninterface Metadata {\r\n  /** True if the polyhedron is chiral */\r\n  chiral: boolean\r\n  /** The group notation of the symmetry group */\r\n  group: string\r\n  /** The base of the symmetry group */\r\n  n?: SymPolygon\r\n  /** The subscript to append when achiral */\r\n  achiralSub: string\r\n  /** The order of the rotation group */\r\n  rotationalOrder: number\r\n}\r\n\r\n/**\r\n * A class containing symmetry information of a Polyhedron that can be expressed\r\n * as a string or a shorthand symbol, as well as the order of the symmetry group.\r\n */\r\nexport abstract class Symmetry {\r\n  meta: Metadata\r\n\r\n  constructor(meta: Metadata) {\r\n    this.meta = meta\r\n  }\r\n\r\n  /**\r\n   * Returns the name of this symmetry group.\r\n   */\r\n  abstract name(): string\r\n\r\n  /**\r\n   * Returns a symbol as a { base, sub } object.\r\n   */\r\n  symbol() {\r\n    const { n, achiralSub, chiral } = this.meta\r\n    const sub = `${n ?? \"\"}${chiral ? \"\" : achiralSub}`\r\n    return { base: this.meta.group, sub }\r\n  }\r\n\r\n  /**\r\n   * Returns a symbol as a string in the form {base}_{sub}.\r\n   */\r\n  symbolStr() {\r\n    const { base, sub } = this.symbol()\r\n    if (!sub) return base\r\n    return `${base}_${sub}`\r\n  }\r\n\r\n  /**\r\n   * Returns the order of this symmetry group.\r\n   */\r\n  order() {\r\n    return this.meta.rotationalOrder * (this.meta.chiral ? 1 : 2)\r\n  }\r\n}\r\n\r\ntype Family = 3 | 4 | 5\r\n\r\nconst polyhedralOrders = {\r\n  3: 12,\r\n  4: 24,\r\n  5: 60,\r\n}\r\n\r\nconst groupNames = {\r\n  3: \"tetrahedral\",\r\n  4: \"octahedral\",\r\n  5: \"icosahedral\",\r\n}\r\n\r\ninterface PolyhedralData {\r\n  family: Family\r\n  chiral?: boolean\r\n}\r\n\r\nexport class Polyhedral extends Symmetry {\r\n  private data: PolyhedralData\r\n  constructor(data: PolyhedralData) {\r\n    const { family, chiral } = data\r\n    super({\r\n      group: groupNames[family][0].toUpperCase(),\r\n      achiralSub: family === 3 ? \"d\" : \"h\",\r\n      chiral: !!chiral,\r\n      rotationalOrder: polyhedralOrders[family],\r\n    })\r\n    this.data = data\r\n  }\r\n\r\n  name() {\r\n    const { family, chiral } = this.data\r\n    return `${chiral ? \"chiral\" : \"full\"} ${groupNames[family]}`\r\n  }\r\n\r\n  static get(family: Family, chiral?: boolean) {\r\n    return new Polyhedral({ family, chiral })\r\n  }\r\n}\r\n\r\ninterface CyclicData {\r\n  n: SymPolygon\r\n  chiral?: boolean\r\n}\r\n\r\nexport class Cyclic extends Symmetry {\r\n  private data: CyclicData\r\n  constructor(data: CyclicData) {\r\n    const { chiral, n } = data\r\n    super({\r\n      group: \"C\",\r\n      n,\r\n      achiralSub: \"v\",\r\n      chiral: !!chiral,\r\n      rotationalOrder: n,\r\n    })\r\n    this.data = data\r\n  }\r\n\r\n  name() {\r\n    const { n, chiral } = this.data\r\n    if (n === 1 && !chiral) return \"bilateral\"\r\n    if (n === 2 && !chiral) return \"biradial\"\r\n    const prefix = polygonPrefixes.get(n)\r\n    return chiral ? prefix : `${prefix} pyramidal`\r\n  }\r\n\r\n  static get(n: SymPolygon, chiral?: boolean) {\r\n    return new Cyclic({ n, chiral })\r\n  }\r\n\r\n  static bilateral = Cyclic.get(1)\r\n\r\n  static biradial = Cyclic.get(2)\r\n}\r\n\r\ninterface DihedralData {\r\n  n: SymPolygon\r\n  reflection?: \"prism\" | \"antiprism\"\r\n}\r\n\r\nexport class Dihedral extends Symmetry {\r\n  private data: DihedralData\r\n  constructor(data: DihedralData) {\r\n    const { reflection, n } = data\r\n    super({\r\n      group: \"D\",\r\n      n,\r\n      achiralSub: reflection === \"prism\" ? \"h\" : \"d\",\r\n      chiral: !reflection,\r\n      rotationalOrder: n * 2,\r\n    })\r\n    this.data = data\r\n  }\r\n\r\n  name() {\r\n    const { n, reflection } = this.data\r\n    const base = reflection ? `${reflection}atic` : \"dihedral\"\r\n    return `${polygonPrefixes.get(n)} ${base}`\r\n  }\r\n\r\n  static get(n: SymPolygon, reflection?: \"prism\" | \"antiprism\") {\r\n    return new Dihedral({ n, reflection })\r\n  }\r\n}\r\n","import { Symmetry, Polyhedral, Cyclic, Dihedral } from \"../symmetry\"\r\nimport type Specs from \"./PolyhedronSpecs\"\r\nimport type Composite from \"./Composite\"\r\nimport type Capstone from \"./Capstone\"\r\n\r\nconst elementaryMapping = {\r\n  sphenocorona: Cyclic.biradial,\r\n  \"augmented sphenocorona\": Cyclic.bilateral,\r\n  sphenomegacorona: Cyclic.biradial,\r\n  hebesphenomegacorona: Cyclic.biradial,\r\n  disphenocingulum: Dihedral.get(2, \"antiprism\"),\r\n  bilunabirotunda: Dihedral.get(2, \"prism\"),\r\n  \"triangular hebesphenorotunda\": Cyclic.get(3),\r\n}\r\n\r\nfunction getCapstoneSymmetry(capstone: Capstone) {\r\n  // mono-capstones always have cyclic symmetry\r\n  const { gyrate, base } = capstone.data\r\n  if (capstone.isMono()) {\r\n    return Cyclic.get(base)\r\n  }\r\n  const isGyroelongated = capstone.isGyroelongated()\r\n\r\n  if (capstone.isPyramid()) {\r\n    return Dihedral.get(base, isGyroelongated ? \"antiprism\" : \"prism\")\r\n  }\r\n  // Cupolarotundae are always cyclic, and have reflective symmetry if it is not chiral\r\n  if (capstone.isCupolaRotunda()) {\r\n    return Cyclic.get(base, !!isGyroelongated)\r\n  }\r\n  // Bicupolae and birotundae\r\n  if (isGyroelongated) {\r\n    // Gyroelongated bicupolae and birotundae are chiral\r\n    return Dihedral.get(base)\r\n  }\r\n  return Dihedral.get(base, gyrate === \"gyro\" ? \"antiprism\" : \"prism\")\r\n}\r\n\r\nfunction getCompositeSymmetry(composite: Composite) {\r\n  const { augmented, gyrate, diminished, source, align } = composite.data\r\n  const count = augmented + gyrate + diminished\r\n  // A composite is \"pure\" only if it has one type of modification\r\n  const pure = count === augmented || count === diminished || count === gyrate\r\n  switch (count) {\r\n    case 0:\r\n      return source.symmetry()\r\n\r\n    case 1:\r\n      // Mono-augmented prisms all have biradial symmetry,\r\n      // everything else has the symmetry of their base polygon\r\n      return source.isPrismatic()\r\n        ? Cyclic.biradial\r\n        : Cyclic.get(source.data.family)\r\n\r\n    case 2: {\r\n      if (source.isPrismatic()) {\r\n        // para-augmented prisms have digonal prismatic symmetry\r\n        // meta-augmented prisms have biradial symmetry\r\n        return align === \"para\" ? Dihedral.get(2, \"prism\") : Cyclic.biradial\r\n      }\r\n\r\n      const basePolygon = source.data.family\r\n      // Augmented cubes are always para- and thus have prismatic symmetry\r\n      if (basePolygon === 4) {\r\n        return Dihedral.get(4, \"prism\")\r\n      }\r\n\r\n      if (align === \"para\") {\r\n        return pure\r\n          ? Dihedral.get(basePolygon, \"antiprism\")\r\n          : Cyclic.get(basePolygon)\r\n      } else {\r\n        return pure ? Cyclic.biradial : Cyclic.bilateral\r\n      }\r\n    }\r\n\r\n    case 3:\r\n      // The only tri-augmented prisms are triangular and hexagonal\r\n      if (source.isPrismatic()) {\r\n        return Dihedral.get(3, \"prism\")\r\n      }\r\n\r\n      // The only classical sources that can be tri-modified are\r\n      // diminished icosahedra and modified rhombicosidodecahedra\r\n      return pure ? Cyclic.get(3) : Cyclic.bilateral\r\n\r\n    case 4:\r\n      // The only way this would happen is an augmented tridiminished icosahedron\r\n      return Cyclic.get(3)\r\n  }\r\n\r\n  throw new Error(\"The polyhedron has way too many modifications\")\r\n}\r\n\r\nexport default function getSymmetry(solid: Specs): Symmetry {\r\n  if (solid.isClassical()) {\r\n    return Polyhedral.get(solid.data.family, solid.isSnub())\r\n  }\r\n  if (solid.isPrismatic()) {\r\n    const { base, type } = solid.data\r\n    return Dihedral.get(base, type)\r\n  }\r\n  if (solid.isCapstone()) {\r\n    return getCapstoneSymmetry(solid)\r\n  }\r\n  if (solid.isComposite()) {\r\n    return getCompositeSymmetry(solid)\r\n  }\r\n  if (solid.isModifiedAntiprism()) {\r\n    const { source, operation } = solid.data\r\n    switch (operation) {\r\n      case \"snub\":\r\n        return Dihedral.get(source.data.base, \"antiprism\")\r\n      default:\r\n        return source.symmetry()\r\n    }\r\n  }\r\n  if (solid.isElementary()) {\r\n    return elementaryMapping[solid.data.base]\r\n  }\r\n  throw new Error(`Solid is of invalid type ${solid.type}`)\r\n}\r\n","import { compact } from \"lodash-es\"\r\nimport type Specs from \"./PolyhedronSpecs\"\r\nimport { PrimaryPolygon, polygonPrefixes } from \"../polygons\"\r\n\r\nconst countPrefixes: Record<number, string> = { 1: \"\", 2: \"bi\", 3: \"tri\" }\r\n\r\nexport function countString(count: number, base: string) {\r\n  if (count === 0) return \"\"\r\n  return `${countPrefixes[count]}${base}`\r\n}\r\n\r\nexport function wordJoin(...array: (string | undefined)[]) {\r\n  return compact(array).join(\" \")\r\n}\r\n\r\nexport function prefix(prefix: string = \"\", rest: string) {\r\n  return `${prefix}${rest}`\r\n}\r\n\r\nconst rectifiedNames = {\r\n  3: \"tetratetrahedron\",\r\n  4: \"cuboctahedron\",\r\n  5: \"icosidodecahedron\",\r\n}\r\n\r\nconst regularNames: Record<\r\n  PrimaryPolygon,\r\n  (facet?: \"face\" | \"vertex\") => string\r\n> = {\r\n  3: () => \"tetrahedron\",\r\n  4: (facet) => (facet === \"face\" ? \"cube\" : \"octahedron\"),\r\n  5: (facet) => (facet === \"face\" ? \"dodecahedron\" : \"icosahedron\"),\r\n}\r\n\r\nfunction getExpandedString(base: string, operation: string) {\r\n  const str = prefix(operation === \"cantellate\" ? \"rhombi\" : \"\", base)\r\n  return str.replace(\"ii\", \"i\")\r\n}\r\n\r\nexport default function getName(solid: Specs): string {\r\n  if (solid.isClassical()) {\r\n    const { operation, family, facet } = solid.data\r\n    const base = [\"regular\", \"truncate\"].includes(operation)\r\n      ? regularNames[family](facet)\r\n      : rectifiedNames[family]\r\n    return wordJoin(\r\n      operation === \"snub\" ? operation : \"\",\r\n      [\"truncate\", \"bevel\"].includes(operation) ? \"truncated\" : \"\",\r\n      getExpandedString(base, operation),\r\n    )\r\n  }\r\n\r\n  if (solid.isPrismatic()) {\r\n    const { base, type } = solid.data\r\n    return `${polygonPrefixes.get(base)} ${type}`\r\n  }\r\n\r\n  if (solid.isCapstone()) {\r\n    const { base, type, elongation, count, gyrate } = solid.data\r\n    const elongStr = {\r\n      prism: \"elongated\",\r\n      antiprism: \"gyroelongated\",\r\n      \"\": \"\",\r\n    }\r\n    const baseStr = type === \"cupolarotunda\" ? type : countString(count, type)\r\n    return wordJoin(\r\n      elongStr[elongation ?? \"\"],\r\n      polygonPrefixes.get(base),\r\n      prefix(gyrate, baseStr),\r\n    )\r\n  }\r\n\r\n  if (solid.isComposite()) {\r\n    const { augmented, gyrate, diminished, align, source } = solid.data\r\n    return prefix(\r\n      align,\r\n      wordJoin(\r\n        countString(augmented, \"augmented\"),\r\n        countString(gyrate, \"gyrate\"),\r\n        countString(diminished, \"diminished\"),\r\n        source.name(),\r\n      ),\r\n    )\r\n  }\r\n\r\n  if (solid.isModifiedAntiprism()) {\r\n    const { operation, source } = solid.data\r\n    return wordJoin(operation ?? \"\", source.name())\r\n  }\r\n\r\n  if (solid.isElementary()) {\r\n    return solid.data.base\r\n  }\r\n\r\n  throw new Error(`Invalid solid of type ${solid.type}`)\r\n}\r\n","import type Specs from \"./PolyhedronSpecs\"\r\nimport { getPolyhedraNames } from \"../common\"\r\nconst johnsonSolids = getPolyhedraNames(\"johnson\")\r\n\r\nconst operationMapping = {\r\n  regular: \"\",\r\n  truncate: \"t\",\r\n  rectify: \"a\",\r\n  bevel: \"b\",\r\n  cantellate: \"e\",\r\n  snub: \"s\",\r\n}\r\n\r\nconst familyMapping = {\r\n  3: () => \"T\",\r\n  4: (facet: any) => (facet === \"vertex\" ? \"O\" : \"C\"),\r\n  5: (facet: any) => (facet === \"vertex\" ? \"I\" : \"D\"),\r\n}\r\n\r\nexport default function getConwaySymbol(structure: Specs) {\r\n  if (structure.isClassical()) {\r\n    const { family, facet, operation } = structure.data\r\n    return operationMapping[operation] + familyMapping[family](facet)\r\n  }\r\n\r\n  if (structure.isPrismatic()) {\r\n    const { type, base } = structure.data\r\n    return `${type[0].toUpperCase()}${base}`\r\n  }\r\n\r\n  const index = johnsonSolids.indexOf(structure.canonicalName())\r\n  return `J${index + 1}`\r\n}\r\n","import { isEqual, capitalize } from \"lodash-es\"\r\nimport type Classical from \"./Classical\"\r\nimport type Prismatic from \"./Prismatic\"\r\nimport type Capstone from \"./Capstone\"\r\nimport type Composite from \"./Composite\"\r\nimport type ModifiedAntiprism from \"./ModifiedAntiprism\"\r\nimport type Elementary from \"./Elementary\"\r\nimport getSymmetry from \"./getSymmetry\"\r\nimport getName from \"./getName\"\r\nimport getConwaySymbol from \"./getConwaySymbol\"\r\nimport type { Symmetry } from \"../symmetry\"\r\nimport { getAlternateNames, getCanonicalName } from \"../alternates\"\r\n\r\ntype PolyhedronType =\r\n  | \"classical\"\r\n  | \"prismatic\"\r\n  | \"capstone\"\r\n  | \"composite\"\r\n  | \"modified antiprism\"\r\n  | \"elementary\"\r\n\r\nexport default abstract class PolyhedronSpecs<Data extends {} = {}> {\r\n  type: PolyhedronType\r\n  data: Data\r\n\r\n  constructor(type: PolyhedronType, data: Data) {\r\n    this.type = type\r\n    this.data = data\r\n  }\r\n\r\n  name(): string {\r\n    return getName(this)\r\n  }\r\n\r\n  canonicalName() {\r\n    return getCanonicalName(this.name())\r\n  }\r\n\r\n  alternateNames() {\r\n    return getAlternateNames(this.canonicalName())\r\n  }\r\n\r\n  symmetry(): Symmetry {\r\n    return getSymmetry(this)\r\n  }\r\n\r\n  conwaySymbol(): string {\r\n    return getConwaySymbol(this)\r\n  }\r\n\r\n  group() {\r\n    if (this.isClassical()) {\r\n      return this.isRegular() ? \"Platonic solid\" : \"Archimedean solid\"\r\n    }\r\n    if (this.isPrismatic()) {\r\n      return capitalize(this.data.type)\r\n    }\r\n    return \"Johnson solid\"\r\n  }\r\n\r\n  isUniform() {\r\n    return this.isClassical() || this.isPrismatic()\r\n  }\r\n\r\n  isChiral() {\r\n    // Should be overwritten by things that are chiral\r\n    return false\r\n  }\r\n\r\n  equals(s2: PolyhedronSpecs) {\r\n    return this.type === s2.type && isEqual(this.data, s2.data)\r\n  }\r\n\r\n  isHoneycomb() {\r\n    return [\r\n      \"cube\",\r\n      \"truncated octahedron\",\r\n      \"triangular prism\",\r\n      \"hexagonal prism\",\r\n      \"gyrobifastigium\",\r\n    ].includes(this.canonicalName())\r\n  }\r\n\r\n  isClassical(): this is Classical {\r\n    return this.type === \"classical\"\r\n  }\r\n\r\n  isPrismatic(): this is Prismatic {\r\n    return this.type === \"prismatic\"\r\n  }\r\n\r\n  isCapstone(): this is Capstone {\r\n    return this.type === \"capstone\"\r\n  }\r\n\r\n  isComposite(): this is Composite {\r\n    return this.type === \"composite\"\r\n  }\r\n\r\n  isModifiedAntiprism(): this is ModifiedAntiprism {\r\n    return this.type === \"modified antiprism\"\r\n  }\r\n\r\n  isElementary(): this is Elementary {\r\n    return this.type === \"elementary\"\r\n  }\r\n}\r\n","import { pickBy, isMatch } from \"lodash-es\"\r\nimport { getSingle } from \"utils\"\r\nimport type Specs from \"./PolyhedronSpecs\"\r\n\r\ntype Predicate<T> = (arg: T) => boolean\r\n\r\nexport default class Queries<S extends Specs> {\r\n  entries: S[]\r\n  nameMapping: Map<string, S[]>\r\n  constructor(entries: Iterable<S>) {\r\n    this.entries = [...entries]\r\n    this.nameMapping = new Map()\r\n    for (const entry of this.entries) {\r\n      const name = entry.canonicalName()\r\n      if (!this.nameMapping.has(name)) {\r\n        this.nameMapping.set(name, [])\r\n      }\r\n      this.nameMapping.set(name, [...this.nameMapping.get(name)!, entry])\r\n    }\r\n  }\r\n\r\n  hasName(name: string) {\r\n    return this.nameMapping.has(name)\r\n  }\r\n\r\n  withData(data: S[\"data\"]) {\r\n    // Remove nullish elements from the filter\r\n    const compact = pickBy(data)\r\n    return getSingle(this.entries.filter((item) => isMatch(item.data, compact)))\r\n  }\r\n\r\n  /**\r\n   * Get the entry with the given canonical name.\r\n   */\r\n  withName(name: string) {\r\n    if (!this.nameMapping.has(name)) {\r\n      throw new Error(`Could not find entry with canonical name ${name}`)\r\n    }\r\n    return this.nameMapping.get(name)![0]\r\n  }\r\n\r\n  allWithName(name: string) {\r\n    if (!this.nameMapping.has(name)) {\r\n      throw new Error(`Could not find entry with canonical name ${name}`)\r\n    }\r\n    return this.nameMapping.get(name)!\r\n  }\r\n\r\n  where(filter: Predicate<S>) {\r\n    return this.entries.filter((entry) => filter(entry))\r\n  }\r\n\r\n  hasNameWhere(name: string, filter: Predicate<S[\"data\"]>) {\r\n    const entries = this.nameMapping.get(name)\r\n    if (!entries) return false\r\n    return entries.some(\r\n      (entry) => entry.canonicalName() === name && filter(entry.data),\r\n    )\r\n  }\r\n}\r\n","import Specs from \"./PolyhedronSpecs\"\r\nimport Queries from \"./Queries\"\r\nimport { polygons, Polygon } from \"../polygons\"\r\nimport { prismaticTypes, PrismaticType } from \"./common\"\r\n\r\nconst bases = [2, ...polygons] as const\r\n\r\ninterface PrismaticData {\r\n  base: 2 | Polygon\r\n  type: PrismaticType\r\n}\r\n\r\n/**\r\n * A prismatic uniform polyhedron is a prism or antiprism:\r\n * https://en.wikipedia.org/wiki/Prismatic_uniform_polyhedron\r\n */\r\nexport default class Prismatic extends Specs<PrismaticData> {\r\n  constructor(data: PrismaticData) {\r\n    super(\"prismatic\", data)\r\n  }\r\n\r\n  withData(data: Partial<PrismaticData>) {\r\n    return new Prismatic({ ...this.data, ...data })\r\n  }\r\n\r\n  isPrism = () => this.data.type === \"prism\"\r\n  isAntiprism = () => this.data.type === \"antiprism\"\r\n\r\n  isDigonal = () => this.data.base === 2\r\n  isPrimary = () => this.data.base > 2 && this.data.base <= 5\r\n  isSecondary = () => this.data.base >= 6\r\n\r\n  static *getAll() {\r\n    for (const base of bases) {\r\n      for (const type of prismaticTypes) {\r\n        // The digonal prism is just a square, so skip\r\n        if (base === 2 && type === \"prism\") continue\r\n        yield new Prismatic({ base, type })\r\n      }\r\n    }\r\n  }\r\n\r\n  static query = new Queries(Prismatic.getAll())\r\n}\r\n","import { Items, Twist } from \"types\"\r\nimport { PrimaryPolygon, primaryPolygons } from \"../polygons\"\r\nimport Specs from \"./PolyhedronSpecs\"\r\nimport Queries from \"./Queries\"\r\n\r\nconst families = primaryPolygons\r\nexport type Family = PrimaryPolygon\r\n\r\nconst facets = [\"face\", \"vertex\"] as const\r\nexport type Facet = Items<typeof facets>\r\n\r\nconst operations = [\r\n  \"regular\",\r\n  \"truncate\",\r\n  \"rectify\",\r\n  \"bevel\",\r\n  \"cantellate\",\r\n  \"snub\",\r\n] as const\r\nexport type Operation = Items<typeof operations>\r\n\r\ninterface ClassicalData {\r\n  family: Family\r\n  facet?: Facet\r\n  operation: Operation\r\n  twist?: Twist\r\n}\r\n\r\n/**\r\n * An classical uniform polyhedron is a Platonic or Archimedean solid.\r\n */\r\nexport default class Classical extends Specs<ClassicalData> {\r\n  private constructor(data: ClassicalData) {\r\n    super(\"classical\", data)\r\n    if (this.isTetrahedral() || !this.hasFacet()) {\r\n      delete this.data.facet\r\n    }\r\n    if (!this.isChiral()) {\r\n      delete this.data.twist\r\n    }\r\n    // Set a default twist for snub solids\r\n    if (this.isChiral() && !this.data.twist) {\r\n      this.data.twist = \"left\"\r\n    }\r\n  }\r\n\r\n  withData(data: Partial<ClassicalData>) {\r\n    return new Classical({ ...this.data, ...data })\r\n  }\r\n\r\n  isTetrahedral = () => this.data.family === 3\r\n  isOctahedral = () => this.data.family === 4\r\n  isIcosahedral = () => this.data.family === 5\r\n\r\n  isRegular = () => this.data.operation === \"regular\"\r\n  isTruncated = () => this.data.operation === \"truncate\"\r\n  isRectified = () => this.data.operation === \"rectify\"\r\n  isBevelled = () => this.data.operation === \"bevel\"\r\n  isCantellated = () => this.data.operation === \"cantellate\"\r\n  isSnub = () => this.data.operation === \"snub\"\r\n\r\n  hasFacet = () => this.isRegular() || this.isTruncated()\r\n\r\n  isFace = () => this.data.facet === \"face\"\r\n  isVertex = () => this.data.facet === \"vertex\"\r\n\r\n  isChiral = () => this.isSnub() && !this.isTetrahedral()\r\n\r\n  static *getAll() {\r\n    for (const operation of operations) {\r\n      for (const family of families) {\r\n        if (family !== 3 && [\"regular\", \"truncate\"].includes(operation)) {\r\n          for (const facet of facets) {\r\n            yield new Classical({ family, operation, facet })\r\n          }\r\n        } else {\r\n          yield new Classical({ family, operation })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static query = new Queries(Classical.getAll())\r\n}\r\n","import { Items, Twist } from \"types\"\r\nimport { PrimaryPolygon, primaryPolygons } from \"../polygons\"\r\nimport Specs from \"./PolyhedronSpecs\"\r\nimport Queries from \"./Queries\"\r\nimport { PrismaticType, prismaticTypes } from \"./common\"\r\n\r\nconst elongations = [null, ...prismaticTypes]\r\n\r\nconst counts = [1, 2] as const\r\ntype Count = Items<typeof counts>\r\n\r\nconst gyrations = [\"ortho\", \"gyro\"] as const\r\ntype Gyration = Items<typeof gyrations>\r\n\r\nconst capTypes = [\"pyramid\", \"cupola\", \"rotunda\", \"cupolarotunda\"] as const\r\ntype CapstoneType = Items<typeof capTypes>\r\n\r\ninterface CapstoneData {\r\n  base: 2 | PrimaryPolygon\r\n  type: CapstoneType\r\n  elongation: null | PrismaticType\r\n  count: Count\r\n  gyrate?: Gyration\r\n  twist?: Twist\r\n}\r\n\r\n/**\r\n * A capstone polyhedron is a pyramid, cupola or rotunda that has been elongated\r\n * or doubled.\r\n */\r\nexport default class Capstone extends Specs<CapstoneData> {\r\n  private constructor(data: CapstoneData) {\r\n    super(\"capstone\", data)\r\n    if (this.isGyroelongated() || this.isMono()) {\r\n      delete this.data.gyrate\r\n    }\r\n    if (!this.isChiral()) {\r\n      delete this.data.twist\r\n    }\r\n    if (this.isChiral() && !this.data.twist) {\r\n      this.data.twist = \"left\"\r\n    }\r\n  }\r\n\r\n  withData(data: Partial<CapstoneData>) {\r\n    return new Capstone({ ...this.data, ...data })\r\n  }\r\n\r\n  isDigonal = () => this.data.base === 2\r\n  isTriangular = () => this.data.base === 3\r\n  isSquare = () => this.data.base === 4\r\n  isPentagonal = () => this.data.base === 5\r\n\r\n  isPyramid = () => this.data.type === \"pyramid\"\r\n  isCupola = () => this.data.type === \"cupola\"\r\n  isRotunda = () => this.data.type === \"rotunda\"\r\n  isCupolaRotunda = () => this.data.type === \"cupolarotunda\"\r\n\r\n  isMono = () => this.data.count === 1\r\n  isBi = () => this.data.count === 2\r\n\r\n  isShortened = () => !this.data.elongation\r\n  isElongated = () => this.data.elongation === \"prism\"\r\n  isGyroelongated = () => this.data.elongation === \"antiprism\"\r\n\r\n  isGyro = () => this.data.gyrate === \"gyro\"\r\n  isOrtho = () => this.data.gyrate === \"ortho\"\r\n\r\n  // Overwrite from PolyhedronSpec\r\n  isChiral = () => this.isGyroelongated() && this.isBi() && !this.isPyramid()\r\n\r\n  static *getAll() {\r\n    for (const base of primaryPolygons) {\r\n      for (const type of capTypes) {\r\n        // Only pentagonal rotundae exist\r\n        if ([\"rotunda\", \"cupolarotunda\"].includes(type) && base !== 5) {\r\n          continue\r\n        }\r\n        for (const elongation of elongations) {\r\n          // Gyroelongated pyramids are concave\r\n          if (base === 3 && type === \"pyramid\" && elongation === \"antiprism\") {\r\n            continue\r\n          }\r\n          for (const count of counts) {\r\n            // Cupola-rotundae only exist if there are two of them\r\n            if (type === \"cupolarotunda\" && count !== 2) {\r\n              continue\r\n            }\r\n            // Only cupolae, rotundae can be ortho or gyro\r\n            if (\r\n              count === 2 &&\r\n              type !== \"pyramid\" &&\r\n              elongation !== \"antiprism\"\r\n            ) {\r\n              for (const gyrate of gyrations) {\r\n                yield new Capstone({\r\n                  base,\r\n                  type,\r\n                  elongation,\r\n                  count,\r\n                  gyrate,\r\n                })\r\n              }\r\n            } else {\r\n              yield new Capstone({ base, type, elongation, count })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    yield new Capstone({ base: 2, type: \"cupola\", elongation: null, count: 1 })\r\n    yield new Capstone({\r\n      base: 2,\r\n      type: \"cupola\",\r\n      elongation: null,\r\n      count: 2,\r\n      gyrate: \"gyro\",\r\n    })\r\n  }\r\n\r\n  static query = new Queries(Capstone.getAll())\r\n}\r\n","import { Items } from \"types\"\r\nimport Specs from \"./PolyhedronSpecs\"\r\nimport Queries from \"./Queries\"\r\n\r\nconst bases = [\r\n  \"sphenocorona\",\r\n  \"augmented sphenocorona\",\r\n  \"sphenomegacorona\",\r\n  \"hebesphenomegacorona\",\r\n  \"disphenocingulum\",\r\n  \"bilunabirotunda\",\r\n  \"triangular hebesphenorotunda\",\r\n] as const\r\n\r\ntype ElementaryBase = Items<typeof bases>\r\n\r\ninterface ElementaryData {\r\n  base: ElementaryBase\r\n}\r\n\r\nexport default class Elementary extends Specs<ElementaryData> {\r\n  constructor(data: ElementaryData) {\r\n    super(\"elementary\", data)\r\n  }\r\n\r\n  static *getAll() {\r\n    for (const base of bases) {\r\n      yield new Elementary({ base })\r\n    }\r\n  }\r\n\r\n  static query = new Queries(Elementary.getAll())\r\n}\r\n","import { Items } from \"types\"\r\nimport Specs from \"./PolyhedronSpecs\"\r\nimport Queries from \"./Queries\"\r\nimport Prismatic from \"./Prismatic\"\r\n\r\nconst sources = Prismatic.query.where(\r\n  (s) => s.isAntiprism() && !s.isSecondary(),\r\n)\r\nconst operations = [null, \"snub\"] as const\r\ntype Operation = Items<typeof operations>\r\n\r\ninterface ModifiedAntiprismData {\r\n  source: Prismatic\r\n  // operation: null | \"rectified\" | \"snub\"\r\n  operation: Operation\r\n}\r\n\r\nexport default class ModifiedAntiprism extends Specs<ModifiedAntiprismData> {\r\n  constructor(data: ModifiedAntiprismData) {\r\n    super(\"modified antiprism\", data)\r\n  }\r\n\r\n  static *getAll() {\r\n    for (const source of sources) {\r\n      for (const operation of operations) {\r\n        // The snub pentagonal antiprism is non-CRF\r\n        if (source.data.base === 5 && operation === \"snub\") {\r\n          continue\r\n        }\r\n        yield new ModifiedAntiprism({ source, operation })\r\n      }\r\n    }\r\n  }\r\n\r\n  static query = new Queries(ModifiedAntiprism.getAll())\r\n}\r\n","import Classical from \"./Classical\"\r\nimport Prismatic from \"./Prismatic\"\r\nimport Capstone from \"./Capstone\"\r\nimport Composite from \"./Composite\"\r\nimport ModifiedAntiprism from \"./ModifiedAntiprism\"\r\nimport Elementary from \"./Elementary\"\r\n\r\nconst subclasses = [\r\n  Classical,\r\n  Prismatic,\r\n  Capstone,\r\n  Composite,\r\n  ModifiedAntiprism,\r\n  Elementary,\r\n]\r\n\r\nexport default function getSpecs(name: string) {\r\n  for (const Subclass of subclasses) {\r\n    if (Subclass.query.hasName(name)) {\r\n      return Subclass.query.withName(name)\r\n    }\r\n  }\r\n  throw new Error(`Could not find structure with canonical name ${name}`)\r\n}\r\n\r\nexport function* getAllSpecs(name: string) {\r\n  for (const Subclass of subclasses) {\r\n    if (Subclass.query.hasName(name)) {\r\n      yield* Subclass.query.allWithName(name)\r\n    }\r\n  }\r\n}\r\n","import { BiMap } from \"bimap\"\r\nimport { allSolidNames } from \"./common\"\r\nimport getSpecs from \"./specs/getSpecs\"\r\n\r\nfunction getConwayNotation(name: string) {\r\n  return getSpecs(name).conwaySymbol()\r\n}\r\n\r\nconst conwayMapping = new BiMap(\r\n  allSolidNames.map((name) => [name, getConwayNotation(name)]),\r\n)\r\n\r\nexport function isConwayNotation(symbol: string) {\r\n  return conwayMapping.hasValue(symbol)\r\n}\r\n\r\nexport function fromConwayNotation(symbol: string) {\r\n  return conwayMapping.of(symbol)\r\n}\r\n","import { assertValidSolid } from \"./common\"\r\n\r\nexport const alternateNamesMapping: Record<string, string[]> = {\r\n  tetrahedron: [\"triangular pyramid\", \"digonal antiprism\", \"disphenoid\"],\r\n  cube: [\"square prism\"],\r\n  octahedron: [\"tetratetrahedron\", \"triangular antiprism\", \"square bipyramid\"],\r\n  icosahedron: [\r\n    \"snub tetrahedron\",\r\n    \"snub tetratetrahedron\",\r\n    \"gyroelongated pentagonal bipyramid\",\r\n    \"snub triangular antiprism\",\r\n  ],\r\n  cuboctahedron: [\"rhombitetratetrahedron\", \"triangular gyrobicupola\"],\r\n  \"truncated octahedron\": [\"truncated tetratetrahedron\"],\r\n  rhombicuboctahedron: [\"elongated square orthobicupola\"],\r\n  \"snub cube\": [\"snub cuboctahedron\"],\r\n  icosidodecahedron: [\"pentagonal gyrobirotunda\"],\r\n  \"snub dodecahedron\": [\"snub icosidodecahedron\"],\r\n\r\n  // fastigium\r\n  \"triangular prism\": [\"fastigium\", \"digonal cupola\"],\r\n  gyrobifastigium: [\"digonal gyrobicupola\"],\r\n\r\n  // related to augmented/diminished/gyrate solids\r\n  \"pentagonal antiprism\": [\"parabidiminished icosahedron\"],\r\n  \"gyroelongated pentagonal pyramid\": [\"diminished icosahedron\"],\r\n  \"square pyramid\": [\"diminished octahedron\"],\r\n\r\n  \"triangular bipyramid\": [\"augmented tetrahedron\"],\r\n  \"elongated square pyramid\": [\"augmented cube\", \"augmented square prism\"],\r\n  \"elongated square bipyramid\": [\r\n    \"biaugmented cube\",\r\n    \"biaugmented square prism\",\r\n  ],\r\n\r\n  \"elongated square gyrobicupola\": [\r\n    \"pseudorhombicuboctahedron\",\r\n    \"gyrate rhombicuboctahedron\",\r\n  ],\r\n  \"elongated square cupola\": [\"diminished rhombicuboctahedron\"],\r\n  \"octagonal prism\": [\"bidiminished rhombicuboctahedron\"],\r\n\r\n  // Snub antiprisms\r\n  \"snub disphenoid\": [\"snub digonal antiprism\"],\r\n}\r\nfunction* getCanonicalMapping() {\r\n  for (const [canonical, alts] of Object.entries(alternateNamesMapping)) {\r\n    for (const alt of alts) {\r\n      yield [alt, canonical]\r\n    }\r\n  }\r\n}\r\n\r\nconst canonicalMapping = Object.fromEntries(getCanonicalMapping())\r\nconst alternateNames = Object.keys(canonicalMapping)\r\n\r\nexport function getCanonicalName(name: string) {\r\n  const canonical = canonicalMapping[name]\r\n  if (canonical) return canonical\r\n  return assertValidSolid(name)\r\n}\r\n\r\nexport function getAlternateNames(name: string) {\r\n  return alternateNamesMapping[name] ?? []\r\n}\r\n\r\nexport function isAlternateName(name: string) {\r\n  return alternateNames.includes(name)\r\n}\r\n","import { Items } from \"types\"\r\nexport const prismaticTypes = [\"prism\", \"antiprism\"] as const\r\nexport type PrismaticType = Items<typeof prismaticTypes>\r\n","import { omit, isEqual } from \"lodash-es\"\r\nimport { Items } from \"types\"\r\n\r\nimport Specs from \"./PolyhedronSpecs\"\r\nimport Queries from \"./Queries\"\r\nimport Classical from \"./Classical\"\r\nimport Prismatic from \"./Prismatic\"\r\n\r\nexport const counts = [0, 1, 2, 3] as const\r\nexport type Count = Items<typeof counts>\r\n\r\nconst alignments = [\"meta\", \"para\"] as const\r\ntype Align = Items<typeof alignments>\r\n\r\ninterface CompositeData {\r\n  source: Classical | Prismatic\r\n  augmented: Count\r\n  diminished: Count\r\n  gyrate: Count\r\n  align?: Align\r\n}\r\n\r\nconst prismaticBases = Prismatic.query.where(\r\n  (s) => s.isPrism() && s.data.base <= 6,\r\n)\r\nconst augmentedClassicalBases = Classical.query.where(\r\n  (s) => s.hasFacet() && !s.isVertex(),\r\n)\r\nconst icosahedron = Classical.query.withName(\"icosahedron\")\r\nconst rhombicosidodecahedron = Classical.query.withName(\r\n  \"rhombicosidodecahedron\",\r\n)\r\n\r\nfunction limitCount(limit: number) {\r\n  return counts.filter((n) => n <= limit)\r\n}\r\n\r\n/**\r\n * A composite Johnson solid consists of a Uniform polyhedron\r\n * with pyramids or cupolae added, removed, or gyrated from it.\r\n */\r\nexport default class Composite extends Specs<CompositeData> {\r\n  private constructor({\r\n    augmented = 0,\r\n    diminished = 0,\r\n    gyrate = 0,\r\n    source,\r\n    align,\r\n  }: Partial<CompositeData> & { source: Prismatic | Classical }) {\r\n    super(\"composite\", { source, align, augmented, diminished, gyrate })\r\n    if (!this.isBi()) {\r\n      delete this.data.align\r\n    }\r\n  }\r\n\r\n  withData(data: Partial<CompositeData>) {\r\n    return new Composite({ ...this.data, ...data })\r\n  }\r\n\r\n  totalCount() {\r\n    const { augmented, diminished, gyrate } = this.data\r\n    return augmented + diminished + gyrate\r\n  }\r\n\r\n  isMono = () => this.totalCount() === 1\r\n  isBi = () => this.totalCount() === 2\r\n  isTri = () => this.totalCount() === 3\r\n\r\n  isAugmented = () => this.data.augmented > 0\r\n  isDiminished = () => this.data.diminished > 0\r\n  isGyrate = () => this.data.gyrate > 0\r\n\r\n  isPara = () => this.data.align === \"para\"\r\n  isMeta = () => this.data.align === \"meta\"\r\n\r\n  equals(s2: Specs) {\r\n    if (!s2.isComposite()) return false\r\n    // Recursively compare the source data and other data\r\n    const { source, ...data } = this.data\r\n    const source2: Specs = s2.data.source\r\n    const data2: Omit<CompositeData, \"source\"> = omit(s2.data, \"source\")\r\n    return source.equals(source2) && isEqual(data, data2)\r\n  }\r\n\r\n  static *getAll() {\r\n    // Augmented prisms\r\n    for (const source of prismaticBases) {\r\n      for (const augmented of limitCount(source.data.base % 3 === 0 ? 3 : 2)) {\r\n        if (source.data.base === 6 && augmented === 2) {\r\n          for (const align of alignments) {\r\n            yield new Composite({ source, augmented, align })\r\n          }\r\n        } else {\r\n          yield new Composite({ source, augmented })\r\n        }\r\n      }\r\n    }\r\n\r\n    // Augmented classical polyhedra\r\n    for (const source of augmentedClassicalBases) {\r\n      for (const augmented of limitCount(source.data.family - 2)) {\r\n        if (source.isIcosahedral() && augmented === 2) {\r\n          for (const align of alignments) {\r\n            yield new Composite({ source, augmented, align })\r\n          }\r\n        } else {\r\n          yield new Composite({ source, augmented })\r\n        }\r\n      }\r\n    }\r\n\r\n    // TODO add more diminished and gyrate polyhedra\r\n\r\n    // diminished icosahedra\r\n    for (const diminished of counts) {\r\n      if (diminished === 2) {\r\n        for (const align of alignments) {\r\n          yield new Composite({ source: icosahedron, diminished, align })\r\n        }\r\n      } else {\r\n        yield new Composite({ source: icosahedron, diminished })\r\n      }\r\n    }\r\n    yield new Composite({ source: icosahedron, diminished: 3, augmented: 1 })\r\n\r\n    // rhombicosidodecahedra\r\n    for (const gyrate of counts) {\r\n      for (const diminished of limitCount(3 - gyrate)) {\r\n        if (gyrate + diminished === 2) {\r\n          for (const align of alignments) {\r\n            yield new Composite({\r\n              source: rhombicosidodecahedron,\r\n              gyrate,\r\n              diminished,\r\n              align,\r\n            })\r\n          }\r\n        } else {\r\n          yield new Composite({\r\n            source: rhombicosidodecahedron,\r\n            gyrate,\r\n            diminished,\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static query = new Queries(Composite.getAll())\r\n}\r\n","var map = {\n\t\"./antiprisms.json\": 320,\n\t\"./archimedean.json\": 321,\n\t\"./johnson.json\": 322,\n\t\"./platonic.json\": 323,\n\t\"./prisms.json\": 324\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 319;","var map = {\n\t\"./augmented-dodecahedron.json\": 326,\n\t\"./augmented-hexagonal-prism.json\": 327,\n\t\"./augmented-pentagonal-prism.json\": 328,\n\t\"./augmented-sphenocorona.json\": 329,\n\t\"./augmented-triangular-prism.json\": 330,\n\t\"./augmented-tridiminished-icosahedron.json\": 331,\n\t\"./augmented-truncated-cube.json\": 332,\n\t\"./augmented-truncated-dodecahedron.json\": 333,\n\t\"./augmented-truncated-tetrahedron.json\": 334,\n\t\"./biaugmented-pentagonal-prism.json\": 335,\n\t\"./biaugmented-triangular-prism.json\": 336,\n\t\"./biaugmented-truncated-cube.json\": 337,\n\t\"./bigyrate-diminished-rhombicosidodecahedron.json\": 338,\n\t\"./bilunabirotunda.json\": 339,\n\t\"./cube.json\": 340,\n\t\"./cuboctahedron.json\": 341,\n\t\"./decagonal-antiprism.json\": 342,\n\t\"./decagonal-prism.json\": 343,\n\t\"./diminished-rhombicosidodecahedron.json\": 344,\n\t\"./disphenocingulum.json\": 345,\n\t\"./dodecahedron.json\": 346,\n\t\"./elongated-pentagonal-bipyramid.json\": 347,\n\t\"./elongated-pentagonal-cupola.json\": 348,\n\t\"./elongated-pentagonal-gyrobicupola.json\": 349,\n\t\"./elongated-pentagonal-gyrobirotunda.json\": 350,\n\t\"./elongated-pentagonal-gyrocupolarotunda.json\": 351,\n\t\"./elongated-pentagonal-orthobicupola.json\": 352,\n\t\"./elongated-pentagonal-orthobirotunda.json\": 353,\n\t\"./elongated-pentagonal-orthocupolarotunda.json\": 354,\n\t\"./elongated-pentagonal-pyramid.json\": 355,\n\t\"./elongated-pentagonal-rotunda.json\": 356,\n\t\"./elongated-square-bipyramid.json\": 357,\n\t\"./elongated-square-cupola.json\": 358,\n\t\"./elongated-square-gyrobicupola.json\": 359,\n\t\"./elongated-square-pyramid.json\": 360,\n\t\"./elongated-triangular-bipyramid.json\": 361,\n\t\"./elongated-triangular-cupola.json\": 362,\n\t\"./elongated-triangular-gyrobicupola.json\": 363,\n\t\"./elongated-triangular-orthobicupola.json\": 364,\n\t\"./elongated-triangular-pyramid.json\": 365,\n\t\"./gyrate-bidiminished-rhombicosidodecahedron.json\": 366,\n\t\"./gyrate-rhombicosidodecahedron.json\": 367,\n\t\"./gyrobifastigium.json\": 368,\n\t\"./gyroelongated-pentagonal-bicupola.json\": 369,\n\t\"./gyroelongated-pentagonal-birotunda.json\": 370,\n\t\"./gyroelongated-pentagonal-cupola.json\": 371,\n\t\"./gyroelongated-pentagonal-cupolarotunda.json\": 372,\n\t\"./gyroelongated-pentagonal-pyramid.json\": 373,\n\t\"./gyroelongated-pentagonal-rotunda.json\": 374,\n\t\"./gyroelongated-square-bicupola.json\": 375,\n\t\"./gyroelongated-square-bipyramid.json\": 376,\n\t\"./gyroelongated-square-cupola.json\": 377,\n\t\"./gyroelongated-square-pyramid.json\": 378,\n\t\"./gyroelongated-triangular-bicupola.json\": 379,\n\t\"./gyroelongated-triangular-cupola.json\": 380,\n\t\"./hebesphenomegacorona.json\": 381,\n\t\"./hexagonal-antiprism.json\": 382,\n\t\"./hexagonal-prism.json\": 383,\n\t\"./icosahedron.json\": 384,\n\t\"./icosidodecahedron.json\": 385,\n\t\"./metabiaugmented-dodecahedron.json\": 386,\n\t\"./metabiaugmented-hexagonal-prism.json\": 387,\n\t\"./metabiaugmented-truncated-dodecahedron.json\": 388,\n\t\"./metabidiminished-icosahedron.json\": 389,\n\t\"./metabidiminished-rhombicosidodecahedron.json\": 390,\n\t\"./metabigyrate-rhombicosidodecahedron.json\": 391,\n\t\"./metagyrate-diminished-rhombicosidodecahedron.json\": 392,\n\t\"./octagonal-antiprism.json\": 393,\n\t\"./octagonal-prism.json\": 394,\n\t\"./octahedron.json\": 395,\n\t\"./parabiaugmented-dodecahedron.json\": 396,\n\t\"./parabiaugmented-hexagonal-prism.json\": 397,\n\t\"./parabiaugmented-truncated-dodecahedron.json\": 398,\n\t\"./parabidiminished-rhombicosidodecahedron.json\": 399,\n\t\"./parabigyrate-rhombicosidodecahedron.json\": 400,\n\t\"./paragyrate-diminished-rhombicosidodecahedron.json\": 401,\n\t\"./pentagonal-antiprism.json\": 402,\n\t\"./pentagonal-bipyramid.json\": 403,\n\t\"./pentagonal-cupola.json\": 404,\n\t\"./pentagonal-gyrobicupola.json\": 405,\n\t\"./pentagonal-gyrocupolarotunda.json\": 406,\n\t\"./pentagonal-orthobicupola.json\": 407,\n\t\"./pentagonal-orthobirotunda.json\": 408,\n\t\"./pentagonal-orthocupolarotunda.json\": 409,\n\t\"./pentagonal-prism.json\": 410,\n\t\"./pentagonal-pyramid.json\": 411,\n\t\"./pentagonal-rotunda.json\": 412,\n\t\"./rhombicosidodecahedron.json\": 413,\n\t\"./rhombicuboctahedron.json\": 414,\n\t\"./snub-cube.json\": 415,\n\t\"./snub-disphenoid.json\": 416,\n\t\"./snub-dodecahedron.json\": 417,\n\t\"./snub-square-antiprism.json\": 418,\n\t\"./sphenocorona.json\": 419,\n\t\"./sphenomegacorona.json\": 420,\n\t\"./square-antiprism.json\": 421,\n\t\"./square-cupola.json\": 422,\n\t\"./square-gyrobicupola.json\": 423,\n\t\"./square-orthobicupola.json\": 424,\n\t\"./square-pyramid.json\": 425,\n\t\"./tetrahedron.json\": 426,\n\t\"./triangular-bipyramid.json\": 427,\n\t\"./triangular-cupola.json\": 428,\n\t\"./triangular-hebesphenorotunda.json\": 429,\n\t\"./triangular-orthobicupola.json\": 430,\n\t\"./triangular-prism.json\": 431,\n\t\"./triaugmented-dodecahedron.json\": 432,\n\t\"./triaugmented-hexagonal-prism.json\": 433,\n\t\"./triaugmented-triangular-prism.json\": 434,\n\t\"./triaugmented-truncated-dodecahedron.json\": 435,\n\t\"./tridiminished-icosahedron.json\": 436,\n\t\"./tridiminished-rhombicosidodecahedron.json\": 437,\n\t\"./trigyrate-rhombicosidodecahedron.json\": 438,\n\t\"./truncated-cube.json\": 439,\n\t\"./truncated-cuboctahedron.json\": 440,\n\t\"./truncated-dodecahedron.json\": 441,\n\t\"./truncated-icosahedron.json\": 442,\n\t\"./truncated-icosidodecahedron.json\": 443,\n\t\"./truncated-octahedron.json\": 444,\n\t\"./truncated-tetrahedron.json\": 445\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 325;"],"sourceRoot":""}